{
  "address": "0x3B9871088DefD27836029AB380f5f1A08Baf32aC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalThreshold_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorumThreshold_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decisionThreshold_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingDuration_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferValueForDelay_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[4]",
          "name": "executionDelays_",
          "type": "uint256[4]"
        }
      ],
      "name": "GovernanceSettingsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "callDatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "quorumThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decisionThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executionDelay",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Governor.ProposalCoreData",
          "name": "core",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum IRecordsRegistry.EventType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metaHash",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct Governor.ProposalMetaData",
          "name": "meta",
          "type": "tuple"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Governor.Ballot",
          "name": "ballot",
          "type": "uint8"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_BASE_EXECUTION_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ballots",
      "outputs": [
        {
          "internalType": "enum Governor.Ballot",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancelProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "companyInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ein",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dateOfIncorporation",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decisionThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IRecordsRegistry.EventType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "executionDelays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getBallot",
      "outputs": [
        {
          "internalType": "enum Governor.Ballot",
          "name": "ballot",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IToken.TokenType",
          "name": "tokenType",
          "type": "uint8"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "trademark_",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decisionThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferValueForDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "executionDelays",
              "type": "uint256[4]"
            }
          ],
          "internalType": "struct IGovernanceSettings.NewGovernanceSettings",
          "name": "governanceSettings_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "jurisdiction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entityType",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ein",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dateOfIncorporation",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICompaniesRegistry.CompanyInfo",
          "name": "companyInfo_",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDAO",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProposalId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalState",
      "outputs": [
        {
          "internalType": "enum Governor.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "callDatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "quorumThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decisionThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executionDelay",
              "type": "uint256"
            }
          ],
          "internalType": "struct Governor.ProposalCoreData",
          "name": "core",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "forVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "againstVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum Governor.ProposalState",
              "name": "executionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct Governor.ProposalVotingData",
          "name": "vote",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum IRecordsRegistry.EventType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metaHash",
              "type": "string"
            }
          ],
          "internalType": "struct Governor.ProposalMetaData",
          "name": "meta",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decisionThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferValueForDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "executionDelays",
              "type": "uint256[4]"
            }
          ],
          "internalType": "struct IGovernanceSettings.NewGovernanceSettings",
          "name": "settings",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metaHash",
          "type": "string"
        }
      ],
      "name": "proposeGovernanceSettings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "userWhitelist",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum IToken.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct IToken.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metaHash",
          "type": "string"
        }
      ],
      "name": "proposeTGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metaHash",
          "type": "string"
        }
      ],
      "name": "proposeTransfer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "service",
      "outputs": [
        {
          "internalType": "contract IService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decisionThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferValueForDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "executionDelays",
              "type": "uint256[4]"
            }
          ],
          "internalType": "struct IGovernanceSettings.NewGovernanceSettings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "name": "setGovernanceSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "enum IToken.TokenType",
          "name": "tokenType_",
          "type": "uint8"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IToken.TokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trademark",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferValueForDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3c9f3200b813ea7045e69f20f25488e2044b218634ca3c89b4058c8959fa5d78",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0x3B9871088DefD27836029AB380f5f1A08Baf32aC",
    "transactionIndex": 64,
    "gasUsed": "4686789",
    "logsBloom": "0x
    "blockHash": "0x135d3515af6c15a7a8ae7097d742a9a6d082a46be5b34bb2a15223fb5b01ebc7",
    "transactionHash": "0x3c9f3200b813ea7045e69f20f25488e2044b218634ca3c89b4058c8959fa5d78",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 8339617,
        "transactionHash": "0x3c9f3200b813ea7045e69f20f25488e2044b218634ca3c89b4058c8959fa5d78",
        "address": "0x3B9871088DefD27836029AB380f5f1A08Baf32aC",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 194,
        "blockHash": "0x135d3515af6c15a7a8ae7097d742a9a6d082a46be5b34bb2a15223fb5b01ebc7"
      }
    ],
    "blockNumber": 8339617,
    "cumulativeGasUsed": "14051337",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "73e1d27fa3b1fad97fd6222f02a1bb42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumThreshold_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decisionThreshold_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingDuration_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferValueForDelay_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"executionDelays_\",\"type\":\"uint256[4]\"}],\"name\":\"GovernanceSettingsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"callDatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"quorumThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decisionThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Governor.ProposalCoreData\",\"name\":\"core\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IRecordsRegistry.EventType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaHash\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Governor.ProposalMetaData\",\"name\":\"meta\",\"type\":\"tuple\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Governor.Ballot\",\"name\":\"ballot\",\"type\":\"uint8\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BASE_EXECUTION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"internalType\":\"enum Governor.Ballot\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ein\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decisionThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRecordsRegistry.EventType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"executionDelays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getBallot\",\"outputs\":[{\"internalType\":\"enum Governor.Ballot\",\"name\":\"ballot\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IToken.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"trademark_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decisionThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferValueForDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"executionDelays\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct IGovernanceSettings.NewGovernanceSettings\",\"name\":\"governanceSettings_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ein\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct ICompaniesRegistry.CompanyInfo\",\"name\":\"companyInfo_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDAO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalState\",\"outputs\":[{\"internalType\":\"enum Governor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"callDatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"quorumThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decisionThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct Governor.ProposalCoreData\",\"name\":\"core\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum Governor.ProposalState\",\"name\":\"executionState\",\"type\":\"uint8\"}],\"internalType\":\"struct Governor.ProposalVotingData\",\"name\":\"vote\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IRecordsRegistry.EventType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaHash\",\"type\":\"string\"}],\"internalType\":\"struct Governor.ProposalMetaData\",\"name\":\"meta\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decisionThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferValueForDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"executionDelays\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct IGovernanceSettings.NewGovernanceSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaHash\",\"type\":\"string\"}],\"name\":\"proposeGovernanceSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IToken.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IToken.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaHash\",\"type\":\"string\"}],\"name\":\"proposeTGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaHash\",\"type\":\"string\"}],\"name\":\"proposeTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"contract IService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decisionThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferValueForDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"executionDelays\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct IGovernanceSettings.NewGovernanceSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"setGovernanceSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"enum IToken.TokenType\",\"name\":\"tokenType_\",\"type\":\"uint8\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IToken.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trademark\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferValueForDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Company Entry Point\",\"events\":{\"Received(uint256)\":{\"details\":\"Event emitted when pool contract receives ETH.\",\"params\":{\"amount\":\"Amount of received ETH\"}}},\"kind\":\"dev\",\"methods\":{\"cancelProposal(uint256)\":{\"details\":\"Cancel proposal, callable only by Service\",\"params\":{\"proposalId\":\"Proposal ID\"}},\"castVote(uint256,bool)\":{\"details\":\"Cast proposal vote\",\"params\":{\"proposalId\":\"Pool proposal ID\",\"support\":\"Against or for\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"executeProposal(uint256)\":{\"details\":\"Execute proposal\",\"params\":{\"proposalId\":\"Proposal ID\"}},\"getBallot(address,uint256)\":{\"details\":\"Return voting result for a given account and proposal\",\"params\":{\"account\":\"Account address\",\"proposalId\":\"Proposal ID\"},\"returns\":{\"ballot\":\"Vote type\",\"votes\":\"Number of votes cast\"}},\"initialize(address,string,(uint256,uint256,uint256,uint256,uint256,uint256[4]),(uint256,uint256,string,string,uint256))\":{\"details\":\"Create TransferETH proposal\",\"params\":{\"companyInfo_\":\"Company info\",\"governanceSettings_\":\"GovernanceSettings_\",\"owner_\":\"Pool owner\",\"trademark_\":\"Trademark\"}},\"isDAO()\":{\"details\":\"Return if pool had a successful governance TGE\",\"returns\":{\"_0\":\"Is any governance TGE successful\"}},\"owner()\":{\"details\":\"Return pool owner\",\"returns\":{\"_0\":\"Owner address\"}},\"pause()\":{\"details\":\"Pause pool and corresponding TGEs and Tokens\"},\"paused()\":{\"details\":\"Return pool paused status\",\"returns\":{\"_0\":\"Is pool paused\"}},\"proposalState(uint256)\":{\"details\":\"Return proposal state\",\"params\":{\"proposalId\":\"Proposal ID\"},\"returns\":{\"_0\":\"ProposalState\"}},\"proposeGovernanceSettings((uint256,uint256,uint256,uint256,uint256,uint256[4]),string,string)\":{\"params\":{\"description\":\"Proposal description\",\"metaHash\":\"Hash value of proposal metadata\",\"settings\":\"New governance settings\"},\"returns\":{\"proposalId\":\"Created proposal's ID\"}},\"proposeTGE((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address,uint256,uint256),(uint8,string,string,string,uint256,uint8),string,string,string)\":{\"details\":\"Propose new TGE\",\"params\":{\"description\":\"Proposal description\",\"metaHash\":\"Hash value of proposal metadata\",\"metadataURI\":\"TGE metadata URI\",\"tgeInfo\":\"TGE parameters\",\"tokenInfo\":\"Token parameters\"},\"returns\":{\"proposalId\":\"Created proposal's ID\"}},\"proposeTransfer(address,address[],uint256[],string,string)\":{\"details\":\"Propose transfer of assets\",\"params\":{\"amounts\":\"Transfer amounts\",\"asset\":\"Asset to transfer (address(0) for ETH transfers)\",\"description\":\"Proposal description\",\"metaHash\":\"Hash value of proposal metadata\",\"recipients\":\"Transfer recipients\"},\"returns\":{\"proposalId\":\"Created proposal's ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setGovernanceSettings((uint256,uint256,uint256,uint256,uint256,uint256[4]))\":{\"params\":{\"settings\":\"New governance settings\"}},\"setToken(address,uint8)\":{\"details\":\"Set pool preference token\",\"params\":{\"tokenType_\":\"Token type\",\"token_\":\"Token address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Pause pool and corresponding TGEs and Tokens\"}},\"stateVariables\":{\"companyInfo\":{\"details\":\"Company info\"},\"tokens\":{\"details\":\"Pool tokens addresses\"},\"trademark\":{\"details\":\"Pool trademark\"}},\"version\":1},\"userdoc\":{\"events\":{\"GovernanceSettingsSet(uint256,uint256,uint256,uint256,uint256,uint256[4])\":{\"notice\":\"Event emitted when governance settings are set\"}},\"kind\":\"user\",\"methods\":{\"MAX_BASE_EXECUTION_DELAY()\":{\"notice\":\"Max base execution delay (as blocks)\"},\"decisionThreshold()\":{\"notice\":\"Threshold of for votes required for proposal to succeed\"},\"executionDelays(uint8)\":{\"notice\":\"Delays for proposal types\"},\"proposalThreshold()\":{\"notice\":\"Threshold of votes required to propose\"},\"proposeGovernanceSettings((uint256,uint256,uint256,uint256,uint256,uint256[4]),string,string)\":{\"notice\":\"Propose new governance settings\"},\"quorumThreshold()\":{\"notice\":\"Threshold of votes required to reach quorum\"},\"setGovernanceSettings((uint256,uint256,uint256,uint256,uint256,uint256[4]))\":{\"notice\":\"Updates governance settings\"},\"transferValueForDelay()\":{\"notice\":\"Minimal transfer value to trigger delay\"},\"votingDuration()\":{\"notice\":\"Duration of proposal voting (as blocks)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./governor/GovernorProposals.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\nimport \\\"./interfaces/registry/IRecordsRegistry.sol\\\";\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\n\\n/// @dev Company Entry Point\\ncontract Pool is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    GovernorProposals,\\n    IPool\\n{\\n    /// @dev Pool trademark\\n    string public trademark;\\n\\n    /// @dev Company info\\n    IRegistry.CompanyInfo public companyInfo;\\n\\n    /// @dev Pool tokens addresses\\n    mapping(IToken.TokenType => address) public tokens;\\n\\n    // EVENTS\\n\\n    /**\\n     * @dev Event emitted when pool contract receives ETH.\\n     * @param amount Amount of received ETH\\n     */\\n    event Received(uint256 amount);\\n\\n    // MODIFIER\\n\\n    modifier onlyService() {\\n        require(msg.sender == address(service), ExceptionsLibrary.NOT_SERVICE);\\n        _;\\n    }\\n\\n    modifier onlyServiceAdmin() {\\n        require(\\n            service.hasRole(service.ADMIN_ROLE(), msg.sender),\\n            ExceptionsLibrary.NOT_SERVICE_OWNER\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(msg.sender == address(this), ExceptionsLibrary.NOT_POOL);\\n        _;\\n    }\\n\\n    modifier onlyExecutor(uint256 proposalId) {\\n        if (\\n            proposals[proposalId].meta.proposalType ==\\n            IRecordsRegistry.EventType.Transfer\\n        ) {\\n            require(\\n                service.hasRole(service.EXECUTOR_ROLE(), msg.sender),\\n                ExceptionsLibrary.INVALID_USER\\n            );\\n        }\\n        _;\\n    }\\n\\n    // INITIALIZER AND CONFIGURATOR\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Create TransferETH proposal\\n     * @param companyInfo_ Company info\\n     * @param owner_ Pool owner\\n     * @param trademark_ Trademark\\n     * @param governanceSettings_ GovernanceSettings_\\n     */\\n    function initialize(\\n        address owner_,\\n        string memory trademark_,\\n        NewGovernanceSettings memory governanceSettings_,\\n        IRegistry.CompanyInfo memory companyInfo_\\n    ) external initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        __GovernorProposals_init(IService(msg.sender));\\n\\n        _transferOwnership(owner_);\\n        trademark = trademark_;\\n        _setGovernanceSettings(governanceSettings_);\\n        companyInfo = companyInfo_;\\n    }\\n\\n    // RECEIVE\\n\\n    receive() external payable {\\n        emit Received(msg.value);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev Cast proposal vote\\n     * @param proposalId Pool proposal ID\\n     * @param support Against or for\\n     */\\n    function castVote(uint256 proposalId, bool support)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        _castVote(proposalId, support);\\n    }\\n\\n    // RESTRICTED PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev Set pool preference token\\n     * @param token_ Token address\\n     * @param tokenType_ Token type\\n     */\\n    function setToken(address token_, IToken.TokenType tokenType_)\\n        external\\n        onlyService\\n    {\\n        require(token_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n\\n        tokens[tokenType_] = token_;\\n    }\\n\\n    /**\\n     * @dev Execute proposal\\n     * @param proposalId Proposal ID\\n     */\\n    function executeProposal(uint256 proposalId)\\n        external\\n        whenNotPaused\\n        onlyExecutor(proposalId)\\n    {\\n        _executeProposal(proposalId, service);\\n    }\\n\\n    /**\\n     * @dev Cancel proposal, callable only by Service\\n     * @param proposalId Proposal ID\\n     */\\n    function cancelProposal(uint256 proposalId) external onlyService {\\n        _cancelProposal(proposalId);\\n    }\\n\\n    /**\\n     * @dev Pause pool and corresponding TGEs and Tokens\\n     */\\n    function pause() public onlyServiceAdmin {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Pause pool and corresponding TGEs and Tokens\\n     */\\n    function unpause() public onlyServiceAdmin {\\n        _unpause();\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    /**\\n     * @dev Return if pool had a successful governance TGE\\n     * @return Is any governance TGE successful\\n     */\\n    function isDAO() external view returns (bool) {\\n        return\\n            IToken(tokens[IToken.TokenType.Governance])\\n                .isPrimaryTGESuccessful();\\n    }\\n\\n    /**\\n     * @dev Return pool owner\\n     * @return Owner address\\n     */\\n    function owner()\\n        public\\n        view\\n        override(IPool, OwnableUpgradeable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    function getToken(IToken.TokenType tokenType)\\n        external\\n        view\\n        returns (IToken)\\n    {\\n        return IToken(tokens[tokenType]);\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _afterProposalCreated(uint256 proposalId) internal override {\\n        service.addProposal(proposalId);\\n    }\\n\\n    /**\\n     * @dev Function that gets amount of votes for given account\\n     * @param account Account's address\\n     * @return Amount of votes\\n     */\\n    function _getCurrentVotes(address account)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IToken(tokens[IToken.TokenType.Governance]).getVotes(account);\\n    }\\n\\n    /**\\n     * @dev Function that gets total amount of votes at the moment\\n     * @return Amont of votes\\n     */\\n    function _getCurrentTotalVotes() internal view override returns (uint256) {\\n        IToken token = IToken(tokens[IToken.TokenType.Governance]);\\n        return token.totalSupply() - token.getTotalTGEVestedTokens();\\n    }\\n\\n    /**\\n     * @dev Function that gets amount of votes for given account at given block\\n     * @param account Account's address\\n     * @param blockNumber Block number\\n     * @return Account's votes at given block\\n     */\\n    function _getPastVotes(address account, uint256 blockNumber)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            IToken(tokens[IToken.TokenType.Governance]).getPastVotes(\\n                account,\\n                blockNumber\\n            );\\n    }\\n\\n    /**\\n     * @dev Return pool paused status\\n     * @return Is pool paused\\n     */\\n    function paused()\\n        public\\n        view\\n        override(IPool, PausableUpgradeable)\\n        returns (bool)\\n    {\\n        // Pausable\\n        return super.paused();\\n    }\\n}\\n\",\"keccak256\":\"0xf014f996592750c436bfab22ddad2982bf24b7d83e455559c4cd59b84a809e29\",\"license\":\"MIT\"},\"contracts/governor/GovernanceSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/registry/IRegistry.sol\\\";\\nimport \\\"../interfaces/registry/IRecordsRegistry.sol\\\";\\nimport \\\"../interfaces/governor/IGovernanceSettings.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\n\\nabstract contract GovernanceSettings is IGovernanceSettings {\\n    // CONSTANTS\\n\\n    /// @notice Denominator for shares (such as thresholds)\\n    uint256 private constant DENOM = 100 * 10**4;\\n\\n    /// @notice Max base execution delay (as blocks)\\n    uint256 public constant MAX_BASE_EXECUTION_DELAY = 20;\\n\\n    // STORAGE\\n\\n    /// @notice Threshold of votes required to propose\\n    uint256 public proposalThreshold;\\n\\n    /// @notice Threshold of votes required to reach quorum\\n    uint256 public quorumThreshold;\\n\\n    /// @notice Threshold of for votes required for proposal to succeed\\n    uint256 public decisionThreshold;\\n\\n    /// @notice Duration of proposal voting (as blocks)\\n    uint256 public votingDuration;\\n\\n    /// @notice Minimal transfer value to trigger delay\\n    uint256 public transferValueForDelay;\\n\\n    /// @notice Delays for proposal types\\n    mapping(IRegistry.EventType => uint256) public executionDelays;\\n\\n    /// @notice Storage gap (for future upgrades)\\n    uint256[50] private __gap;\\n\\n    // EVENTS\\n\\n    /// @notice Event emitted when governance settings are set\\n    event GovernanceSettingsSet(\\n        uint256 proposalThreshold_,\\n        uint256 quorumThreshold_,\\n        uint256 decisionThreshold_,\\n        uint256 votingDuration_,\\n        uint256 transferValueForDelay_,\\n        uint256[4] executionDelays_\\n    );\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @notice Updates governance settings\\n     * @param settings New governance settings\\n     */\\n    function setGovernanceSettings(NewGovernanceSettings memory settings)\\n        external\\n    {\\n        // Can only be called by self\\n        require(msg.sender == address(this), ExceptionsLibrary.INVALID_USER);\\n\\n        // Update settings\\n        _setGovernanceSettings(settings);\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Updates governance settings\\n     * @param settings New governance settings\\n     */\\n    function _setGovernanceSettings(NewGovernanceSettings memory settings)\\n        internal\\n    {\\n        // Validate settings\\n        _validateGovernanceSettings(settings);\\n\\n        // Apply settings\\n        proposalThreshold = settings.proposalThreshold;\\n        quorumThreshold = settings.quorumThreshold;\\n        decisionThreshold = settings.decisionThreshold;\\n        votingDuration = settings.votingDuration;\\n        transferValueForDelay = settings.transferValueForDelay;\\n\\n        executionDelays[IRecordsRegistry.EventType.None] = settings\\n            .executionDelays[0];\\n        executionDelays[IRecordsRegistry.EventType.Transfer] = settings\\n            .executionDelays[1];\\n        executionDelays[IRecordsRegistry.EventType.TGE] = settings\\n            .executionDelays[2];\\n        executionDelays[\\n            IRecordsRegistry.EventType.GovernanceSettings\\n        ] = settings.executionDelays[3];\\n    }\\n\\n    // INTERNAL VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Validates governance settings\\n     * @param settings New governance settings\\n     */\\n    function _validateGovernanceSettings(NewGovernanceSettings memory settings)\\n        internal\\n        pure\\n    {\\n        // Check all values for sanity\\n        require(\\n            settings.proposalThreshold < DENOM,\\n            ExceptionsLibrary.INVALID_VALUE\\n        );\\n        require(\\n            settings.quorumThreshold < DENOM,\\n            ExceptionsLibrary.INVALID_VALUE\\n        );\\n        require(\\n            settings.decisionThreshold < DENOM,\\n            ExceptionsLibrary.INVALID_VALUE\\n        );\\n        require(settings.votingDuration > 0, ExceptionsLibrary.INVALID_VALUE);\\n        require(\\n            settings.executionDelays[0] > 0 &&\\n                settings.executionDelays[0] < MAX_BASE_EXECUTION_DELAY,\\n            ExceptionsLibrary.INVALID_VALUE\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9593dc84b981251368b70b820d49df9e560ecd0fe2ce305aac23c94697276c34\",\"license\":\"MIT\"},\"contracts/governor/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"../interfaces/IService.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/registry/IRegistry.sol\\\";\\n\\n/// @dev Proposal module for Pool's Governance Token\\nabstract contract Governor {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using AddressUpgradeable for address payable;\\n\\n    // CONSTANTS\\n\\n    /// @notice Denominator for shares (such as thresholds)\\n    uint256 private constant DENOM = 100 * 10**4;\\n\\n    // STORAGE\\n\\n    /// @dev Proposal state\\n    enum ProposalState {\\n        None,\\n        Active,\\n        Failed,\\n        Delayed,\\n        AwaitingExecution,\\n        Executed,\\n        Cancelled\\n    }\\n\\n    /**\\n     * @dev Struct with proposal core data\\n     * @param targets Targets\\n     * @param values ETH values\\n     * @param callDatas Call datas to pass in .call() to target\\n     * @param quorumThreshold Quorum threshold (as percents)\\n     * @param decisionThreshold Decision threshold (as percents)\\n     * @param executionDelay Execution delay after successful voting (blocks)\\n     */\\n    struct ProposalCoreData {\\n        address[] targets;\\n        uint256[] values;\\n        bytes[] callDatas;\\n        uint256 quorumThreshold;\\n        uint256 decisionThreshold;\\n        uint256 executionDelay;\\n    }\\n\\n    /**\\n     * @dev Struct with proposal data related to voting and execution\\n     * @param startBlock Voting start block\\n     * @param endBlock Voting end block\\n     * @param availableVotes Total amount of votes participating\\n     * @param forVotes For votes\\n     * @param againstVotes Against votes\\n     * @param executionState Execution state\\n     */\\n    struct ProposalVotingData {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 availableVotes;\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n        ProposalState executionState;\\n    }\\n\\n    /**\\n     * @dev Struct with proposal metadata\\n     * @param proposalType Proposal type\\n     * @param description Description\\n     * @param metaHash Metadata hash\\n     */\\n    struct ProposalMetaData {\\n        IRegistry.EventType proposalType;\\n        string description;\\n        string metaHash;\\n    }\\n\\n    /**\\n     * @dev Struct with proposal data\\n     * @param core Proposal core data\\n     * @param vote Proposal voting data\\n     * @param meta Proposal meta data\\n     */\\n    struct Proposal {\\n        ProposalCoreData core;\\n        ProposalVotingData vote;\\n        ProposalMetaData meta;\\n    }\\n\\n    /// @dev Proposals\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    enum Ballot {\\n        None,\\n        Against,\\n        For\\n    }\\n\\n    /// @dev Voter's ballots\\n    mapping(address => mapping(uint256 => Ballot)) public ballots;\\n\\n    /// @dev Last proposal ID\\n    uint256 public lastProposalId;\\n\\n    // EVENTS\\n\\n    /**\\n     * @dev Event emitted on proposal creation\\n     * @param proposalId Proposal ID\\n     * @param core Proposal core data\\n     * @param meta Proposal meta data\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        ProposalCoreData core,\\n        ProposalMetaData meta\\n    );\\n\\n    /**\\n     * @dev Event emitted on proposal vote cast\\n     * @param voter Voter address\\n     * @param proposalId Proposal ID\\n     * @param votes Amount of votes\\n     * @param ballot Ballot (against or for)\\n     */\\n    event VoteCast(\\n        address voter,\\n        uint256 proposalId,\\n        uint256 votes,\\n        Ballot ballot\\n    );\\n\\n    /**\\n     * @dev Event emitted on proposal execution\\n     * @param proposalId Proposal ID\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Event emitted on proposal cancellation\\n     * @param proposalId Proposal ID\\n     */\\n    event ProposalCancelled(uint256 proposalId);\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    /**\\n     * @dev Return proposal state\\n     * @param proposalId Proposal ID\\n     * @return ProposalState\\n     */\\n    function proposalState(uint256 proposalId)\\n        public\\n        view\\n        returns (ProposalState)\\n    {\\n        Proposal memory proposal = proposals[proposalId];\\n\\n        // If proposal executed, cancelled or simply not started, return immediately\\n        if (\\n            proposal.vote.executionState == ProposalState.Executed ||\\n            proposal.vote.executionState == ProposalState.Cancelled ||\\n            proposal.vote.startBlock == 0\\n        ) {\\n            return proposal.vote.executionState;\\n        }\\n\\n        uint256 castVotes = proposal.vote.forVotes + proposal.vote.againstVotes;\\n\\n        if (block.number >= proposal.vote.endBlock) {\\n            // Proposal fails if quorum threshold is not reached\\n            if (\\n                !shareReached(\\n                    castVotes,\\n                    proposal.vote.availableVotes,\\n                    proposal.core.quorumThreshold\\n                )\\n            ) {\\n                return ProposalState.Failed;\\n            }\\n            // Proposal fails if decision threshold is not reched\\n            if (\\n                !shareReached(\\n                    proposal.vote.forVotes,\\n                    castVotes,\\n                    proposal.core.decisionThreshold\\n                )\\n            ) {\\n                return ProposalState.Failed;\\n            }\\n            // Otherwise succeeds, check for delay\\n            if (\\n                block.number >=\\n                proposal.vote.endBlock + proposal.core.executionDelay\\n            ) {\\n                return ProposalState.AwaitingExecution;\\n            } else {\\n                return ProposalState.Delayed;\\n            }\\n        } else {\\n            return ProposalState.Active;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return voting result for a given account and proposal\\n     * @param account Account address\\n     * @param proposalId Proposal ID\\n     * @return ballot Vote type\\n     * @return votes Number of votes cast\\n     */\\n    function getBallot(address account, uint256 proposalId)\\n        public\\n        view\\n        returns (Ballot ballot, uint256 votes)\\n    {\\n        return (\\n            ballots[account][proposalId],\\n            _getPastVotes(account, proposals[proposalId].vote.startBlock)\\n        );\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @dev Create proposal\\n     * @param core Proposal core data\\n     * @param meta Proposal meta data\\n     * @param votingDuration Voting duration in blocks\\n     */\\n    function _propose(\\n        ProposalCoreData memory core,\\n        ProposalMetaData memory meta,\\n        uint256 votingDuration\\n    ) internal returns (uint256 proposalId) {\\n        // Increment ID counter\\n        proposalId = ++lastProposalId;\\n\\n        // Create new proposal\\n        proposals[proposalId] = Proposal({\\n            core: core,\\n            vote: ProposalVotingData({\\n                startBlock: block.number + 1,\\n                endBlock: block.number + 1 + votingDuration,\\n                availableVotes: _getCurrentTotalVotes(),\\n                forVotes: 0,\\n                againstVotes: 0,\\n                executionState: ProposalState.None\\n            }),\\n            meta: meta\\n        });\\n\\n        // Call creation hook\\n        _afterProposalCreated(proposalId);\\n\\n        // Emit event\\n        emit ProposalCreated(proposalId, core, meta);\\n    }\\n\\n    /**\\n     * @dev Cast vote for a proposal\\n     * @param proposalId Proposal ID\\n     * @param support Against or for\\n     */\\n    function _castVote(uint256 proposalId, bool support) internal {\\n        // Check that voting exists, is started and not finished\\n        require(\\n            proposals[proposalId].vote.startBlock != 0,\\n            ExceptionsLibrary.NOT_LAUNCHED\\n        );\\n        require(\\n            proposals[proposalId].vote.startBlock <= block.number,\\n            ExceptionsLibrary.NOT_LAUNCHED\\n        );\\n        require(\\n            proposals[proposalId].vote.endBlock > block.number,\\n            ExceptionsLibrary.VOTING_FINISHED\\n        );\\n\\n        // Get number of votes\\n        uint256 votes = _getPastVotes(\\n            msg.sender,\\n            proposals[proposalId].vote.startBlock - 1\\n        );\\n\\n        // Account votes\\n        if (support) {\\n            proposals[proposalId].vote.forVotes += votes;\\n            ballots[msg.sender][proposalId] = Ballot.For;\\n        } else {\\n            proposals[proposalId].vote.againstVotes += votes;\\n            ballots[msg.sender][proposalId] = Ballot.Against;\\n        }\\n\\n        // Check for voting early end\\n        _checkProposalVotingEarlyEnd(proposalId);\\n\\n        // Emit event\\n        emit VoteCast(\\n            msg.sender,\\n            proposalId,\\n            votes,\\n            support ? Ballot.For : Ballot.Against\\n        );\\n    }\\n\\n    /**\\n     * @dev Execute proposal\\n     * @param proposalId Proposal ID\\n     * @param service Service address\\n     */\\n    function _executeProposal(uint256 proposalId, IService service) internal {\\n        // Check state\\n        require(\\n            proposalState(proposalId) == ProposalState.AwaitingExecution,\\n            ExceptionsLibrary.WRONG_STATE\\n        );\\n\\n        // Mark as executed\\n        proposals[proposalId].vote.executionState = ProposalState.Executed;\\n\\n        // Execute actions\\n        Proposal memory proposal = proposals[proposalId];\\n        for (uint256 i = 0; i < proposal.core.targets.length; i++) {\\n            if (proposal.core.callDatas[i].length == 0) {\\n                payable(proposal.core.targets[i]).sendValue(\\n                    proposal.core.values[i]\\n                );\\n            } else {\\n                proposal.core.targets[i].functionCallWithValue(\\n                    proposal.core.callDatas[i],\\n                    proposal.core.values[i]\\n                );\\n            }\\n        }\\n\\n        // Add event to service\\n        service.addEvent(\\n            proposal.meta.proposalType,\\n            proposalId,\\n            proposal.meta.metaHash\\n        );\\n\\n        // Emit contract event\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    /**\\n     * @dev Cancel proposal\\n     * @param proposalId Proposal ID\\n     */\\n    function _cancelProposal(uint256 proposalId) internal {\\n        // Check proposal state\\n        ProposalState state = proposalState(proposalId);\\n        require(\\n            state == ProposalState.Active ||\\n                state == ProposalState.Delayed ||\\n                state == ProposalState.AwaitingExecution,\\n            ExceptionsLibrary.WRONG_STATE\\n        );\\n\\n        // Mark proposal as cancelled\\n        proposals[proposalId].vote.executionState = ProposalState.Cancelled;\\n\\n        // Emit event\\n        emit ProposalCancelled(proposalId);\\n    }\\n\\n    /**\\n     * @dev Check if proposal voting can be finished already (if result is guaranteed)\\n     * @param proposalId Proposal ID\\n     */\\n    function _checkProposalVotingEarlyEnd(uint256 proposalId) internal {\\n        // Get values\\n        Proposal memory proposal = proposals[proposalId];\\n        uint256 castVotes = proposal.vote.forVotes + proposal.vote.againstVotes;\\n        uint256 extraVotes = proposal.vote.availableVotes - castVotes;\\n\\n        // Check if quorum is reached\\n        if (\\n            !shareReached(\\n                castVotes,\\n                proposal.vote.availableVotes,\\n                proposal.core.quorumThreshold\\n            )\\n        ) {\\n            return;\\n        }\\n\\n        // Check for early guaranteed result\\n        if (\\n            !shareReached(\\n                proposal.vote.forVotes + extraVotes,\\n                proposal.vote.availableVotes,\\n                proposal.core.decisionThreshold\\n            ) ||\\n            shareReached(\\n                proposal.vote.forVotes,\\n                proposal.vote.availableVotes,\\n                proposal.core.decisionThreshold\\n            )\\n        ) {\\n            // Mark voting as finished\\n            proposals[proposalId].vote.endBlock = block.number;\\n        }\\n    }\\n\\n    // INTERNAL PURE FUNCTIONS\\n\\n    /**\\n     * @dev Checks if `amount` divided by `total` exceeds `share`\\n     * @param amount Amount numerator\\n     * @param total Amount denominator\\n     * @param share Share numerator\\n     */\\n    function shareReached(\\n        uint256 amount,\\n        uint256 total,\\n        uint256 share\\n    ) internal pure returns (bool) {\\n        return amount * DENOM >= share * total;\\n    }\\n\\n    // ABSTRACT FUNCTIONS\\n\\n    /**\\n     * @dev Hook called after proposal creation\\n     * @param proposalId Proposal ID\\n     */\\n    function _afterProposalCreated(uint256 proposalId) internal virtual;\\n\\n    /**\\n     * @dev Function that gets total amount of votes\\n     * @return Total amount of votes\\n     */\\n    function _getCurrentTotalVotes() internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Function that gets amount of votes for given account at given block\\n     * @param account Account's address\\n     * @param blockNumber Block number\\n     * @return Account's votes at given block\\n     */\\n    function _getPastVotes(address account, uint256 blockNumber)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x8919a1211e32cb3658bb3b15f9daa198856796c2d7b766d8275c1a0d2e07331e\",\"license\":\"MIT\"},\"contracts/governor/GovernorProposals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"./Governor.sol\\\";\\nimport \\\"./GovernanceSettings.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/governor/IGovernorProposals.sol\\\";\\nimport \\\"../interfaces/IService.sol\\\";\\nimport \\\"../interfaces/registry/IRecordsRegistry.sol\\\";\\nimport \\\"../interfaces/ITGE.sol\\\";\\nimport \\\"../interfaces/IToken.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\n\\nabstract contract GovernorProposals is\\n    Initializable,\\n    Governor,\\n    GovernanceSettings,\\n    IGovernorProposals\\n{\\n    // STORAGE\\n\\n    /// @dev Service address\\n    IService public service;\\n\\n    /// @notice Storage gap (for future upgrades)\\n    uint256[50] private __gap;\\n\\n    // MODIFIERS\\n\\n    modifier onlyValidProposer() {\\n        require(\\n            shareReached(\\n                _getCurrentVotes(msg.sender),\\n                _getCurrentTotalVotes(),\\n                proposalThreshold\\n            ),\\n            ExceptionsLibrary.THRESHOLD_NOT_REACHED\\n        );\\n        _;\\n    }\\n\\n    // INITIALIZER\\n\\n    function __GovernorProposals_init(IService service_)\\n        internal\\n        onlyInitializing\\n    {\\n        service = service_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev Propose transfer of assets\\n     * @param asset Asset to transfer (address(0) for ETH transfers)\\n     * @param recipients Transfer recipients\\n     * @param amounts Transfer amounts\\n     * @param description Proposal description\\n     * @param metaHash Hash value of proposal metadata\\n     * @return proposalId Created proposal's ID\\n     */\\n    function proposeTransfer(\\n        address asset,\\n        address[] memory recipients,\\n        uint256[] memory amounts,\\n        string memory description,\\n        string memory metaHash\\n    ) external onlyValidProposer returns (uint256 proposalId) {\\n        // Check lengths\\n        require(\\n            recipients.length == amounts.length,\\n            ExceptionsLibrary.INVALID_VALUE\\n        );\\n\\n        // Prepare proposal actions\\n        address[] memory targets = new address[](recipients.length);\\n        uint256[] memory values = new uint256[](recipients.length);\\n        bytes[] memory callDatas = new bytes[](recipients.length);\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            if (asset == address(0)) {\\n                targets[i] = recipients[i];\\n                callDatas[i] = \\\"\\\";\\n                values[i] = amounts[i];\\n            } else {\\n                targets[i] = asset;\\n                callDatas[i] = abi.encodeWithSelector(\\n                    IERC20Upgradeable.transfer.selector,\\n                    recipients[i],\\n                    amounts[i]\\n                );\\n                values[i] = 0;\\n            }\\n        }\\n\\n        // Create proposal\\n        return\\n            _propose(\\n                ProposalCoreData({\\n                    targets: targets,\\n                    values: values,\\n                    callDatas: callDatas,\\n                    quorumThreshold: quorumThreshold,\\n                    decisionThreshold: decisionThreshold,\\n                    executionDelay: _getDelay(\\n                        IRecordsRegistry.EventType.Transfer\\n                    )\\n                }),\\n                ProposalMetaData({\\n                    proposalType: IRecordsRegistry.EventType.Transfer,\\n                    description: description,\\n                    metaHash: metaHash\\n                }),\\n                votingDuration\\n            );\\n    }\\n\\n    /**\\n     * @dev Propose new TGE\\n     * @param tgeInfo TGE parameters\\n     * @param tokenInfo Token parameters\\n     * @param metadataURI TGE metadata URI\\n     * @param description Proposal description\\n     * @param metaHash Hash value of proposal metadata\\n     * @return proposalId Created proposal's ID\\n     */\\n    function proposeTGE(\\n        ITGE.TGEInfo memory tgeInfo,\\n        IToken.TokenInfo memory tokenInfo,\\n        string memory metadataURI,\\n        string memory description,\\n        string memory metaHash\\n    ) external onlyValidProposer returns (uint256 proposalId) {\\n        // Get cap and supply data\\n        uint256 totalSupply = 0;\\n        IToken token = IPool(address(this)).getToken(tokenInfo.tokenType);\\n        if (tokenInfo.tokenType == IToken.TokenType.Governance) {\\n            tokenInfo.cap = token.cap();\\n            totalSupply = token.totalSupply();\\n        } else if (tokenInfo.tokenType == IToken.TokenType.Preference) {\\n            if (address(token) != address(0)) {\\n                if (token.isPrimaryTGESuccessful()) {\\n                    tokenInfo.cap = token.cap();\\n                    totalSupply = token.totalSupply();\\n                }\\n            }\\n        }\\n\\n        // Validate TGE info\\n        service.validateTGEInfo(tgeInfo, tokenInfo.cap, totalSupply);\\n\\n        // Prepare proposal action\\n        address[] memory targets = new address[](1);\\n        targets[0] = address(service);\\n\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = 0;\\n\\n        bytes[] memory callDatas = new bytes[](1);\\n        callDatas[0] = abi.encodeWithSelector(\\n            IService.createSecondaryTGE.selector,\\n            tgeInfo,\\n            tokenInfo,\\n            metadataURI\\n        );\\n\\n        // Propose\\n        return\\n            _propose(\\n                ProposalCoreData({\\n                    targets: targets,\\n                    values: values,\\n                    callDatas: callDatas,\\n                    quorumThreshold: quorumThreshold,\\n                    decisionThreshold: decisionThreshold,\\n                    executionDelay: _getDelay(IRecordsRegistry.EventType.TGE)\\n                }),\\n                ProposalMetaData({\\n                    proposalType: IRecordsRegistry.EventType.TGE,\\n                    description: description,\\n                    metaHash: metaHash\\n                }),\\n                votingDuration\\n            );\\n    }\\n\\n    /**\\n     * @notice Propose new governance settings\\n     * @param settings New governance settings\\n     * @param description Proposal description\\n     * @param metaHash Hash value of proposal metadata\\n     * @return proposalId Created proposal's ID\\n     */\\n    function proposeGovernanceSettings(\\n        NewGovernanceSettings memory settings,\\n        string memory description,\\n        string memory metaHash\\n    ) external onlyValidProposer returns (uint256 proposalId) {\\n        // Validate settings\\n        _validateGovernanceSettings(settings);\\n\\n        // Prepare proposal action\\n        address[] memory targets = new address[](1);\\n        targets[0] = address(this);\\n\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = 0;\\n\\n        bytes[] memory callDatas = new bytes[](1);\\n        callDatas[0] = abi.encodeWithSelector(\\n            IGovernanceSettings.setGovernanceSettings.selector,\\n            settings\\n        );\\n\\n        // Propose\\n        return\\n            _propose(\\n                ProposalCoreData({\\n                    targets: targets,\\n                    values: values,\\n                    callDatas: callDatas,\\n                    quorumThreshold: quorumThreshold,\\n                    decisionThreshold: decisionThreshold,\\n                    executionDelay: _getDelay(IRecordsRegistry.EventType.TGE)\\n                }),\\n                ProposalMetaData({\\n                    proposalType: IRecordsRegistry.EventType.TGE,\\n                    description: description,\\n                    metaHash: metaHash\\n                }),\\n                votingDuration\\n            );\\n    }\\n\\n    // INTERNAL VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Gets execution delay for given proposal type\\n     * @param proposalType Proposal type\\n     * @return Execution delay\\n     */\\n    function _getDelay(IRecordsRegistry.EventType proposalType)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            MathUpgradeable.max(\\n                executionDelays[IRecordsRegistry.EventType.None],\\n                executionDelays[proposalType]\\n            );\\n    }\\n\\n    // ABSTRACT FUNCTIONS\\n\\n    /**\\n     * @dev Function that gets amount of votes for given account\\n     * @param account Account's address\\n     * @return Amount of votes\\n     */\\n    function _getCurrentVotes(address account)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x25266e1199a6f3f814435b26b11398074ee55dd71af3f72c89f578ccc001a5cd\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\nimport \\\"./governor/IGovernorProposals.sol\\\";\\n\\ninterface IPool is IGovernorProposals {\\n    function initialize(\\n        address owner_,\\n        string memory trademark_,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\n        IRegistry.CompanyInfo memory companyInfo_\\n    ) external;\\n\\n    function setToken(address token_, IToken.TokenType tokenType_) external;\\n\\n    function cancelProposal(uint256 proposalId) external;\\n\\n    function owner() external view returns (address);\\n\\n    function isDAO() external view returns (bool);\\n\\n    function trademark() external view returns (string memory);\\n\\n    function paused() external view returns (bool);\\n\\n    function getToken(IToken.TokenType tokenType_)\\n        external\\n        view\\n        returns (IToken);\\n}\\n\",\"keccak256\":\"0xd7277d02fa55717aeaa915a1ae33b0d89edf80d291d471e57ae676cc5b25a6db\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./IToken.sol\\\";\\n\\ninterface IService is IAccessControlEnumerableUpgradeable {\\n    function ADMIN_ROLE() external view returns (bytes32);\\n\\n    function WHITELISTED_USER_ROLE() external view returns (bytes32);\\n\\n    function SERVICE_MANAGER_ROLE() external view returns (bytes32);\\n\\n    function EXECUTOR_ROLE() external view returns (bytes32);\\n\\n    function createSecondaryTGE(\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function addEvent(\\n        IRegistry.EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external;\\n\\n    function registry() external view returns (IRegistry);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTokenFee() external view returns (uint256);\\n\\n    function getMinSoftCap() external view returns (uint256);\\n\\n    function getProtocolTokenFee(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function poolBeacon() external view returns (address);\\n\\n    function tgeBeacon() external view returns (address);\\n\\n    function validateTGEInfo(\\n        ITGE.TGEInfo calldata info,\\n        uint256 cap,\\n        uint256 totalSupply\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x7b2bb8901fbe0fbdeab01abc1c0d267de98ce430903490752bfc39049fcd48ac\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 vestingPercent;\\n        uint256 vestingDuration;\\n        uint256 vestingTVL;\\n        uint256 duration;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n    }\\n\\n    function initialize(IToken token_, TGEInfo calldata info) external;\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n\\n    function transferUnlocked() external view returns (bool);\\n\\n    function totalVested() external view returns (uint256);\\n\\n    function purchaseOf(address user) external view returns (uint256);\\n\\n    function vestedBalanceOf(address user) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xca0ba3f8a3299cbaaf4022330f4f336b03f89f6d9d6818d04eac0aaef28950b1\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IToken is IVotesUpgradeable, IERC20Upgradeable {\\n    struct TokenInfo {\\n        TokenType tokenType;\\n        string name;\\n        string symbol;\\n        string description;\\n        uint256 cap;\\n        uint8 decimals;\\n    }\\n\\n    enum TokenType {\\n        None,\\n        Governance,\\n        Preference\\n    }\\n\\n    function initialize(\\n        address pool_,\\n        TokenInfo memory info,\\n        address primaryTGE_\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenType() external view returns (TokenType);\\n\\n    function lastTGE() external view returns (address);\\n\\n    function getTGEList() external view returns (address[] memory);\\n\\n    function isPrimaryTGESuccessful() external view returns (bool);\\n\\n    function addTGE(address tge) external;\\n\\n    function getTotalTGEVestedTokens() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f6a8deddfa30694186ba7593c101c3860a120f1331b8dd4840efbc44a91a54f\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernanceSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGovernanceSettings {\\n    /**\\n     * @notice Governance settings\\n     * @param proposalThreshold_ Proposal threshold\\n     * @param quorumThreshold_ Quorum threshold\\n     * @param decisionThreshold_ Decision threshold\\n     * @param votingDuration_ Voting duration\\n     * @param transferValueForDelay_ Transfer value for delay\\n     * @param executionDelays_ List of execution delays for all proposal types\\n     */\\n    struct NewGovernanceSettings {\\n        uint256 proposalThreshold;\\n        uint256 quorumThreshold;\\n        uint256 decisionThreshold;\\n        uint256 votingDuration;\\n        uint256 transferValueForDelay;\\n        uint256[4] executionDelays;\\n    }\\n\\n    function setGovernanceSettings(NewGovernanceSettings memory settings)\\n        external;\\n}\\n\",\"keccak256\":\"0x89baaa8387d7ce9464b21af27cf8ad144e7fcf95097be75df9e16e64b936102d\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernorProposals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../IService.sol\\\";\\n\\ninterface IGovernorProposals {\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0xccb34e00bebdc99b089351a10727d57141e22268ef25b289e7d3aba34177f9c7\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ICompaniesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../ITGE.sol\\\";\\nimport \\\"../IToken.sol\\\";\\n\\ninterface ICompaniesRegistry {\\n    struct CompanyInfo {\\n        uint256 jurisdiction;\\n        uint256 entityType;\\n        string ein;\\n        string dateOfIncorporation;\\n        uint256 fee;\\n    }\\n\\n    function lockCompany(uint256 jurisdiction, uint256 entityType)\\n        external\\n        returns (CompanyInfo memory);\\n}\\n\",\"keccak256\":\"0xa2a610c882337a279f3575cd663c9aefbeb8c17ca37c97ffa2e7e6b778a8c084\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRecordsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IRecordsRegistry {\\n    // Directory\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        PreferenceToken,\\n        TGE\\n    }\\n\\n    enum EventType {\\n        None,\\n        Transfer,\\n        TGE,\\n        GovernanceSettings\\n    }\\n\\n    /**\\n     * @dev Contract information structure\\n     * @param addr Contract address\\n     * @param contractType Contract type\\n     * @param description Contract description\\n     */\\n    struct ContractInfo {\\n        address addr;\\n        ContractType contractType;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Proposal information structure\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param description Proposal description\\n     */\\n    struct ProposalInfo {\\n        address pool;\\n        uint256 proposalId;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Event information structure\\n     * @param eventType Event type\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param metaHash Hash value of event metadata\\n     */\\n    struct Event {\\n        EventType eventType;\\n        address pool;\\n        uint256 proposalId;\\n        string metaHash;\\n    }\\n\\n    function addContractRecord(\\n        address addr,\\n        ContractType contractType,\\n        string memory description\\n    ) external returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function addEventRecord(\\n        address pool,\\n        EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0xf6c8e1758c25ea6dea98ac5e5874820a2f538bac7a76641eba7e553b9b562cf9\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ICompaniesRegistry.sol\\\";\\nimport \\\"./ITokensRegistry.sol\\\";\\nimport \\\"./IRecordsRegistry.sol\\\";\\n\\ninterface IRegistry is ITokensRegistry, ICompaniesRegistry, IRecordsRegistry {}\\n\",\"keccak256\":\"0xe16ba0ac61345d022330464cb8dc4608a4b054d2f2f7fe8de166ad0be5ec8d73\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ITokensRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITokensRegistry {\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcbbf6de279d7d4b0b55061c2ee0980e1b4e5a769ba6f01d39ec681111f51b110\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary ExceptionsLibrary {\\n    string public constant ADDRESS_ZERO = \\\"ADDRESS_ZERO\\\";\\n    string public constant INCORRECT_ETH_PASSED = \\\"INCORRECT_ETH_PASSED\\\";\\n    string public constant NO_COMPANY = \\\"NO_COMPANY\\\";\\n    string public constant INVALID_TOKEN = \\\"INVALID_TOKEN\\\";\\n    string public constant NOT_POOL = \\\"NOT_POOL\\\";\\n    string public constant NOT_TGE = \\\"NOT_TGE\\\";\\n    string public constant NOT_Registry = \\\"NOT_Registry\\\";\\n    string public constant NOT_POOL_OWNER = \\\"NOT_POOL_OWNER\\\";\\n    string public constant NOT_SERVICE_OWNER = \\\"NOT_SERVICE_OWNER\\\";\\n    string public constant IS_DAO = \\\"IS_DAO\\\";\\n    string public constant NOT_DAO = \\\"NOT_DAO\\\";\\n    string public constant NOT_WHITELISTED = \\\"NOT_WHITELISTED\\\";\\n    string public constant ALREADY_WHITELISTED = \\\"ALREADY_WHITELISTED\\\";\\n    string public constant ALREADY_NOT_WHITELISTED = \\\"ALREADY_NOT_WHITELISTED\\\";\\n    string public constant NOT_SERVICE = \\\"NOT_SERVICE\\\";\\n    string public constant WRONG_STATE = \\\"WRONG_STATE\\\";\\n    string public constant TRANSFER_FAILED = \\\"TRANSFER_FAILED\\\";\\n    string public constant CLAIM_NOT_AVAILABLE = \\\"CLAIM_NOT_AVAILABLE\\\";\\n    string public constant NO_LOCKED_BALANCE = \\\"NO_LOCKED_BALANCE\\\";\\n    string public constant LOCKUP_TVL_REACHED = \\\"LOCKUP_TVL_REACHED\\\";\\n    string public constant HARDCAP_OVERFLOW = \\\"HARDCAP_OVERFLOW\\\";\\n    string public constant MAX_PURCHASE_OVERFLOW = \\\"MAX_PURCHASE_OVERFLOW\\\";\\n    string public constant HARDCAP_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant MIN_PURCHASE_UNDERFLOW = \\\"MIN_PURCHASE_UNDERFLOW\\\";\\n    string public constant LOW_UNLOCKED_BALANCE = \\\"LOW_UNLOCKED_BALANCE\\\";\\n    string public constant ZERO_PURCHASE_AMOUNT = \\\"ZERO_PURCHASE_AMOUNTs\\\";\\n    string public constant NOTHING_TO_REDEEM = \\\"NOTHING_TO_REDEEM\\\";\\n    string public constant RECORD_IN_USE = \\\"RECORD_IN_USE\\\";\\n    string public constant INVALID_EIN = \\\"INVALID_EIN\\\";\\n    string public constant VALUE_ZERO = \\\"VALUE_ZERO\\\";\\n    string public constant ALREADY_SET = \\\"ALREADY_SET\\\";\\n    string public constant VOTING_FINISHED = \\\"VOTING_FINISHED\\\";\\n    string public constant ALREADY_EXECUTED = \\\"ALREADY_EXECUTED\\\";\\n    string public constant ACTIVE_TGE_EXISTS = \\\"ACTIVE_TGE_EXISTS\\\";\\n    string public constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\n    string public constant INVALID_CAP = \\\"INVALID_CAP\\\";\\n    string public constant INVALID_HARDCAP = \\\"INVALID_HARDCAP\\\";\\n    string public constant ONLY_POOL = \\\"ONLY_POOL\\\";\\n    string public constant ETH_TRANSFER_FAIL = \\\"ETH_TRANSFER_FAIL\\\";\\n    string public constant TOKEN_TRANSFER_FAIL = \\\"TOKEN_TRANSFER_FAIL\\\";\\n    string public constant BLOCK_DELAY = \\\"BLOCK_DELAY\\\";\\n    string public constant SERVICE_PAUSED = \\\"SERVICE_PAUSED\\\";\\n    string public constant INVALID_PROPOSAL_TYPE = \\\"INVALID_PROPOSAL_TYPE\\\";\\n    string public constant EXECUTION_FAILED = \\\"EXECUTION_FAILED\\\";\\n    string public constant INVALID_USER = \\\"INVALID_USER\\\";\\n    string public constant NOT_LAUNCHED = \\\"NOT_LAUNCHED\\\";\\n    string public constant LAUNCHED = \\\"LAUNCHED\\\";\\n    string public constant VESTING_TVL_REACHED = \\\"VESTING_TVL_REACHED\\\";\\n    string public constant PREFERENCE_TOKEN_EXISTS = \\\"PREFERENCE_TOKEN_EXISTS\\\";\\n    string public constant INVALID_SOFTCAP = \\\"INVALID_SOFTCAP\\\";\\n    string public constant THRESHOLD_NOT_REACHED = \\\"THRESHOLD_NOT_REACHED\\\";\\n    string public constant UNSUPPORTED_TOKEN_TYPE = \\\"UNSUPPORTED_TOKEN_TYPE\\\";\\n}\\n\",\"keccak256\":\"0x63a7cdc260e00e02c91da988f20c2965f7437733f4fb35a1898daaa93dafb462\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61535280620000f46000396000f3fe6080604052600436106101f25760003560e01c806382b866001161010d578063c4767b95116100a0578063d598d4c91161006f578063d598d4c9146105f2578063e0a8f6f514610613578063e47bfee814610633578063e83c2d8b14610648578063f2fde38b1461066857600080fd5b8063c4767b951461056f578063c59512911461058f578063d26331d4146105a5578063d3b1b64a146105d257600080fd5b8063964765b0116100dc578063964765b0146104f6578063aecb96c91461050c578063b58131b01461052c578063c249e8621461054257600080fd5b806382b866001461045d5780638456cb59146104955780638856c0d6146104aa5780638da5cb5b146104e157600080fd5b80633f4ba83a116101855780636256dc45116101545780636256dc45146103fc578063715018a61461041c57806374cb3041146104315780637b7a91dd1461044757600080fd5b80633f4ba83a1461034c578063450a747a1461036157806354b598ec1461038f5780635c975abb146103d757600080fd5b806316561076116101c157806316561076146102cf57806319e09c2a146102f157806330e712fe1461030657806336f281a91461032657600080fd5b8063013cf08b146102315780630d61b51914610269578063132002fc1461028b57806315373e3d146102af57600080fd5b3661022c576040513481527fa8142743f8f70a4c26f3691cf4ed59718381fb2f18070ec52be1f1022d8555579060200160405180910390a1005b600080fd5b34801561023d57600080fd5b5061025161024c366004614202565b610688565b60405161026093929190614426565b60405180910390f35b34801561027557600080fd5b50610289610284366004614202565b610a31565b005b34801561029757600080fd5b506102a160cf5481565b604051908152602001610260565b3480156102bb57600080fd5b506102896102ca3660046144a8565b610bae565b3480156102db57600080fd5b506102e4610bd2565b60405161026091906144d8565b3480156102fd57600080fd5b506102a1601481565b34801561031257600080fd5b506102a161032136600461489a565b610c61565b34801561033257600080fd5b5061033b6111b0565b60405161026095949392919061496b565b34801561035857600080fd5b506102896112e2565b34801561036d57600080fd5b5061038161037c3660046149af565b611412565b6040516102609291906149eb565b34801561039b57600080fd5b506103ca6103aa3660046149af565b60ca60209081526000928352604080842090915290825290205460ff1681565b6040516102609190614a02565b3480156103e357600080fd5b506103ec61145d565b6040519015158152602001610260565b34801561040857600080fd5b506102a1610417366004614ab4565b611470565b34801561042857600080fd5b5061028961166d565b34801561043d57600080fd5b506102a160cb5481565b34801561045357600080fd5b506102a160cd5481565b34801561046957600080fd5b5061047d610478366004614b2b565b61167f565b6040516001600160a01b039091168152602001610260565b3480156104a157600080fd5b506102896116c9565b3480156104b657600080fd5b5061047d6104c5366004614b2b565b61013d602052600090815260409020546001600160a01b031681565b3480156104ed57600080fd5b5061047d6117f7565b34801561050257600080fd5b506102a160ce5481565b34801561051857600080fd5b50610289610527366004614b46565b61180b565b34801561053857600080fd5b506102a160cc5481565b34801561054e57600080fd5b506102a161055d366004614c41565b60d16020526000908152604090205481565b34801561057b57600080fd5b5061028961058a366004614c62565b6119a3565b34801561059b57600080fd5b506102a160d05481565b3480156105b157600080fd5b506105c56105c0366004614202565b611a9d565b6040516102609190614c97565b3480156105de57600080fd5b506102896105ed366004614ca5565b611f73565b3480156105fe57600080fd5b506101045461047d906001600160a01b031681565b34801561061f57600080fd5b5061028961062e366004614202565b611fc3565b34801561063f57600080fd5b506103ec61201c565b34801561065457600080fd5b506102a1610663366004614cc2565b6120a0565b34801561067457600080fd5b50610289610683366004614dcb565b612461565b60c9602090815260009182526040918290208251815460e09381028201840190945260c08101848152919390928492849290918491908401828280156106f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106d9575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561074f57602002820191906000526020600020905b81548152602001906001019080831161073b575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561082957838290600052602060002001805461079c90614de8565b80601f01602080910402602001604051908101604052809291908181526020018280546107c890614de8565b80156108155780601f106107ea57610100808354040283529160200191610815565b820191906000526020600020905b8154815290600101906020018083116107f857829003601f168201915b50505050508152602001906001019061077d565b505050508152602001600382015481526020016004820154815260200160058201548152505090806006016040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660068111156108b5576108b56143a4565b60068111156108c6576108c66143a4565b9052506040805160608101909152600c83018054929392829060ff1660038111156108f3576108f36143a4565b6003811115610904576109046143a4565b815260200160018201805461091890614de8565b80601f016020809104026020016040519081016040528092919081815260200182805461094490614de8565b80156109915780601f1061096657610100808354040283529160200191610991565b820191906000526020600020905b81548152906001019060200180831161097457829003601f168201915b505050505081526020016002820180546109aa90614de8565b80601f01602080910402602001604051908101604052809291908181526020018280546109d690614de8565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b505050505081525050905083565b610a396124d7565b806001600082815260c960205260409020600c015460ff166003811115610a6257610a626143a4565b03610b925761010454604080516307bd026560e01b815290516001600160a01b03909216916391d148549183916307bd0265916004808201926020929091908290030181865afa158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade9190614e22565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b449190614e3b565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b81525090610b905760405162461bcd60e51b8152600401610b8791906144d8565b60405180910390fd5b505b61010454610baa9083906001600160a01b031661251f565b5050565b610bb6612b1f565b610bbe6124d7565b610bc88282612b78565b610baa6001606555565b6101378054610be090614de8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0c90614de8565b8015610c595780601f10610c2e57610100808354040283529160200191610c59565b820191906000526020600020905b815481529060010190602001808311610c3c57829003601f168201915b505050505081565b6000610c7f610c6f33612db3565b610c77612e47565b60cc54612f41565b604051806040016040528060158152602001741512149154d213d31117d393d517d4915050d21151605a1b81525090610ccb5760405162461bcd60e51b8152600401610b8791906144d8565b50845160405162415c3360e91b8152600091829130916382b8660091610cf49190600401614a02565b602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190614e58565b9050600187516002811115610d4c57610d4c6143a4565b03610e2557806001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db39190614e22565b876080018181525050806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1e9190614e22565b9150610f85565b600287516002811115610e3a57610e3a6143a4565b03610f85576001600160a01b03811615610f8557806001600160a01b031663d04d79b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190614e3b565b15610f8557806001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f179190614e22565b876080018181525050806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f829190614e22565b91505b61010454608088015160405163d7f964fd60e01b81526001600160a01b039092169163d7f964fd91610fbe918c91908790600401614f27565b60006040518083038186803b158015610fd657600080fd5b505afa158015610fea573d6000803e3d6000fd5b506000925060019150610ffa9050565b604051908082528060200260200182016040528015611023578160200160208202803683370190505b506101045481519192506001600160a01b031690829060009061104857611048614f4c565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061109a5761109a614f4c565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816110bc575050604051909150632359db1360e11b906110f1908d908d908d90602401614f62565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508160008151811061113757611137614f4c565b60200260200101819052506111a16040518060c0016040528085815260200184815260200183815260200160cd54815260200160ce54815260200161117c6002612f64565b90526040805160608101825260028152602081018c90529081018a905260cf54612fcd565b9b9a5050505050505050505050565b61013880546101395461013a8054929391926111cb90614de8565b80601f01602080910402602001604051908101604052809291908181526020018280546111f790614de8565b80156112445780601f1061121957610100808354040283529160200191611244565b820191906000526020600020905b81548152906001019060200180831161122757829003601f168201915b50505050509080600301805461125990614de8565b80601f016020809104026020016040519081016040528092919081815260200182805461128590614de8565b80156112d25780601f106112a7576101008083540402835291602001916112d2565b820191906000526020600020905b8154815290600101906020018083116112b557829003601f168201915b5050505050908060040154905085565b6101045460408051631d6c8e3f60e21b815290516001600160a01b03909216916391d148549183916375b238fc916004808201926020929091908290030181865afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190614e22565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190614e3b565b604051806040016040528060118152602001702727aa2fa9a2a92b24a1a2afa7aba722a960791b815250906114075760405162461bcd60e51b8152600401610b8791906144d8565b506114106131fb565b565b6001600160a01b038216600090815260ca6020908152604080832084845282528083205460c9909252822060060154829160ff169061145290869061324d565b915091509250929050565b600061146b60975460ff1690565b905090565b600061147e610c6f33612db3565b604051806040016040528060158152602001741512149154d213d31117d393d517d4915050d21151605a1b815250906114ca5760405162461bcd60e51b8152600401610b8791906144d8565b506114d4846132e9565b60408051600180825281830190925260009160208083019080368337019050509050308160008151811061150a5761150a614f4c565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061155c5761155c614f4c565b6020908102919091010152604080516001808252818301909252600091816020015b606081526020019060019003908161157e5750506040519091506369d8db2560e11b906115af908990602401615004565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050816000815181106115f5576115f5614f4c565b60200260200101819052506116626040518060c0016040528085815260200184815260200183815260200160cd54815260200160ce54815260200161163a6002612f64565b905260408051606081019091528060025b81526020018981526020018881525060cf54612fcd565b979650505050505050565b61167561347b565b61141060006134da565b600061013d6000836002811115611698576116986143a4565b60028111156116a9576116a96143a4565b81526020810191909152604001600020546001600160a01b031692915050565b6101045460408051631d6c8e3f60e21b815290516001600160a01b03909216916391d148549183916375b238fc916004808201926020929091908290030181865afa15801561171c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117409190614e22565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015611782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a69190614e3b565b604051806040016040528060118152602001702727aa2fa9a2a92b24a1a2afa7aba722a960791b815250906117ee5760405162461bcd60e51b8152600401610b8791906144d8565b5061141061352c565b600061146b6033546001600160a01b031690565b600054610100900460ff161580801561182b5750600054600160ff909116105b806118455750303b158015611845575060005460ff166001145b6118a85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b87565b6000805460ff1916600117905580156118cb576000805461ff0019166101001790555b6118d3613569565b6118db613598565b6118e36135c7565b6118ec336135f6565b6118f5856134da565b61013761190285826150ba565b5061190c83613640565b8151610138908155602083015161013955604083015183919061013a9061193390826150ba565b506060820151600382019061194890826150ba565b5060808201518160040155905050801561199c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6101045460408051808201909152600b81526a4e4f545f5345525649434560a81b6020820152906001600160a01b031633146119f25760405162461bcd60e51b8152600401610b8791906144d8565b5060408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038316611a3d5760405162461bcd60e51b8152600401610b8791906144d8565b508161013d6000836002811115611a5657611a566143a4565b6002811115611a6757611a676143a4565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050565b600081815260c96020908152604080832081518154610140948102820185019093526101208101838152859491938492606084019285928492849190870182828015611b1257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611af4575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611b6a57602002820191906000526020600020905b815481526020019060010190808311611b56575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015611c44578382906000526020600020018054611bb790614de8565b80601f0160208091040260200160405190810160405280929190818152602001828054611be390614de8565b8015611c305780601f10611c0557610100808354040283529160200191611c30565b820191906000526020600020905b815481529060010190602001808311611c1357829003601f168201915b505050505081526020019060010190611b98565b50505050815260200160038201548152602001600482015481526020016005820154815250508152602001600682016040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166006811115611cd457611cd46143a4565b6006811115611ce557611ce56143a4565b90525081526040805160608101909152600c83018054602090930192829060ff166003811115611d1757611d176143a4565b6003811115611d2857611d286143a4565b8152602001600182018054611d3c90614de8565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6890614de8565b8015611db55780601f10611d8a57610100808354040283529160200191611db5565b820191906000526020600020905b815481529060010190602001808311611d9857829003601f168201915b50505050508152602001600282018054611dce90614de8565b80601f0160208091040260200160405190810160405280929190818152602001828054611dfa90614de8565b8015611e475780601f10611e1c57610100808354040283529160200191611e47565b820191906000526020600020905b815481529060010190602001808311611e2a57829003601f168201915b5050509190925250505090525090506005816020015160a001516006811115611e7257611e726143a4565b1480611e9757506006816020015160a001516006811115611e9557611e956143a4565b145b80611ea55750602081015151155b15611eb8576020015160a0015192915050565b60208101516080810151606090910151600091611ed49161518f565b90508160200151602001514310611f6957611f0081836020015160400151846000015160600151612f41565b611f0e575060029392505050565b611f2982602001516060015182846000015160800151612f41565b611f37575060029392505050565b815160a001516020808401510151611f4f919061518f565b4310611f5f575060049392505050565b5060039392505050565b5060019392505050565b60408051808201909152600c81526b24a72b20a624a22faaa9a2a960a11b6020820152333014611fb65760405162461bcd60e51b8152600401610b8791906144d8565b50611fc081613640565b50565b6101045460408051808201909152600b81526a4e4f545f5345525649434560a81b6020820152906001600160a01b031633146120125760405162461bcd60e51b8152600401610b8791906144d8565b50611fc08161372c565b6001600090815261013d60209081526000805160206152d4833981519152546040805163d04d79b560e01b815290516001600160a01b039092169263d04d79b5926004808401938290030181865afa15801561207c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b9190614e3b565b60006120ae610c6f33612db3565b604051806040016040528060158152602001741512149154d213d31117d393d517d4915050d21151605a1b815250906120fa5760405162461bcd60e51b8152600401610b8791906144d8565b5083518551146040518060400160405280600d81526020016c494e56414c49445f56414c554560981b815250906121445760405162461bcd60e51b8152600401610b8791906144d8565b50600085516001600160401b03811115612160576121606144eb565b604051908082528060200260200182016040528015612189578160200160208202803683370190505b509050600086516001600160401b038111156121a7576121a76144eb565b6040519080825280602002602001820160405280156121d0578160200160208202803683370190505b509050600087516001600160401b038111156121ee576121ee6144eb565b60405190808252806020026020018201604052801561222157816020015b606081526020019060019003908161220c5790505b50905060005b8851811015612404576001600160a01b038a166122f45788818151811061225057612250614f4c565b602002602001015184828151811061226a5761226a614f4c565b60200260200101906001600160a01b031690816001600160a01b031681525050604051806020016040528060008152508282815181106122ac576122ac614f4c565b60200260200101819052508781815181106122c9576122c9614f4c565b60200260200101518382815181106122e3576122e3614f4c565b6020026020010181815250506123f2565b8984828151811061230757612307614f4c565b60200260200101906001600160a01b031690816001600160a01b03168152505063a9059cbb60e01b89828151811061234157612341614f4c565b602002602001015189838151811061235b5761235b614f4c565b60209081029190910101516040516001600160a01b0390921660248301526044820152606401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508282815181106123c6576123c6614f4c565b602002602001018190525060008382815181106123e5576123e5614f4c565b6020026020010181815250505b806123fc816151a2565b915050612227565b506124546040518060c0016040528085815260200184815260200183815260200160cd54815260200160ce54815260200161243f6001612f64565b9052604080516060810190915280600161164b565b9998505050505050505050565b61246961347b565b6001600160a01b0381166124ce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b87565b611fc0816134da565b6124df61145d565b156114105760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b87565b600461252a83611a9d565b600681111561253b5761253b6143a4565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b8152509061257e5760405162461bcd60e51b8152600401610b8791906144d8565b50600082815260c960209081526040808320600b8101805460ff191660051790558151815493840281016101409081019093526101208101848152909391928492606084019285928492849187018282801561260357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125e5575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561265b57602002820191906000526020600020905b815481526020019060010190808311612647575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156127355783829060005260206000200180546126a890614de8565b80601f01602080910402602001604051908101604052809291908181526020018280546126d490614de8565b80156127215780601f106126f657610100808354040283529160200191612721565b820191906000526020600020905b81548152906001019060200180831161270457829003601f168201915b505050505081526020019060010190612689565b50505050815260200160038201548152602001600482015481526020016005820154815250508152602001600682016040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660068111156127c5576127c56143a4565b60068111156127d6576127d66143a4565b90525081526040805160608101909152600c83018054602090930192829060ff166003811115612808576128086143a4565b6003811115612819576128196143a4565b815260200160018201805461282d90614de8565b80601f016020809104026020016040519081016040528092919081815260200182805461285990614de8565b80156128a65780601f1061287b576101008083540402835291602001916128a6565b820191906000526020600020905b81548152906001019060200180831161288957829003601f168201915b505050505081526020016002820180546128bf90614de8565b80601f01602080910402602001604051908101604052809291908181526020018280546128eb90614de8565b80156129385780601f1061290d57610100808354040283529160200191612938565b820191906000526020600020905b81548152906001019060200180831161291b57829003601f168201915b50505050508152505081525050905060005b81515151811015612a755781516040015180518290811061296d5761296d614f4c565b6020026020010151516000036129e0576129db826000015160200151828151811061299a5761299a614f4c565b602002602001015183600001516000015183815181106129bc576129bc614f4c565b60200260200101516001600160a01b031661381d90919063ffffffff16565b612a63565b612a6182600001516040015182815181106129fd576129fd614f4c565b60200260200101518360000151602001518381518110612a1f57612a1f614f4c565b60200260200101518460000151600001518481518110612a4157612a41614f4c565b60200260200101516001600160a01b031661393b9092919063ffffffff16565b505b80612a6d816151a2565b91505061294a565b50604080820151805190820151915163b677bc6960e01b81526001600160a01b0385169263b677bc6992612aaf92909188916004016151bb565b600060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b505050507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f83604051612b1291815260200190565b60405180910390a1505050565b600260655403612b715760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b87565b6002606555565b600082815260c96020908152604091829020600601548251808401909352600c83526b1393d517d310555390d2115160a21b91830191909152612bce5760405162461bcd60e51b8152600401610b8791906144d8565b504360c960008481526020019081526020016000206006016000015411156040518060400160405280600c81526020016b1393d517d310555390d2115160a21b81525090612c2f5760405162461bcd60e51b8152600401610b8791906144d8565b504360c9600084815260200190815260200160002060060160010154116040518060400160405280600f81526020016e1593d5125391d7d192539254d21151608a1b81525090612c925760405162461bcd60e51b8152600401610b8791906144d8565b50600082815260c96020526040812060060154612cbc903390612cb7906001906151e1565b61324d565b90508115612d1457600083815260c9602052604081206009018054839290612ce590849061518f565b909155505033600090815260ca602090815260408083208684529091529020805460ff19166002179055612d60565b600083815260c960205260408120600a018054839290612d3590849061518f565b909155505033600090815260ca602090815260408083208684529091529020805460ff191660011790555b612d6983613969565b7f77d94b0c4db39f796091e7fef268f44482302e115be932a80c0ecf6e5455d7aa33848385612d99576001612d9c565b60025b604051612b1294939291906151f4565b6001606555565b6001600090815261013d60209081526000805160206152d483398151915254604080516309ab24eb60e41b81526001600160a01b03868116600483015291519190921692639ab24eb092602480820193918290030181865afa158015612e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e419190614e22565b92915050565b6001600090815261013d60209081526000805160206152d4833981519152546040805163d554934b60e01b815290516001600160a01b0390921692839263d554934b9260048082019392918290030181865afa158015612eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecf9190614e22565b816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f319190614e22565b612f3b91906151e1565b91505090565b6000612f4d838361522a565b612f5a620f42408661522a565b1015949350505050565b600080805260d160208190527efa5413e7b01fc543d01f0911de573ace463b956369df4472f39030e8d98b7754612e419183856003811115612fa857612fa86143a4565b6003811115612fb957612fb96143a4565b815260200190815260200160002054613df5565b600060cb60008154612fde906151a2565b919050819055905060405180606001604052808581526020016040518060c0016040528043600161300f919061518f565b81526020018561302043600161518f565b61302a919061518f565b8152602001613037612e47565b815260200160008152602001600081526020016000600681111561305d5761305d6143a4565b905281526020908101859052600083815260c98252604090208251805180519293919284926130909284929101906140a4565b5060208281015180516130a99260018501920190614109565b50604082015180516130c5916002840191602090910190614144565b50606082015181600301556080820151816004015560a082015181600501555050602082015181600601600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083600681111561314b5761314b6143a4565b0217905550505060408201518051600c83018054909190829060ff1916600183600381111561317c5761317c6143a4565b02179055506020820151600182019061319590826150ba565b50604082015160028201906131aa90826150ba565b5050509050506131b981613e0b565b7f8fd94d78543f5e6b57da702ca98bdb467625b6c4a8d80ea80d5ab4a4ce302b388185856040516131ec93929190615241565b60405180910390a19392505050565b613203613e66565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600090815261013d60209081526000805160206152d48339815191525460408051630748d63560e31b81526001600160a01b0387811660048301526024820187905291519190921692633a46b1a892604480820193918290030181865afa1580156132be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e29190614e22565b9392505050565b805160408051808201909152600d81526c494e56414c49445f56414c554560981b602082015290620f4240116133325760405162461bcd60e51b8152600401610b8791906144d8565b50620f42408160200151106040518060400160405280600d81526020016c494e56414c49445f56414c554560981b815250906133815760405162461bcd60e51b8152600401610b8791906144d8565b50620f42408160400151106040518060400160405280600d81526020016c494e56414c49445f56414c554560981b815250906133d05760405162461bcd60e51b8152600401610b8791906144d8565b5060008160600151116040518060400160405280600d81526020016c494e56414c49445f56414c554560981b8152509061341d5760405162461bcd60e51b8152600401610b8791906144d8565b5060a08101515115801590613437575060a0810151516014115b6040518060400160405280600d81526020016c494e56414c49445f56414c554560981b81525090610baa5760405162461bcd60e51b8152600401610b8791906144d8565b336134846117f7565b6001600160a01b0316146114105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b87565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6135346124d7565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586132303390565b600054610100900460ff166135905760405162461bcd60e51b8152600401610b879061526c565b611410613eb1565b600054610100900460ff166135bf5760405162461bcd60e51b8152600401610b879061526c565b611410613ee1565b600054610100900460ff166135ee5760405162461bcd60e51b8152600401610b879061526c565b611410613f14565b600054610100900460ff1661361d5760405162461bcd60e51b8152600401610b879061526c565b61010480546001600160a01b0319166001600160a01b0392909216919091179055565b613649816132e9565b805160cc5560208082015160cd5560408083015160ce5560608084015160cf55608084015160d05560a0909301805151600080805260d185527efa5413e7b01fc543d01f0911de573ace463b956369df4472f39030e8d98b7791909155815190930151600184527fb41c81a20ee1317ccb9b438d7e5d59d66d5a6ec10e50c28bfec0bae0f14bf52755805190910151600283527f32ea06fcf2721a86a5d9ed09fff93f12af8d61fae22ffe196961f9320ec53d3f55519091015160039091527f507fbfbc4604457cf48784aed8fcaf8ef1e156d984c943cc8583366a2705be5e55565b600061373782611a9d565b9050600181600681111561374d5761374d6143a4565b148061376a57506003816006811115613768576137686143a4565b145b8061378657506004816006811115613784576137846143a4565b145b6040518060400160405280600b81526020016a57524f4e475f535441544560a81b815250906137c85760405162461bcd60e51b8152600401610b8791906144d8565b50600082815260c96020908152604091829020600b01805460ff1916600617905590518381527f416e669c63d9a3a5e36ee7cc7e2104b8db28ccd286aa18966e98fa230c73b08c910160405180910390a15050565b8047101561386d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b87565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146138ba576040519150601f19603f3d011682016040523d82523d6000602084013e6138bf565b606091505b50509050806139365760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610b87565b505050565b60606139618484846040518060600160405280602981526020016152f460299139613f3b565b949350505050565b600081815260c960209081526040808320815181546101409481028201850190935261012081018381529093919284926060840192859284928491908701828280156139de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116139c0575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015613a3657602002820191906000526020600020905b815481526020019060010190808311613a22575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015613b10578382906000526020600020018054613a8390614de8565b80601f0160208091040260200160405190810160405280929190818152602001828054613aaf90614de8565b8015613afc5780601f10613ad157610100808354040283529160200191613afc565b820191906000526020600020905b815481529060010190602001808311613adf57829003601f168201915b505050505081526020019060010190613a64565b50505050815260200160038201548152602001600482015481526020016005820154815250508152602001600682016040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166006811115613ba057613ba06143a4565b6006811115613bb157613bb16143a4565b90525081526040805160608101909152600c83018054602090930192829060ff166003811115613be357613be36143a4565b6003811115613bf457613bf46143a4565b8152602001600182018054613c0890614de8565b80601f0160208091040260200160405190810160405280929190818152602001828054613c3490614de8565b8015613c815780601f10613c5657610100808354040283529160200191613c81565b820191906000526020600020905b815481529060010190602001808311613c6457829003601f168201915b50505050508152602001600282018054613c9a90614de8565b80601f0160208091040260200160405190810160405280929190818152602001828054613cc690614de8565b8015613d135780601f10613ce857610100808354040283529160200191613d13565b820191906000526020600020905b815481529060010190602001808311613cf657829003601f168201915b5050505050815250508152505090506000816020015160800151826020015160600151613d40919061518f565b9050600081836020015160400151613d5891906151e1565b9050613d7582846020015160400151856000015160600151612f41565b613d7f5750505050565b613daa81846020015160600151613d96919061518f565b602085015160400151855160800151612f41565b1580613dd45750613dd4836020015160600151846020015160400151856000015160800151612f41565b15613def57600084815260c960205260409020436007909101555b50505050565b6000818311613e0457816132e2565b5090919050565b61010454604051630ffb246960e21b8152600481018390526001600160a01b0390911690633fec91a490602401600060405180830381600087803b158015613e5257600080fd5b505af115801561199c573d6000803e3d6000fd5b613e6e61145d565b6114105760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b87565b600054610100900460ff16613ed85760405162461bcd60e51b8152600401610b879061526c565b611410336134da565b600054610100900460ff16613f085760405162461bcd60e51b8152600401610b879061526c565b6097805460ff19169055565b600054610100900460ff16612dac5760405162461bcd60e51b8152600401610b879061526c565b606082471015613f9c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b87565b600080866001600160a01b03168587604051613fb891906152b7565b60006040518083038185875af1925050503d8060008114613ff5576040519150601f19603f3d011682016040523d82523d6000602084013e613ffa565b606091505b5091509150611662878383876060831561407557825160000361406e576001600160a01b0385163b61406e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b87565b5081613961565b613961838381511561408a5781518083602001fd5b8060405162461bcd60e51b8152600401610b8791906144d8565b8280548282559060005260206000209081019282156140f9579160200282015b828111156140f957825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906140c4565b50614105929150614196565b5090565b8280548282559060005260206000209081019282156140f9579160200282015b828111156140f9578251825591602001919060010190614129565b82805482825590600052602060002090810192821561418a579160200282015b8281111561418a578251829061417a90826150ba565b5091602001919060010190614164565b506141059291506141ab565b5b808211156141055760008155600101614197565b808211156141055760006141bf82826141c8565b506001016141ab565b5080546141d490614de8565b6000825580601f106141e4575050565b601f016020900490600052602060002090810190611fc09190614196565b60006020828403121561421457600080fd5b5035919050565b600081518084526020808501945080840160005b838110156142545781516001600160a01b03168752958201959082019060010161422f565b509495945050505050565b60005b8381101561427a578181015183820152602001614262565b50506000910152565b6000815180845261429b81602086016020860161425f565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b848110156142fa57601f198684030189526142e8838351614283565b988401989250908301906001016142cc565b5090979650505050505050565b6000815160c0845261431c60c085018261421b565b60208481015186830387830152805180845290820193509091600091908301905b8083101561435d578451825293830193600192909201919083019061433d565b5060408601519350868103604088015261437781856142af565b9350505050606083015160608501526080830151608085015260a083015160a08501528091505092915050565b634e487b7160e01b600052602160045260246000fd5b600781106143ca576143ca6143a4565b9052565b600481106143ca576143ca6143a4565b6143e98282516143ce565b60006020820151606060208501526144046060850182614283565b90506040830151848203604086015261441d8282614283565b95945050505050565b600061010080835261443a81840187614307565b905084516020840152602085015160408401526040850151606084015260608501516080840152608085015160a084015260a085015161447d60c08501826143ba565b5082810360e084015261449081856143de565b9695505050505050565b8015158114611fc057600080fd5b600080604083850312156144bb57600080fd5b8235915060208301356144cd8161449a565b809150509250929050565b6020815260006132e26020830184614283565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b0381118282101715614524576145246144eb565b60405290565b60405160c081016001600160401b0381118282101715614524576145246144eb565b604051608081016001600160401b0381118282101715614524576145246144eb565b60405160a081016001600160401b0381118282101715614524576145246144eb565b604051601f8201601f191681016001600160401b03811182821017156145b8576145b86144eb565b604052919050565b60006001600160401b038211156145d9576145d96144eb565b5060051b60200190565b6001600160a01b0381168114611fc057600080fd5b8035614603816145e3565b919050565b600082601f83011261461957600080fd5b8135602061462e614629836145c0565b614590565b82815260059290921b8401810191818101908684111561464d57600080fd5b8286015b84811015614671578035614664816145e3565b8352918301918301614651565b509695505050505050565b60006101a0828403121561468f57600080fd5b614697614501565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301356001600160401b0381111561470a57600080fd5b61471685828601614608565b82840152505061014061472a8184016145f8565b9082015261016082810135908201526101809182013591810191909152919050565b80356003811061460357600080fd5b600082601f83011261476c57600080fd5b81356001600160401b03811115614785576147856144eb565b614798601f8201601f1916602001614590565b8181528460208386010111156147ad57600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff8116811461460357600080fd5b600060c082840312156147ed57600080fd5b6147f561452a565b90506148008261474c565b815260208201356001600160401b038082111561481c57600080fd5b6148288583860161475b565b6020840152604084013591508082111561484157600080fd5b61484d8583860161475b565b6040840152606084013591508082111561486657600080fd5b506148738482850161475b565b6060830152506080820135608082015261488f60a083016147ca565b60a082015292915050565b600080600080600060a086880312156148b257600080fd5b85356001600160401b03808211156148c957600080fd5b6148d589838a0161467c565b965060208801359150808211156148eb57600080fd5b6148f789838a016147db565b9550604088013591508082111561490d57600080fd5b61491989838a0161475b565b9450606088013591508082111561492f57600080fd5b61493b89838a0161475b565b9350608088013591508082111561495157600080fd5b5061495e8882890161475b565b9150509295509295909350565b85815284602082015260a06040820152600061498a60a0830186614283565b828103606084015261499c8186614283565b9150508260808301529695505050505050565b600080604083850312156149c257600080fd5b82356149cd816145e3565b946020939093013593505050565b60038110611fc057611fc06143a4565b604081016149f8846149db565b9281526020015290565b60208101614a0f836149db565b91905290565b6000610120808385031215614a2957600080fd5b614a3161452a565b915082358252602080840135818401526040840135604084015260608401356060840152608084013560808401528460bf850112614a6e57600080fd5b614a7661454c565b918401918086841115614a8857600080fd5b60a086015b84811015614aa45780358352918301918301614a8d565b5060a08501525091949350505050565b60008060006101608486031215614aca57600080fd5b614ad48585614a15565b92506101208401356001600160401b0380821115614af157600080fd5b614afd8783880161475b565b9350610140860135915080821115614b1457600080fd5b50614b218682870161475b565b9150509250925092565b600060208284031215614b3d57600080fd5b6132e28261474c565b6000806000806101808587031215614b5d57600080fd5b8435614b68816145e3565b935060208501356001600160401b0380821115614b8457600080fd5b614b908883890161475b565b9450614b9f8860408901614a15565b9350610160870135915080821115614bb657600080fd5b9086019060a08289031215614bca57600080fd5b614bd261456e565b8235815260208301356020820152604083013582811115614bf257600080fd5b614bfe8a82860161475b565b604083015250606083013582811115614c1657600080fd5b614c228a82860161475b565b6060830152506080830135608082015280935050505092959194509250565b600060208284031215614c5357600080fd5b8135600481106132e257600080fd5b60008060408385031215614c7557600080fd5b8235614c80816145e3565b9150614c8e6020840161474c565b90509250929050565b60208101612e4182846143ba565b60006101208284031215614cb857600080fd5b6132e28383614a15565b600080600080600060a08688031215614cda57600080fd5b8535614ce5816145e3565b94506020868101356001600160401b0380821115614d0257600080fd5b614d0e8a838b01614608565b96506040890135915080821115614d2457600080fd5b818901915089601f830112614d3857600080fd5b8135614d46614629826145c0565b81815260059190911b8301840190848101908c831115614d6557600080fd5b938501935b82851015614d8357843582529385019390850190614d6a565b975050506060890135925080831115614d9b57600080fd5b614da78a848b0161475b565b94506080890135925080831115614dbd57600080fd5b505061495e8882890161475b565b600060208284031215614ddd57600080fd5b81356132e2816145e3565b600181811c90821680614dfc57607f821691505b602082108103614e1c57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215614e3457600080fd5b5051919050565b600060208284031215614e4d57600080fd5b81516132e28161449a565b600060208284031215614e6a57600080fd5b81516132e2816145e3565b60006101a0825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518282870152614ee88387018261421b565b9250505061014080840151614f07828701826001600160a01b03169052565b505061016083810151908501526101809283015192909301919091525090565b606081526000614f3a6060830186614e75565b60208301949094525060400152919050565b634e487b7160e01b600052603260045260246000fd5b606081526000614f756060830186614e75565b82810360208401528451614f88816149db565b80825250602085015160c06020830152614fa560c0830182614283565b905060408601518282036040840152614fbe8282614283565b91505060608601518282036060840152614fd88282614283565b9150506080860151608083015260ff60a08701511660a083015283810360408501526116628186614283565b600061012082019050825182526020808401518184015260408401516040840152606084015160608401526080840151608084015260a084015160a0840160005b600481101561506257825182529183019190830190600101615045565b5050505092915050565b601f82111561393657600081815260208120601f850160051c810160208610156150935750805b601f850160051c820191505b818110156150b25782815560010161509f565b505050505050565b81516001600160401b038111156150d3576150d36144eb565b6150e7816150e18454614de8565b8461506c565b602080601f83116001811461511c57600084156151045750858301515b600019600386901b1c1916600185901b1785556150b2565b600085815260208120601f198616915b8281101561514b5788860151825594840194600190910190840161512c565b50858210156151695787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b80820180821115612e4157612e41615179565b6000600182016151b4576151b4615179565b5060010190565b6151c581856143ce565b82602082015260606040820152600061441d6060830184614283565b81810381811115612e4157612e41615179565b6001600160a01b038516815260208101849052604081018390526080810161521b836149db565b82606083015295945050505050565b8082028115828204841417612e4157612e41615179565b83815260606020820152600061525a6060830185614307565b828103604084015261449081856143de565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516152c981846020870161425f565b919091019291505056fe629d646ec67bfbeb7c6606ef8cc3b08ea57953ef9e89bc573ebaeb509393412b416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220f9e6e159d1b14cd849e83b5e84701f46369140e20b998729ad46e5732a3218ff64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Company Entry Point",
    "events": {
      "Received(uint256)": {
        "details": "Event emitted when pool contract receives ETH.",
        "params": {
          "amount": "Amount of received ETH"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelProposal(uint256)": {
        "details": "Cancel proposal, callable only by Service",
        "params": {
          "proposalId": "Proposal ID"
        }
      },
      "castVote(uint256,bool)": {
        "details": "Cast proposal vote",
        "params": {
          "proposalId": "Pool proposal ID",
          "support": "Against or for"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "executeProposal(uint256)": {
        "details": "Execute proposal",
        "params": {
          "proposalId": "Proposal ID"
        }
      },
      "getBallot(address,uint256)": {
        "details": "Return voting result for a given account and proposal",
        "params": {
          "account": "Account address",
          "proposalId": "Proposal ID"
        },
        "returns": {
          "ballot": "Vote type",
          "votes": "Number of votes cast"
        }
      },
      "initialize(address,string,(uint256,uint256,uint256,uint256,uint256,uint256[4]),(uint256,uint256,string,string,uint256))": {
        "details": "Create TransferETH proposal",
        "params": {
          "companyInfo_": "Company info",
          "governanceSettings_": "GovernanceSettings_",
          "owner_": "Pool owner",
          "trademark_": "Trademark"
        }
      },
      "isDAO()": {
        "details": "Return if pool had a successful governance TGE",
        "returns": {
          "_0": "Is any governance TGE successful"
        }
      },
      "owner()": {
        "details": "Return pool owner",
        "returns": {
          "_0": "Owner address"
        }
      },
      "pause()": {
        "details": "Pause pool and corresponding TGEs and Tokens"
      },
      "paused()": {
        "details": "Return pool paused status",
        "returns": {
          "_0": "Is pool paused"
        }
      },
      "proposalState(uint256)": {
        "details": "Return proposal state",
        "params": {
          "proposalId": "Proposal ID"
        },
        "returns": {
          "_0": "ProposalState"
        }
      },
      "proposeGovernanceSettings((uint256,uint256,uint256,uint256,uint256,uint256[4]),string,string)": {
        "params": {
          "description": "Proposal description",
          "metaHash": "Hash value of proposal metadata",
          "settings": "New governance settings"
        },
        "returns": {
          "proposalId": "Created proposal's ID"
        }
      },
      "proposeTGE((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address,uint256,uint256),(uint8,string,string,string,uint256,uint8),string,string,string)": {
        "details": "Propose new TGE",
        "params": {
          "description": "Proposal description",
          "metaHash": "Hash value of proposal metadata",
          "metadataURI": "TGE metadata URI",
          "tgeInfo": "TGE parameters",
          "tokenInfo": "Token parameters"
        },
        "returns": {
          "proposalId": "Created proposal's ID"
        }
      },
      "proposeTransfer(address,address[],uint256[],string,string)": {
        "details": "Propose transfer of assets",
        "params": {
          "amounts": "Transfer amounts",
          "asset": "Asset to transfer (address(0) for ETH transfers)",
          "description": "Proposal description",
          "metaHash": "Hash value of proposal metadata",
          "recipients": "Transfer recipients"
        },
        "returns": {
          "proposalId": "Created proposal's ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setGovernanceSettings((uint256,uint256,uint256,uint256,uint256,uint256[4]))": {
        "params": {
          "settings": "New governance settings"
        }
      },
      "setToken(address,uint8)": {
        "details": "Set pool preference token",
        "params": {
          "tokenType_": "Token type",
          "token_": "Token address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Pause pool and corresponding TGEs and Tokens"
      }
    },
    "stateVariables": {
      "companyInfo": {
        "details": "Company info"
      },
      "tokens": {
        "details": "Pool tokens addresses"
      },
      "trademark": {
        "details": "Pool trademark"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "GovernanceSettingsSet(uint256,uint256,uint256,uint256,uint256,uint256[4])": {
        "notice": "Event emitted when governance settings are set"
      }
    },
    "kind": "user",
    "methods": {
      "MAX_BASE_EXECUTION_DELAY()": {
        "notice": "Max base execution delay (as blocks)"
      },
      "decisionThreshold()": {
        "notice": "Threshold of for votes required for proposal to succeed"
      },
      "executionDelays(uint8)": {
        "notice": "Delays for proposal types"
      },
      "proposalThreshold()": {
        "notice": "Threshold of votes required to propose"
      },
      "proposeGovernanceSettings((uint256,uint256,uint256,uint256,uint256,uint256[4]),string,string)": {
        "notice": "Propose new governance settings"
      },
      "quorumThreshold()": {
        "notice": "Threshold of votes required to reach quorum"
      },
      "setGovernanceSettings((uint256,uint256,uint256,uint256,uint256,uint256[4]))": {
        "notice": "Updates governance settings"
      },
      "transferValueForDelay()": {
        "notice": "Minimal transfer value to trigger delay"
      },
      "votingDuration()": {
        "notice": "Duration of proposal voting (as blocks)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1184,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1187,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4034,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 589,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 709,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1623,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1681,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1503,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 1608,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15927,
        "contract": "contracts/Pool.sol:Pool",
        "label": "proposals",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_struct(Proposal)15921_storage)"
      },
      {
        "astId": 15939,
        "contract": "contracts/Pool.sol:Pool",
        "label": "ballots",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_enum(Ballot)15931))"
      },
      {
        "astId": 15942,
        "contract": "contracts/Pool.sol:Pool",
        "label": "lastProposalId",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 15630,
        "contract": "contracts/Pool.sol:Pool",
        "label": "proposalThreshold",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 15633,
        "contract": "contracts/Pool.sol:Pool",
        "label": "quorumThreshold",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 15636,
        "contract": "contracts/Pool.sol:Pool",
        "label": "decisionThreshold",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 15639,
        "contract": "contracts/Pool.sol:Pool",
        "label": "votingDuration",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 15642,
        "contract": "contracts/Pool.sol:Pool",
        "label": "transferValueForDelay",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 15648,
        "contract": "contracts/Pool.sol:Pool",
        "label": "executionDelays",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_enum(EventType)17575,t_uint256)"
      },
      {
        "astId": 15653,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16607,
        "contract": "contracts/Pool.sol:Pool",
        "label": "service",
        "offset": 0,
        "slot": "260",
        "type": "t_contract(IService)17303"
      },
      {
        "astId": 16612,
        "contract": "contracts/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "261",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12341,
        "contract": "contracts/Pool.sol:Pool",
        "label": "trademark",
        "offset": 0,
        "slot": "311",
        "type": "t_string_storage"
      },
      {
        "astId": 12345,
        "contract": "contracts/Pool.sol:Pool",
        "label": "companyInfo",
        "offset": 0,
        "slot": "312",
        "type": "t_struct(CompanyInfo)17551_storage"
      },
      {
        "astId": 12351,
        "contract": "contracts/Pool.sol:Pool",
        "label": "tokens",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_enum(TokenType)17412,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IService)17303": {
        "encoding": "inplace",
        "label": "contract IService",
        "numberOfBytes": "20"
      },
      "t_enum(Ballot)15931": {
        "encoding": "inplace",
        "label": "enum Governor.Ballot",
        "numberOfBytes": "1"
      },
      "t_enum(EventType)17575": {
        "encoding": "inplace",
        "label": "enum IRecordsRegistry.EventType",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalState)15873": {
        "encoding": "inplace",
        "label": "enum Governor.ProposalState",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)17412": {
        "encoding": "inplace",
        "label": "enum IToken.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_enum(Ballot)15931))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => enum Governor.Ballot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_enum(Ballot)15931)"
      },
      "t_mapping(t_enum(EventType)17575,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(EventType)17575",
        "label": "mapping(enum IRecordsRegistry.EventType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(TokenType)17412,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(TokenType)17412",
        "label": "mapping(enum IToken.TokenType => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(Ballot)15931)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Governor.Ballot)",
        "numberOfBytes": "32",
        "value": "t_enum(Ballot)15931"
      },
      "t_mapping(t_uint256,t_struct(Proposal)15921_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Governor.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)15921_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CompanyInfo)17551_storage": {
        "encoding": "inplace",
        "label": "struct ICompaniesRegistry.CompanyInfo",
        "members": [
          {
            "astId": 17542,
            "contract": "contracts/Pool.sol:Pool",
            "label": "jurisdiction",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17544,
            "contract": "contracts/Pool.sol:Pool",
            "label": "entityType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17546,
            "contract": "contracts/Pool.sol:Pool",
            "label": "ein",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 17548,
            "contract": "contracts/Pool.sol:Pool",
            "label": "dateOfIncorporation",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 17550,
            "contract": "contracts/Pool.sol:Pool",
            "label": "fee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Proposal)15921_storage": {
        "encoding": "inplace",
        "label": "struct Governor.Proposal",
        "members": [
          {
            "astId": 15914,
            "contract": "contracts/Pool.sol:Pool",
            "label": "core",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProposalCoreData)15889_storage"
          },
          {
            "astId": 15917,
            "contract": "contracts/Pool.sol:Pool",
            "label": "vote",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(ProposalVotingData)15903_storage"
          },
          {
            "astId": 15920,
            "contract": "contracts/Pool.sol:Pool",
            "label": "meta",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(ProposalMetaData)15911_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(ProposalCoreData)15889_storage": {
        "encoding": "inplace",
        "label": "struct Governor.ProposalCoreData",
        "members": [
          {
            "astId": 15876,
            "contract": "contracts/Pool.sol:Pool",
            "label": "targets",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 15879,
            "contract": "contracts/Pool.sol:Pool",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 15882,
            "contract": "contracts/Pool.sol:Pool",
            "label": "callDatas",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 15884,
            "contract": "contracts/Pool.sol:Pool",
            "label": "quorumThreshold",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15886,
            "contract": "contracts/Pool.sol:Pool",
            "label": "decisionThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15888,
            "contract": "contracts/Pool.sol:Pool",
            "label": "executionDelay",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ProposalMetaData)15911_storage": {
        "encoding": "inplace",
        "label": "struct Governor.ProposalMetaData",
        "members": [
          {
            "astId": 15906,
            "contract": "contracts/Pool.sol:Pool",
            "label": "proposalType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(EventType)17575"
          },
          {
            "astId": 15908,
            "contract": "contracts/Pool.sol:Pool",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 15910,
            "contract": "contracts/Pool.sol:Pool",
            "label": "metaHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalVotingData)15903_storage": {
        "encoding": "inplace",
        "label": "struct Governor.ProposalVotingData",
        "members": [
          {
            "astId": 15891,
            "contract": "contracts/Pool.sol:Pool",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15893,
            "contract": "contracts/Pool.sol:Pool",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15895,
            "contract": "contracts/Pool.sol:Pool",
            "label": "availableVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15897,
            "contract": "contracts/Pool.sol:Pool",
            "label": "forVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15899,
            "contract": "contracts/Pool.sol:Pool",
            "label": "againstVotes",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15902,
            "contract": "contracts/Pool.sol:Pool",
            "label": "executionState",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ProposalState)15873"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}