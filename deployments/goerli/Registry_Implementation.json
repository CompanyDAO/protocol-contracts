{
  "address": "0x676E0f3D737321B9Ecc6EED5C258184C4F61194A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "jurisdiction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entityType",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ein",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dateOfIncorporation",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ICompaniesRegistry.CompanyInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "CompanyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "metadataIndex",
          "type": "uint256"
        }
      ],
      "name": "CompanyDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entityType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CompanyFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IRecordsRegistry.ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ContractRecordAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IRecordsRegistry.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "EventRecordAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalRecordAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPANIES_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELISTED_TOKEN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "enum IRecordsRegistry.ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "addContractRecord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "enum IRecordsRegistry.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metaHash",
          "type": "string"
        }
      ],
      "name": "addEventRecord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "addProposalRecord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "companies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ein",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dateOfIncorporation",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityType",
          "type": "uint256"
        }
      ],
      "name": "companyAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "companyExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "enum IRecordsRegistry.ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "jurisdiction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entityType",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ein",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dateOfIncorporation",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICompaniesRegistry.CompanyInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createCompany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "deleteCompany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "enum IRecordsRegistry.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metaHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "indexOfContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint160",
          "name": "index",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCompanyIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityType",
          "type": "uint256"
        }
      ],
      "name": "lockCompany",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "jurisdiction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entityType",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ein",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dateOfIncorporation",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICompaniesRegistry.CompanyInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "service",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "service_",
          "type": "address"
        }
      ],
      "name": "setService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "typeOf",
      "outputs": [
        {
          "internalType": "enum IRecordsRegistry.ContractType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateCompanyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "whitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf1c57d4db82f9b0d5df616f32aa5f2001ae8d4a39d1bf12524311e801af830b",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0x676E0f3D737321B9Ecc6EED5C258184C4F61194A",
    "transactionIndex": 57,
    "gasUsed": "2490878",
    "logsBloom": "0x
    "blockHash": "0x1ffdde1c7bf4be8ff7244d13b0263d26ec40afe480f7f26d194b57cff72078cc",
    "transactionHash": "0xaf1c57d4db82f9b0d5df616f32aa5f2001ae8d4a39d1bf12524311e801af830b",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 8339632,
        "transactionHash": "0xaf1c57d4db82f9b0d5df616f32aa5f2001ae8d4a39d1bf12524311e801af830b",
        "address": "0x676E0f3D737321B9Ecc6EED5C258184C4F61194A",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 194,
        "blockHash": "0x1ffdde1c7bf4be8ff7244d13b0263d26ec40afe480f7f26d194b57cff72078cc"
      }
    ],
    "blockNumber": 8339632,
    "cumulativeGasUsed": "16998248",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "73e1d27fa3b1fad97fd6222f02a1bb42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ein\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ICompaniesRegistry.CompanyInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"CompanyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"metadataIndex\",\"type\":\"uint256\"}],\"name\":\"CompanyDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CompanyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IRecordsRegistry.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ContractRecordAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IRecordsRegistry.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"EventRecordAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalRecordAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPANIES_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTED_TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum IRecordsRegistry.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"addContractRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum IRecordsRegistry.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaHash\",\"type\":\"string\"}],\"name\":\"addEventRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"addProposalRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"companies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ein\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"}],\"name\":\"companyAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"companyExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum IRecordsRegistry.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ein\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct ICompaniesRegistry.CompanyInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deleteCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"enum IRecordsRegistry.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexOfContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint160\",\"name\":\"index\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCompanyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"}],\"name\":\"lockCompany\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ein\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateOfIncorporation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct ICompaniesRegistry.CompanyInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service_\",\"type\":\"address\"}],\"name\":\"setService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"typeOf\",\"outputs\":[{\"internalType\":\"enum IRecordsRegistry.ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateCompanyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"whitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Protocol registry\",\"kind\":\"dev\",\"methods\":{\"addContractRecord(address,uint8,string)\":{\"details\":\"Add contract record\",\"params\":{\"addr\":\"Contract address\",\"contractType\":\"Contract type\"},\"returns\":{\"index\":\"Record index\"}},\"addEventRecord(address,uint8,uint256,string)\":{\"details\":\"Add event record\",\"params\":{\"eventType\":\"Event type\",\"metaHash\":\"Hash value of event metadata\",\"pool\":\"Pool address\",\"proposalId\":\"Proposal ID\"},\"returns\":{\"index\":\"Record index\"}},\"addProposalRecord(address,uint256)\":{\"details\":\"Add proposal record\",\"params\":{\"pool\":\"Pool address\",\"proposalId\":\"Proposal ID\"},\"returns\":{\"index\":\"Record index\"}},\"companyAvailable(uint256,uint256)\":{\"details\":\"Check if pool available\",\"params\":{\"entityType\":\"Entity type\",\"jurisdiction\":\"Jurisdiction\"},\"returns\":{\"_0\":\"Flag if company is available\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createCompany((uint256,uint256,string,string,uint256))\":{\"details\":\"Create company record\",\"params\":{\"info\":\"Company Info\"}},\"deleteCompany(uint256,uint256,uint256)\":{\"details\":\"Delete queue record\",\"params\":{\"entityType\":\"Entity type\",\"id\":\"Queue index\",\"jurisdiction\":\"Jurisdiction\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize()\":{\"details\":\"Initializer\"},\"isTokenWhitelisted(address)\":{\"details\":\"Check if token is whitelisted\",\"params\":{\"token\":\"Token\"},\"returns\":{\"_0\":\"Is token whitelisted\"}},\"lockCompany(uint256,uint256)\":{\"details\":\"Lock company record\",\"returns\":{\"info\":\"Company info\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"typeOf(address)\":{\"params\":{\"addr\":\"Address of contract\"},\"returns\":{\"_0\":\"Contract type\"}},\"updateCompanyFee(uint256,uint256,uint256,uint256)\":{\"details\":\"Update company fee\",\"params\":{\"entityType\":\"Entity type\",\"fee\":\"Fee to update\",\"id\":\"Queue index\",\"jurisdiction\":\"Jurisdiction\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"typeOf(address)\":{\"notice\":\"Returns type of given contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./registry/CompaniesRegistry.sol\\\";\\nimport \\\"./registry/RecordsRegistry.sol\\\";\\nimport \\\"./registry/TokensRegistry.sol\\\";\\n\\n/// @dev Protocol registry\\ncontract Registry is CompaniesRegistry, RecordsRegistry, TokensRegistry {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializer\\n     */\\n    function initialize() public initializer {\\n        __RegistryBase_init();\\n    }\\n}\\n\",\"keccak256\":\"0x9478b30ec1ab16039f092efdc0f6e4675c0b858bddddb43ff22309be47575d8a\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./IToken.sol\\\";\\n\\ninterface IService is IAccessControlEnumerableUpgradeable {\\n    function ADMIN_ROLE() external view returns (bytes32);\\n\\n    function WHITELISTED_USER_ROLE() external view returns (bytes32);\\n\\n    function SERVICE_MANAGER_ROLE() external view returns (bytes32);\\n\\n    function EXECUTOR_ROLE() external view returns (bytes32);\\n\\n    function createSecondaryTGE(\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function addEvent(\\n        IRegistry.EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external;\\n\\n    function registry() external view returns (IRegistry);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTokenFee() external view returns (uint256);\\n\\n    function getMinSoftCap() external view returns (uint256);\\n\\n    function getProtocolTokenFee(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function poolBeacon() external view returns (address);\\n\\n    function tgeBeacon() external view returns (address);\\n\\n    function validateTGEInfo(\\n        ITGE.TGEInfo calldata info,\\n        uint256 cap,\\n        uint256 totalSupply\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x7b2bb8901fbe0fbdeab01abc1c0d267de98ce430903490752bfc39049fcd48ac\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 vestingPercent;\\n        uint256 vestingDuration;\\n        uint256 vestingTVL;\\n        uint256 duration;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n    }\\n\\n    function initialize(IToken token_, TGEInfo calldata info) external;\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n\\n    function transferUnlocked() external view returns (bool);\\n\\n    function totalVested() external view returns (uint256);\\n\\n    function purchaseOf(address user) external view returns (uint256);\\n\\n    function vestedBalanceOf(address user) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xca0ba3f8a3299cbaaf4022330f4f336b03f89f6d9d6818d04eac0aaef28950b1\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IToken is IVotesUpgradeable, IERC20Upgradeable {\\n    struct TokenInfo {\\n        TokenType tokenType;\\n        string name;\\n        string symbol;\\n        string description;\\n        uint256 cap;\\n        uint8 decimals;\\n    }\\n\\n    enum TokenType {\\n        None,\\n        Governance,\\n        Preference\\n    }\\n\\n    function initialize(\\n        address pool_,\\n        TokenInfo memory info,\\n        address primaryTGE_\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenType() external view returns (TokenType);\\n\\n    function lastTGE() external view returns (address);\\n\\n    function getTGEList() external view returns (address[] memory);\\n\\n    function isPrimaryTGESuccessful() external view returns (bool);\\n\\n    function addTGE(address tge) external;\\n\\n    function getTotalTGEVestedTokens() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f6a8deddfa30694186ba7593c101c3860a120f1331b8dd4840efbc44a91a54f\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ICompaniesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../ITGE.sol\\\";\\nimport \\\"../IToken.sol\\\";\\n\\ninterface ICompaniesRegistry {\\n    struct CompanyInfo {\\n        uint256 jurisdiction;\\n        uint256 entityType;\\n        string ein;\\n        string dateOfIncorporation;\\n        uint256 fee;\\n    }\\n\\n    function lockCompany(uint256 jurisdiction, uint256 entityType)\\n        external\\n        returns (CompanyInfo memory);\\n}\\n\",\"keccak256\":\"0xa2a610c882337a279f3575cd663c9aefbeb8c17ca37c97ffa2e7e6b778a8c084\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRecordsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IRecordsRegistry {\\n    // Directory\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        PreferenceToken,\\n        TGE\\n    }\\n\\n    enum EventType {\\n        None,\\n        Transfer,\\n        TGE,\\n        GovernanceSettings\\n    }\\n\\n    /**\\n     * @dev Contract information structure\\n     * @param addr Contract address\\n     * @param contractType Contract type\\n     * @param description Contract description\\n     */\\n    struct ContractInfo {\\n        address addr;\\n        ContractType contractType;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Proposal information structure\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param description Proposal description\\n     */\\n    struct ProposalInfo {\\n        address pool;\\n        uint256 proposalId;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Event information structure\\n     * @param eventType Event type\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param metaHash Hash value of event metadata\\n     */\\n    struct Event {\\n        EventType eventType;\\n        address pool;\\n        uint256 proposalId;\\n        string metaHash;\\n    }\\n\\n    function addContractRecord(\\n        address addr,\\n        ContractType contractType,\\n        string memory description\\n    ) external returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function addEventRecord(\\n        address pool,\\n        EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0xf6c8e1758c25ea6dea98ac5e5874820a2f538bac7a76641eba7e553b9b562cf9\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ICompaniesRegistry.sol\\\";\\nimport \\\"./ITokensRegistry.sol\\\";\\nimport \\\"./IRecordsRegistry.sol\\\";\\n\\ninterface IRegistry is ITokensRegistry, ICompaniesRegistry, IRecordsRegistry {}\\n\",\"keccak256\":\"0xe16ba0ac61345d022330464cb8dc4608a4b054d2f2f7fe8de166ad0be5ec8d73\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ITokensRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITokensRegistry {\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcbbf6de279d7d4b0b55061c2ee0980e1b4e5a769ba6f01d39ec681111f51b110\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary ExceptionsLibrary {\\n    string public constant ADDRESS_ZERO = \\\"ADDRESS_ZERO\\\";\\n    string public constant INCORRECT_ETH_PASSED = \\\"INCORRECT_ETH_PASSED\\\";\\n    string public constant NO_COMPANY = \\\"NO_COMPANY\\\";\\n    string public constant INVALID_TOKEN = \\\"INVALID_TOKEN\\\";\\n    string public constant NOT_POOL = \\\"NOT_POOL\\\";\\n    string public constant NOT_TGE = \\\"NOT_TGE\\\";\\n    string public constant NOT_Registry = \\\"NOT_Registry\\\";\\n    string public constant NOT_POOL_OWNER = \\\"NOT_POOL_OWNER\\\";\\n    string public constant NOT_SERVICE_OWNER = \\\"NOT_SERVICE_OWNER\\\";\\n    string public constant IS_DAO = \\\"IS_DAO\\\";\\n    string public constant NOT_DAO = \\\"NOT_DAO\\\";\\n    string public constant NOT_WHITELISTED = \\\"NOT_WHITELISTED\\\";\\n    string public constant ALREADY_WHITELISTED = \\\"ALREADY_WHITELISTED\\\";\\n    string public constant ALREADY_NOT_WHITELISTED = \\\"ALREADY_NOT_WHITELISTED\\\";\\n    string public constant NOT_SERVICE = \\\"NOT_SERVICE\\\";\\n    string public constant WRONG_STATE = \\\"WRONG_STATE\\\";\\n    string public constant TRANSFER_FAILED = \\\"TRANSFER_FAILED\\\";\\n    string public constant CLAIM_NOT_AVAILABLE = \\\"CLAIM_NOT_AVAILABLE\\\";\\n    string public constant NO_LOCKED_BALANCE = \\\"NO_LOCKED_BALANCE\\\";\\n    string public constant LOCKUP_TVL_REACHED = \\\"LOCKUP_TVL_REACHED\\\";\\n    string public constant HARDCAP_OVERFLOW = \\\"HARDCAP_OVERFLOW\\\";\\n    string public constant MAX_PURCHASE_OVERFLOW = \\\"MAX_PURCHASE_OVERFLOW\\\";\\n    string public constant HARDCAP_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant MIN_PURCHASE_UNDERFLOW = \\\"MIN_PURCHASE_UNDERFLOW\\\";\\n    string public constant LOW_UNLOCKED_BALANCE = \\\"LOW_UNLOCKED_BALANCE\\\";\\n    string public constant ZERO_PURCHASE_AMOUNT = \\\"ZERO_PURCHASE_AMOUNTs\\\";\\n    string public constant NOTHING_TO_REDEEM = \\\"NOTHING_TO_REDEEM\\\";\\n    string public constant RECORD_IN_USE = \\\"RECORD_IN_USE\\\";\\n    string public constant INVALID_EIN = \\\"INVALID_EIN\\\";\\n    string public constant VALUE_ZERO = \\\"VALUE_ZERO\\\";\\n    string public constant ALREADY_SET = \\\"ALREADY_SET\\\";\\n    string public constant VOTING_FINISHED = \\\"VOTING_FINISHED\\\";\\n    string public constant ALREADY_EXECUTED = \\\"ALREADY_EXECUTED\\\";\\n    string public constant ACTIVE_TGE_EXISTS = \\\"ACTIVE_TGE_EXISTS\\\";\\n    string public constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\n    string public constant INVALID_CAP = \\\"INVALID_CAP\\\";\\n    string public constant INVALID_HARDCAP = \\\"INVALID_HARDCAP\\\";\\n    string public constant ONLY_POOL = \\\"ONLY_POOL\\\";\\n    string public constant ETH_TRANSFER_FAIL = \\\"ETH_TRANSFER_FAIL\\\";\\n    string public constant TOKEN_TRANSFER_FAIL = \\\"TOKEN_TRANSFER_FAIL\\\";\\n    string public constant BLOCK_DELAY = \\\"BLOCK_DELAY\\\";\\n    string public constant SERVICE_PAUSED = \\\"SERVICE_PAUSED\\\";\\n    string public constant INVALID_PROPOSAL_TYPE = \\\"INVALID_PROPOSAL_TYPE\\\";\\n    string public constant EXECUTION_FAILED = \\\"EXECUTION_FAILED\\\";\\n    string public constant INVALID_USER = \\\"INVALID_USER\\\";\\n    string public constant NOT_LAUNCHED = \\\"NOT_LAUNCHED\\\";\\n    string public constant LAUNCHED = \\\"LAUNCHED\\\";\\n    string public constant VESTING_TVL_REACHED = \\\"VESTING_TVL_REACHED\\\";\\n    string public constant PREFERENCE_TOKEN_EXISTS = \\\"PREFERENCE_TOKEN_EXISTS\\\";\\n    string public constant INVALID_SOFTCAP = \\\"INVALID_SOFTCAP\\\";\\n    string public constant THRESHOLD_NOT_REACHED = \\\"THRESHOLD_NOT_REACHED\\\";\\n    string public constant UNSUPPORTED_TOKEN_TYPE = \\\"UNSUPPORTED_TOKEN_TYPE\\\";\\n}\\n\",\"keccak256\":\"0x63a7cdc260e00e02c91da988f20c2965f7437733f4fb35a1898daaa93dafb462\",\"license\":\"MIT\"},\"contracts/registry/CompaniesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./RegistryBase.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"../interfaces/registry/ICompaniesRegistry.sol\\\";\\n\\nabstract contract CompaniesRegistry is RegistryBase, ICompaniesRegistry {\\n    // CONSTANTS\\n\\n    /// @dev Companies manager role\\n    bytes32 public constant COMPANIES_MANAGER_ROLE =\\n        keccak256(\\\"COMPANIES_MANAGER\\\");\\n\\n    // STORAGE\\n\\n    /// @dev Company (list indexes) queues indexed by [jurisdiction][entityType]\\n    mapping(uint256 => mapping(uint256 => uint256[])) public queue;\\n\\n    /// @dev Companies\\n    mapping(uint256 => CompanyInfo) public companies;\\n\\n    /// @dev Last company index\\n    uint256 public lastCompanyIndex;\\n\\n    /// @dev Status of combination of (jurisdiction, entityType, EIN) existing\\n    mapping(bytes32 => bool) public companyExists;\\n\\n    // EVENTS\\n\\n    /**\\n     * @dev Event emitted on company creation\\n     * @param index Company list index\\n     * @param info Company info\\n     */\\n    event CompanyCreated(uint256 index, CompanyInfo info);\\n\\n    /**\\n     * @dev Event emitted on company deletion\\n     * @param metadataIndex Company metadata index\\n     */\\n    event CompanyDeleted(uint256 metadataIndex);\\n\\n    /**\\n     * @dev Event emitted on company deletion\\n     * @param jurisdiction Jurisdiction\\n     * @param entityType Entity type\\n     * @param id Queue index\\n     * @param fee Fee for createPool\\n     */\\n    event CompanyFeeUpdated(\\n        uint256 jurisdiction,\\n        uint256 entityType,\\n        uint256 id,\\n        uint256 fee\\n    );\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev Create company record\\n     * @param info Company Info\\n     */\\n    function createCompany(CompanyInfo calldata info)\\n        public\\n        onlyRole(COMPANIES_MANAGER_ROLE)\\n    {\\n        // Check that company data is valid\\n        require(\\n            info.jurisdiction > 0 &&\\n                bytes(info.ein).length != 0 &&\\n                bytes(info.dateOfIncorporation).length != 0 &&\\n                info.entityType > 0,\\n            ExceptionsLibrary.VALUE_ZERO\\n        );\\n\\n        // Check that such company does not exist yet and mark it as existing\\n        bytes32 companyHash = keccak256(\\n            abi.encodePacked(info.jurisdiction, info.entityType, info.ein)\\n        );\\n        require(!companyExists[companyHash], ExceptionsLibrary.INVALID_EIN);\\n        companyExists[companyHash] = true;\\n\\n        // Add record to list\\n        uint256 index = ++lastCompanyIndex;\\n        companies[index] = info;\\n\\n        // Add record to queue\\n        queue[info.jurisdiction][info.entityType].push(index);\\n\\n        // Emit event\\n        emit CompanyCreated(index, info);\\n    }\\n\\n    /**\\n     * @dev Lock company record\\n     * @return info Company info\\n     */\\n    function lockCompany(uint256 jurisdiction, uint256 entityType)\\n        external\\n        onlyService\\n        returns (CompanyInfo memory info)\\n    {\\n        // Check that company is available\\n        uint256 queueLength = queue[jurisdiction][entityType].length;\\n        require(queueLength > 0, ExceptionsLibrary.NO_COMPANY);\\n\\n        // Get index and pop queue\\n        uint256 companyIndex = queue[jurisdiction][entityType][queueLength - 1];\\n        queue[jurisdiction][entityType].pop();\\n\\n        // Get company info and remove it from list\\n        info = companies[companyIndex];\\n        delete companies[companyIndex];\\n    }\\n\\n    /**\\n     * @dev Delete queue record\\n     * @param jurisdiction Jurisdiction\\n     * @param entityType Entity type\\n     * @param id Queue index\\n     */\\n    function deleteCompany(\\n        uint256 jurisdiction,\\n        uint256 entityType,\\n        uint256 id\\n    ) external onlyRole(COMPANIES_MANAGER_ROLE) {\\n        // Get index and pop queue\\n        uint256 companyIndex = queue[jurisdiction][entityType][id];\\n        uint256 lastId = queue[jurisdiction][entityType].length - 1;\\n        queue[jurisdiction][entityType][id] = queue[jurisdiction][entityType][\\n            lastId\\n        ];\\n        queue[jurisdiction][entityType].pop();\\n\\n        // Remove company from list\\n        string memory ein = companies[companyIndex].ein;\\n        delete companies[companyIndex];\\n\\n        // Mark company as not existing\\n        bytes32 companyHash = keccak256(\\n            abi.encodePacked(jurisdiction, entityType, ein)\\n        );\\n        companyExists[companyHash] = false;\\n\\n        // Emit event\\n        emit CompanyDeleted(id);\\n    }\\n\\n    /**\\n     * @dev Update company fee\\n     * @param jurisdiction Jurisdiction\\n     * @param entityType Entity type\\n     * @param id Queue index\\n     * @param fee Fee to update\\n     */\\n    function updateCompanyFee(\\n        uint256 jurisdiction,\\n        uint256 entityType,\\n        uint256 id,\\n        uint256 fee\\n    ) external onlyRole(COMPANIES_MANAGER_ROLE) {\\n        // Get company index\\n        uint256 queueLength = queue[jurisdiction][entityType].length;\\n        uint256 companyIndex = queue[jurisdiction][entityType][queueLength - 1];\\n\\n        // Update fee\\n        companies[companyIndex].fee = fee;\\n\\n        // Emit event\\n        emit CompanyFeeUpdated(jurisdiction, entityType, id, fee);\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    /**\\n     * @dev Check if pool available\\n     * @param jurisdiction Jurisdiction\\n     * @param entityType Entity type\\n     * @return Flag if company is available\\n     */\\n    function companyAvailable(uint256 jurisdiction, uint256 entityType)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return queue[jurisdiction][entityType].length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xfee4fdff5755d9afb69f8e3b79cdab14c0b095754e87588d9003e62145021cbe\",\"license\":\"MIT\"},\"contracts/registry/RecordsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./RegistryBase.sol\\\";\\nimport \\\"../interfaces/registry/IRecordsRegistry.sol\\\";\\n\\nabstract contract RecordsRegistry is RegistryBase, IRecordsRegistry {\\n    // STORAGE\\n\\n    /// @dev List of contract records\\n    ContractInfo[] public contractRecords;\\n\\n    struct ContractIndex {\\n        bool exists;\\n        uint160 index;\\n    }\\n\\n    /// @dev Mapping of contract addresses to their record indexes\\n    mapping(address => ContractIndex) public indexOfContract;\\n\\n    /// @dev List of proposal records\\n    ProposalInfo[] public proposalRecords;\\n\\n    /// @dev List of event records\\n    Event[] public events;\\n\\n    // EVENTS\\n\\n    /**\\n     * @dev Event emitted on creation of contract record\\n     * @param index Record index\\n     * @param addr Contract address\\n     * @param contractType Contract type\\n     */\\n    event ContractRecordAdded(\\n        uint256 index,\\n        address addr,\\n        ContractType contractType\\n    );\\n\\n    /**\\n     * @dev Event emitted on creation of proposal record\\n     * @param index Record index\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     */\\n    event ProposalRecordAdded(uint256 index, address pool, uint256 proposalId);\\n\\n    /**\\n     * @dev Event emitted on creation of event\\n     * @param index Record index\\n     * @param eventType Event type\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     */\\n    event EventRecordAdded(\\n        uint256 index,\\n        EventType eventType,\\n        address pool,\\n        uint256 proposalId\\n    );\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev Add contract record\\n     * @param addr Contract address\\n     * @param contractType Contract type\\n     * @return index Record index\\n     */\\n    function addContractRecord(\\n        address addr,\\n        ContractType contractType,\\n        string memory description\\n    ) external onlyService returns (uint256 index) {\\n        // Add record\\n        contractRecords.push(\\n            ContractInfo({\\n                addr: addr,\\n                contractType: contractType,\\n                description: description\\n            })\\n        );\\n        index = contractRecords.length - 1;\\n\\n        // Add mapping from contract address\\n        indexOfContract[addr] = ContractIndex({\\n            exists: true,\\n            index: uint160(index)\\n        });\\n\\n        // Emit event\\n        emit ContractRecordAdded(index, addr, contractType);\\n    }\\n\\n    /**\\n     * @dev Add proposal record\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @return index Record index\\n     */\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        onlyService\\n        returns (uint256 index)\\n    {\\n        // Add record\\n        proposalRecords.push(\\n            ProposalInfo({pool: pool, proposalId: proposalId, description: \\\"\\\"})\\n        );\\n        index = proposalRecords.length - 1;\\n\\n        // Emit event\\n        emit ProposalRecordAdded(index, pool, proposalId);\\n    }\\n\\n    /**\\n     * @dev Add event record\\n     * @param pool Pool address\\n     * @param eventType Event type\\n     * @param proposalId Proposal ID\\n     * @param metaHash Hash value of event metadata\\n     * @return index Record index\\n     */\\n    function addEventRecord(\\n        address pool,\\n        EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external onlyService returns (uint256 index) {\\n        // Add record\\n        events.push(\\n            Event({\\n                eventType: eventType,\\n                pool: pool,\\n                proposalId: proposalId,\\n                metaHash: metaHash\\n            })\\n        );\\n        index = events.length - 1;\\n\\n        // Emit event\\n        emit EventRecordAdded(index, eventType, pool, proposalId);\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Returns type of given contract\\n     * @param addr Address of contract\\n     * @return Contract type\\n     */\\n    function typeOf(address addr) external view returns (ContractType) {\\n        ContractIndex memory index = indexOfContract[addr];\\n        return\\n            index.exists\\n                ? contractRecords[index.index].contractType\\n                : ContractType.None;\\n    }\\n}\\n\",\"keccak256\":\"0x810fc688889159243ac1ccb0de928279e32054f41d53bf8f2680f101a8856e36\",\"license\":\"MIT\"},\"contracts/registry/RegistryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\n\\nabstract contract RegistryBase is AccessControlEnumerableUpgradeable {\\n    // STORAGE\\n\\n    /// @dev Service address\\n    address public service;\\n\\n    // MODIFIERS\\n\\n    modifier onlyService() {\\n        require(msg.sender == service, ExceptionsLibrary.NOT_SERVICE);\\n        _;\\n    }\\n\\n    // INITIALIZER\\n\\n    function __RegistryBase_init() internal onlyInitializing {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function setService(address service_)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        service = service_;\\n    }\\n}\\n\",\"keccak256\":\"0x4faa5aa1c816e22cb5009261aa7192f7e52ed03ecf5b6ecbb88d240c814f6307\",\"license\":\"MIT\"},\"contracts/registry/TokensRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./RegistryBase.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"../interfaces/registry/ITokensRegistry.sol\\\";\\n\\nabstract contract TokensRegistry is RegistryBase, ITokensRegistry {\\n    // CONSTANTS\\n\\n    /// @dev Whitelisted token role\\n    bytes32 public constant WHITELISTED_TOKEN_ROLE =\\n        keccak256(\\\"WHITELISTED_TOKEN\\\");\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function whitelistTokens(address[] calldata tokens)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _grantRole(WHITELISTED_TOKEN_ROLE, tokens[i]);\\n        }\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    /**\\n     * @dev Check if token is whitelisted\\n     * @param token Token\\n     * @return Is token whitelisted\\n     */\\n    function isTokenWhitelisted(address token) external view returns (bool) {\\n        return hasRole(WHITELISTED_TOKEN_ROLE, token);\\n    }\\n}\\n\",\"keccak256\":\"0xdb55faa18108e18553e0961e32fc0694083880c5d04d068975f52b023b5550f2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612b9e80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638129fc1c1161011a578063d247616c116100ad578063e79d59301161007c578063e79d593014610516578063e7fce55f1461051f578063ee1019d414610532578063f05fdfa614610552578063f4be93691461056557600080fd5b8063d247616c146104c8578063d547741f146104db578063d598d4c9146104ee578063e2938db51461050157600080fd5b8063b5af090f116100e9578063b5af090f1461047c578063bf8bdac11461048f578063ca15c873146104a2578063ca197b31146104b557600080fd5b80638129fc1c1461042e5780639010d07c1461043657806391d1485414610461578063a217fddf1461047457600080fd5b80632813d19d116101925780634cb1e9e3116101615780634cb1e9e3146103b65780635d9c7cba146103c95780636dcb0cf8146103eb5780636f50aa301461040b57600080fd5b80632813d19d146103575780632f2ff15d1461037b57806336568abe1461039057806346179c58146103a357600080fd5b80631d5033a6116101ce5780631d5033a6146102ca5780631f8b4005146102ff57806323689a0b14610312578063248a9ca31461033457600080fd5b806301ffc9a7146102005780630962c8c4146102285780630b79143014610255578063121f661c14610278575b600080fd5b61021361020e366004611fad565b610578565b60405190151581526020015b60405180910390f35b610213610236366004611fd7565b600091825260ca60209081526040808420928452919052902054151590565b610268610263366004611ff9565b6105a3565b60405161021f949392919061208c565b6102ab6102863660046120e6565b60cf6020526000908152604090205460ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b0390911660208301520161021f565b6102f17fa21b4d8440b478c033018a500413e67ca2910a10ce4992fb2dcba26856a32e8981565b60405190815260200161021f565b6102f161030d366004612117565b610674565b610325610320366004611ff9565b610833565b60405161021f939291906121ef565b6102f1610342366004611ff9565b60009081526065602052604090206001015490565b61036a610365366004611ff9565b6108fc565b60405161021f95949392919061221f565b61038e610389366004612263565b610a3b565b005b61038e61039e366004612263565b610a65565b6102f16103b136600461228f565b610ae3565b61038e6103c4366004612330565b610c86565b6103dc6103d7366004611ff9565b610d04565b60405161021f939291906123b5565b6103fe6103f93660046120e6565b610d4e565b60405161021f91906123e4565b610213610419366004611ff9565b60cd6020526000908152604090205460ff1681565b61038e610ddc565b610449610444366004611fd7565b610eed565b6040516001600160a01b03909116815260200161021f565b61021361046f366004612263565b610f05565b6102f1600081565b61021361048a3660046120e6565b610f30565b61038e61049d3660046120e6565b610f5c565b6102f16104b0366004611ff9565b610f8a565b61038e6104c33660046123f2565b610fa1565b6102f16104d63660046123f2565b611223565b61038e6104e9366004612263565b611261565b60c954610449906001600160a01b031681565b6102f1600080516020612b4983398151915281565b6102f160cc5481565b61038e61052d36600461241e565b611286565b610545610540366004611fd7565b611473565b60405161021f9190612459565b61038e6105603660046124bd565b611779565b6102f16105733660046124ef565b61183b565b60006001600160e01b03198216635a05180f60e01b148061059d575061059d826119c4565b92915050565b60d181815481106105b357600080fd5b600091825260209091206003909102018054600182015460028301805460ff841695506101009093046001600160a01b03169391926105f190612519565b80601f016020809104026020016040519081016040528092919081815260200182805461061d90612519565b801561066a5780601f1061063f5761010080835404028352916020019161066a565b820191906000526020600020905b81548152906001019060200180831161064d57829003601f168201915b5050505050905084565b60c95460408051808201909152600b81526a4e4f545f5345525649434560a81b60208201526000916001600160a01b031633146106cd5760405162461bcd60e51b81526004016106c49190612553565b60405180910390fd5b5060ce6040518060600160405280866001600160a01b031681526020018560048111156106fc576106fc612012565b815260209081018590528254600181018455600093845292819020825160029094020180546001600160a01b039094166001600160a01b031985168117825591830151929390929183916001600160a81b03191617600160a01b83600481111561076857610768612012565b02179055506040820151600182019061078190826125c9565b505060ce546107939150600190612699565b604080518082018252600181526001600160a01b038381166020808401918252898316600090815260cf9091528490209251835491516001600160a81b0319909216901515610100600160a81b031916176101009190921602179055519091507f30ae76c641f7b77628da0dd91b34591e5b1dc7422220e5eb1080af2adfa142ef90610824908390879087906126ac565b60405180910390a19392505050565b60d0818154811061084357600080fd5b60009182526020909120600390910201805460018201546002830180546001600160a01b03909316945090929161087990612519565b80601f01602080910402602001604051908101604052809291908181526020018280546108a590612519565b80156108f25780601f106108c7576101008083540402835291602001916108f2565b820191906000526020600020905b8154815290600101906020018083116108d557829003601f168201915b5050505050905083565b60cb602052600090815260409020805460018201546002830180549293919261092490612519565b80601f016020809104026020016040519081016040528092919081815260200182805461095090612519565b801561099d5780601f106109725761010080835404028352916020019161099d565b820191906000526020600020905b81548152906001019060200180831161098057829003601f168201915b5050505050908060030180546109b290612519565b80601f01602080910402602001604051908101604052809291908181526020018280546109de90612519565b8015610a2b5780601f10610a0057610100808354040283529160200191610a2b565b820191906000526020600020905b815481529060010190602001808311610a0e57829003601f168201915b5050505050908060040154905085565b600082815260656020526040902060010154610a56816119f9565b610a608383611a03565b505050565b6001600160a01b0381163314610ad55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106c4565b610adf8282611a25565b5050565b60c95460408051808201909152600b81526a4e4f545f5345525649434560a81b60208201526000916001600160a01b03163314610b335760405162461bcd60e51b81526004016106c49190612553565b5060d16040518060800160405280876003811115610b5357610b53612012565b8152602001886001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050835460018181018655948252602090912083516003928302909101805494959094919350849260ff19909216918490811115610be357610be3612012565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600182015560608201516002820190610c2c90826125c9565b505060d154610c3e9150600190612699565b90507fcd6a83e26b7223cb3ee566d6b45eb10629b98ee7442e79f67db857b62247eb4381868887604051610c7594939291906126d7565b60405180910390a195945050505050565b6000610c91816119f9565b60005b82811015610cfe57610cec7fa21b4d8440b478c033018a500413e67ca2910a10ce4992fb2dcba26856a32e89858584818110610cd257610cd2612706565b9050602002016020810190610ce791906120e6565b611a03565b80610cf68161271c565b915050610c94565b50505050565b60ce8181548110610d1457600080fd5b6000918252602090912060029091020180546001820180546001600160a01b0383169450600160a01b90920460ff16929161087990612519565b6001600160a01b03808216600090815260cf6020908152604080832081518083019092525460ff81161515808352610100909104909416918101919091529091610d99576000610dd5565b60ce81602001516001600160a01b031681548110610db957610db9612706565b6000918252602090912060029091020154600160a01b900460ff165b9392505050565b600054610100900460ff1615808015610dfc5750600054600160ff909116105b80610e165750303b158015610e16575060005460ff166001145b610e795760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106c4565b6000805460ff191660011790558015610e9c576000805461ff0019166101001790555b610ea4611a47565b8015610eea576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6000828152609760205260408120610dd59083611abf565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061059d7fa21b4d8440b478c033018a500413e67ca2910a10ce4992fb2dcba26856a32e8983610f05565b6000610f67816119f9565b5060c980546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260976020526040812061059d90611acb565b600080516020612b49833981519152610fb9816119f9565b600084815260ca602090815260408083208684529091528120805484908110610fe457610fe4612706565b600091825260208083209091015487835260ca825260408084208885529092529082205490925061101790600190612699565b600087815260ca6020908152604080832089845290915290208054919250908290811061104657611046612706565b600091825260208083209091015488835260ca82526040808420898552909252912080548690811061107a5761107a612706565b600091825260208083209091019290925587815260ca82526040808220888352909252208054806110ad576110ad612735565b60019003818190600052602060002001600090559055600060cb600084815260200190815260200160002060020180546110e690612519565b80601f016020809104026020016040519081016040528092919081815260200182805461111290612519565b801561115f5780601f106111345761010080835404028352916020019161115f565b820191906000526020600020905b81548152906001019060200180831161114257829003601f168201915b505050600086815260cb6020526040812081815560018101829055939450915061118e90506002830182611f5f565b61119c600383016000611f5f565b6004820160009055505060008787836040516020016111bd9392919061274b565b60408051601f198184030181528282528051602091820120600081815260cd8352839020805460ff1916905589845291519193507f2becd600b42eb771bee46672694b5a9e9d0acb6638d9c9a5e39bcc70954b7416928290030190a15050505050505050565b60ca602052826000526040600020602052816000526040600020818154811061124b57600080fd5b9060005260206000200160009250925050505481565b60008281526065602052604090206001015461127c816119f9565b610a608383611a25565b600080516020612b4983398151915261129e816119f9565b8135158015906112bb57506112b66040830183612778565b151590505b80156112d457506112cf6060830183612778565b151590505b80156112e4575060008260200135115b6040518060400160405280600a81526020016956414c55455f5a45524f60b01b815250906113255760405162461bcd60e51b81526004016106c49190612553565b5060008235602084013561133c6040860186612778565b60405160200161134f94939291906127c6565b60408051601f198184030181528282528051602091820120600081815260cd835283902054848401909352600b84526a24a72b20a624a22fa2a4a760a91b91840191909152925060ff16156113b75760405162461bcd60e51b81526004016106c49190612553565b50600081815260cd60205260408120805460ff1916600117905560cc805482906113e09061271c565b9182905550600081815260cb60205260409020909150849061140282826128a2565b50508335600090815260ca60209081526040808320828801358452825280832080546001810182559084529190922001829055517f45baac83b696783d108ca0f3c55b9ab33e858c32a0bc218fde16792113ebc763906114659083908790612a13565b60405180910390a150505050565b6114a56040518060a0016040528060008152602001600081526020016060815260200160608152602001600081525090565b60c95460408051808201909152600b81526a4e4f545f5345525649434560a81b6020820152906001600160a01b031633146114f35760405162461bcd60e51b81526004016106c49190612553565b50600083815260ca60209081526040808320858452825291829020548251808401909352600a8352694e4f5f434f4d50414e5960b01b91830191909152908161154f5760405162461bcd60e51b81526004016106c49190612553565b50600084815260ca602090815260408083208684529091528120611574600184612699565b8154811061158457611584612706565b600091825260208083209091015487835260ca825260408084208885529092529120805491925090806115b9576115b9612735565b6001900381819060005260206000200160009055905560cb60008281526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201805461161190612519565b80601f016020809104026020016040519081016040528092919081815260200182805461163d90612519565b801561168a5780601f1061165f5761010080835404028352916020019161168a565b820191906000526020600020905b81548152906001019060200180831161166d57829003601f168201915b505050505081526020016003820180546116a390612519565b80601f01602080910402602001604051908101604052809291908181526020018280546116cf90612519565b801561171c5780601f106116f15761010080835404028352916020019161171c565b820191906000526020600020905b8154815290600101906020018083116116ff57829003601f168201915b505050918352505060049190910154602091820152600083815260cb90915260408120818155600181018290559194506117596002830182611f5f565b611767600383016000611f5f565b60048201600090555050505092915050565b600080516020612b49833981519152611791816119f9565b600085815260ca602090815260408083208784529091528120805491906117b9600184612699565b815481106117c9576117c9612706565b600091825260208083209091015480835260cb825260409283902060040187905582518a8152918201899052918101879052606081018690529091507f8aa521ded3813d116c8e8814b232c4f842dcf88bc533edf4f4e52741138e3bd39060800160405180910390a150505050505050565b60c95460408051808201909152600b81526a4e4f545f5345525649434560a81b60208201526000916001600160a01b0316331461188b5760405162461bcd60e51b81526004016106c49190612553565b50604080516060810182526001600160a01b038581168252602080830186815284519182018552600080835294840191825260d08054600181018255955283517fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb600390960295860180546001600160a01b03191691909416178355517fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcc85015551919290917fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcd9091019061196090826125c9565b505060d0546119729150600190612699565b604080518281526001600160a01b03861660208201529081018490529091507f275b6fbf6c9e793a28d01c614ff750fb316acacb6c25f06fdb8ac72d9dbabb089060600160405180910390a192915050565b60006001600160e01b03198216637965db0b60e01b148061059d57506301ffc9a760e01b6001600160e01b031983161461059d565b610eea8133611ad5565b611a0d8282611b2e565b6000828152609760205260409020610a609082611bb4565b611a2f8282611bc9565b6000828152609760205260409020610a609082611c30565b600054610100900460ff16611ab25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106c4565b611abd600033611a03565b565b6000610dd58383611c45565b600061059d825490565b611adf8282610f05565b610adf57611aec81611c6f565b611af7836020611c81565b604051602001611b08929190612a92565b60408051601f198184030181529082905262461bcd60e51b82526106c491600401612553565b611b388282610f05565b610adf5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b703390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610dd5836001600160a01b038416611e1d565b611bd38282610f05565b15610adf5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610dd5836001600160a01b038416611e6c565b6000826000018281548110611c5c57611c5c612706565b9060005260206000200154905092915050565b606061059d6001600160a01b03831660145b60606000611c90836002612b07565b611c9b906002612b1e565b67ffffffffffffffff811115611cb357611cb3612101565b6040519080825280601f01601f191660200182016040528015611cdd576020820181803683370190505b509050600360fc1b81600081518110611cf857611cf8612706565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d2757611d27612706565b60200101906001600160f81b031916908160001a9053506000611d4b846002612b07565b611d56906001612b1e565b90505b6001811115611dce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d8a57611d8a612706565b1a60f81b828281518110611da057611da0612706565b60200101906001600160f81b031916908160001a90535060049490941c93611dc781612b31565b9050611d59565b508315610dd55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106c4565b6000818152600183016020526040812054611e645750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561059d565b50600061059d565b60008181526001830160205260408120548015611f55576000611e90600183612699565b8554909150600090611ea490600190612699565b9050818114611f09576000866000018281548110611ec457611ec4612706565b9060005260206000200154905080876000018481548110611ee757611ee7612706565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f1a57611f1a612735565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061059d565b600091505061059d565b508054611f6b90612519565b6000825580601f10611f7b575050565b601f016020900490600052602060002090810190610eea91905b80821115611fa95760008155600101611f95565b5090565b600060208284031215611fbf57600080fd5b81356001600160e01b031981168114610dd557600080fd5b60008060408385031215611fea57600080fd5b50508035926020909101359150565b60006020828403121561200b57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061203857612038612012565b9052565b60005b8381101561205757818101518382015260200161203f565b50506000910152565b6000815180845261207881602086016020860161203c565b601f01601f19169290920160200192915050565b6120968186612028565b60018060a01b03841660208201528260408201526080606082015260006120c06080830184612060565b9695505050505050565b80356001600160a01b03811681146120e157600080fd5b919050565b6000602082840312156120f857600080fd5b610dd5826120ca565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561212c57600080fd5b612135846120ca565b925060208401356005811061214957600080fd5b9150604084013567ffffffffffffffff8082111561216657600080fd5b818601915086601f83011261217a57600080fd5b81358181111561218c5761218c612101565b604051601f8201601f19908116603f011681019083821181831017156121b4576121b4612101565b816040528281528960208487010111156121cd57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60018060a01b03841681528260208201526060604082015260006122166060830184612060565b95945050505050565b85815284602082015260a06040820152600061223e60a0830186612060565b82810360608401526122508186612060565b9150508260808301529695505050505050565b6000806040838503121561227657600080fd5b82359150612286602084016120ca565b90509250929050565b6000806000806000608086880312156122a757600080fd5b6122b0866120ca565b94506020860135600481106122c457600080fd5b935060408601359250606086013567ffffffffffffffff808211156122e857600080fd5b818801915088601f8301126122fc57600080fd5b81358181111561230b57600080fd5b89602082850101111561231d57600080fd5b9699959850939650602001949392505050565b6000806020838503121561234357600080fd5b823567ffffffffffffffff8082111561235b57600080fd5b818501915085601f83011261236f57600080fd5b81358181111561237e57600080fd5b8660208260051b850101111561239357600080fd5b60209290920196919550909350505050565b6005811061203857612038612012565b6001600160a01b03841681526123ce60208201846123a5565b6060604082015260006122166060830184612060565b6020810161059d82846123a5565b60008060006060848603121561240757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561243057600080fd5b813567ffffffffffffffff81111561244757600080fd5b820160a08185031215610dd557600080fd5b6020815281516020820152602082015160408201526000604083015160a0606084015261248960c0840182612060565b90506060840151601f198483030160808501526124a68282612060565b915050608084015160a08401528091505092915050565b600080600080608085870312156124d357600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561250257600080fd5b61250b836120ca565b946020939093013593505050565b600181811c9082168061252d57607f821691505b60208210810361254d57634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000610dd56020830184612060565b601f821115610a6057600081815260208120601f850160051c8101602086101561258d5750805b601f850160051c820191505b818110156125ac57828155600101612599565b505050505050565b600019600383901b1c191660019190911b1790565b815167ffffffffffffffff8111156125e3576125e3612101565b6125f7816125f18454612519565b84612566565b602080601f83116001811461262657600084156126145750858301515b61261e85826125b4565b8655506125ac565b600085815260208120601f198616915b8281101561265557888601518255948401946001909101908401612636565b50858210156126735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8181038181111561059d5761059d612683565b8381526001600160a01b0383166020820152606081016126cf60408301846123a5565b949350505050565b848152608081016126eb6020830186612028565b6001600160a01b039390931660408201526060015292915050565b634e487b7160e01b600052603260045260246000fd5b60006001820161272e5761272e612683565b5060010190565b634e487b7160e01b600052603160045260246000fd5b8381528260208201526000825161276981604085016020870161203c565b91909101604001949350505050565b6000808335601e1984360301811261278f57600080fd5b83018035915067ffffffffffffffff8211156127aa57600080fd5b6020019150368190038213156127bf57600080fd5b9250929050565b84815283602082015281836040830137600091016040019081529392505050565b67ffffffffffffffff8311156127ff576127ff612101565b6128138361280d8354612519565b83612566565b6000601f841160018114612841576000851561282f5750838201355b61283986826125b4565b84555061289b565b600083815260209020601f19861690835b828110156128725786850135825560209485019460019092019101612852565b508682101561288f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81358155600160208084013582840155600283016128c36040860186612778565b67ffffffffffffffff8111156128db576128db612101565b6128ef816128e98554612519565b85612566565b6000601f82116001811461291d576000831561290b5750838201355b61291584826125b4565b865550612972565b600085815260209020601f19841690835b8281101561294b578685013582559388019390890190880161292e565b50848210156129685760001960f88660031b161c19848701351681555b50508683881b0185555b505050505050506129866060830183612778565b6129948183600386016127e7565b5050608082013560048201555050565b6000808335601e198436030181126129bb57600080fd5b830160208101925035905067ffffffffffffffff8111156129db57600080fd5b8036038213156127bf57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8281526040602082015281356040820152602082013560608201526000612a3d60408401846129a4565b60a06080850152612a5260e0850182846129ea565b915050612a6260608501856129a4565b848303603f190160a0860152612a798382846129ea565b92505050608084013560c0840152809150509392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612aca81601785016020880161203c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612afb81602884016020880161203c565b01602801949350505050565b808202811582820484141761059d5761059d612683565b8082018082111561059d5761059d612683565b600081612b4057612b40612683565b50600019019056fe0482b95699990ff052aaeda01e4b518e6066bb6d6932719cd6a7bf74a2fb5e81a2646970667358221220ecacfc2c5cdf3c08848f04ccfe57a536457b927dc3a9e006cc204c69a0a6eac064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638129fc1c1161011a578063d247616c116100ad578063e79d59301161007c578063e79d593014610516578063e7fce55f1461051f578063ee1019d414610532578063f05fdfa614610552578063f4be93691461056557600080fd5b8063d247616c146104c8578063d547741f146104db578063d598d4c9146104ee578063e2938db51461050157600080fd5b8063b5af090f116100e9578063b5af090f1461047c578063bf8bdac11461048f578063ca15c873146104a2578063ca197b31146104b557600080fd5b80638129fc1c1461042e5780639010d07c1461043657806391d1485414610461578063a217fddf1461047457600080fd5b80632813d19d116101925780634cb1e9e3116101615780634cb1e9e3146103b65780635d9c7cba146103c95780636dcb0cf8146103eb5780636f50aa301461040b57600080fd5b80632813d19d146103575780632f2ff15d1461037b57806336568abe1461039057806346179c58146103a357600080fd5b80631d5033a6116101ce5780631d5033a6146102ca5780631f8b4005146102ff57806323689a0b14610312578063248a9ca31461033457600080fd5b806301ffc9a7146102005780630962c8c4146102285780630b79143014610255578063121f661c14610278575b600080fd5b61021361020e366004611fad565b610578565b60405190151581526020015b60405180910390f35b610213610236366004611fd7565b600091825260ca60209081526040808420928452919052902054151590565b610268610263366004611ff9565b6105a3565b60405161021f949392919061208c565b6102ab6102863660046120e6565b60cf6020526000908152604090205460ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b0390911660208301520161021f565b6102f17fa21b4d8440b478c033018a500413e67ca2910a10ce4992fb2dcba26856a32e8981565b60405190815260200161021f565b6102f161030d366004612117565b610674565b610325610320366004611ff9565b610833565b60405161021f939291906121ef565b6102f1610342366004611ff9565b60009081526065602052604090206001015490565b61036a610365366004611ff9565b6108fc565b60405161021f95949392919061221f565b61038e610389366004612263565b610a3b565b005b61038e61039e366004612263565b610a65565b6102f16103b136600461228f565b610ae3565b61038e6103c4366004612330565b610c86565b6103dc6103d7366004611ff9565b610d04565b60405161021f939291906123b5565b6103fe6103f93660046120e6565b610d4e565b60405161021f91906123e4565b610213610419366004611ff9565b60cd6020526000908152604090205460ff1681565b61038e610ddc565b610449610444366004611fd7565b610eed565b6040516001600160a01b03909116815260200161021f565b61021361046f366004612263565b610f05565b6102f1600081565b61021361048a3660046120e6565b610f30565b61038e61049d3660046120e6565b610f5c565b6102f16104b0366004611ff9565b610f8a565b61038e6104c33660046123f2565b610fa1565b6102f16104d63660046123f2565b611223565b61038e6104e9366004612263565b611261565b60c954610449906001600160a01b031681565b6102f1600080516020612b4983398151915281565b6102f160cc5481565b61038e61052d36600461241e565b611286565b610545610540366004611fd7565b611473565b60405161021f9190612459565b61038e6105603660046124bd565b611779565b6102f16105733660046124ef565b61183b565b60006001600160e01b03198216635a05180f60e01b148061059d575061059d826119c4565b92915050565b60d181815481106105b357600080fd5b600091825260209091206003909102018054600182015460028301805460ff841695506101009093046001600160a01b03169391926105f190612519565b80601f016020809104026020016040519081016040528092919081815260200182805461061d90612519565b801561066a5780601f1061063f5761010080835404028352916020019161066a565b820191906000526020600020905b81548152906001019060200180831161064d57829003601f168201915b5050505050905084565b60c95460408051808201909152600b81526a4e4f545f5345525649434560a81b60208201526000916001600160a01b031633146106cd5760405162461bcd60e51b81526004016106c49190612553565b60405180910390fd5b5060ce6040518060600160405280866001600160a01b031681526020018560048111156106fc576106fc612012565b815260209081018590528254600181018455600093845292819020825160029094020180546001600160a01b039094166001600160a01b031985168117825591830151929390929183916001600160a81b03191617600160a01b83600481111561076857610768612012565b02179055506040820151600182019061078190826125c9565b505060ce546107939150600190612699565b604080518082018252600181526001600160a01b038381166020808401918252898316600090815260cf9091528490209251835491516001600160a81b0319909216901515610100600160a81b031916176101009190921602179055519091507f30ae76c641f7b77628da0dd91b34591e5b1dc7422220e5eb1080af2adfa142ef90610824908390879087906126ac565b60405180910390a19392505050565b60d0818154811061084357600080fd5b60009182526020909120600390910201805460018201546002830180546001600160a01b03909316945090929161087990612519565b80601f01602080910402602001604051908101604052809291908181526020018280546108a590612519565b80156108f25780601f106108c7576101008083540402835291602001916108f2565b820191906000526020600020905b8154815290600101906020018083116108d557829003601f168201915b5050505050905083565b60cb602052600090815260409020805460018201546002830180549293919261092490612519565b80601f016020809104026020016040519081016040528092919081815260200182805461095090612519565b801561099d5780601f106109725761010080835404028352916020019161099d565b820191906000526020600020905b81548152906001019060200180831161098057829003601f168201915b5050505050908060030180546109b290612519565b80601f01602080910402602001604051908101604052809291908181526020018280546109de90612519565b8015610a2b5780601f10610a0057610100808354040283529160200191610a2b565b820191906000526020600020905b815481529060010190602001808311610a0e57829003601f168201915b5050505050908060040154905085565b600082815260656020526040902060010154610a56816119f9565b610a608383611a03565b505050565b6001600160a01b0381163314610ad55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106c4565b610adf8282611a25565b5050565b60c95460408051808201909152600b81526a4e4f545f5345525649434560a81b60208201526000916001600160a01b03163314610b335760405162461bcd60e51b81526004016106c49190612553565b5060d16040518060800160405280876003811115610b5357610b53612012565b8152602001886001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050835460018181018655948252602090912083516003928302909101805494959094919350849260ff19909216918490811115610be357610be3612012565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600182015560608201516002820190610c2c90826125c9565b505060d154610c3e9150600190612699565b90507fcd6a83e26b7223cb3ee566d6b45eb10629b98ee7442e79f67db857b62247eb4381868887604051610c7594939291906126d7565b60405180910390a195945050505050565b6000610c91816119f9565b60005b82811015610cfe57610cec7fa21b4d8440b478c033018a500413e67ca2910a10ce4992fb2dcba26856a32e89858584818110610cd257610cd2612706565b9050602002016020810190610ce791906120e6565b611a03565b80610cf68161271c565b915050610c94565b50505050565b60ce8181548110610d1457600080fd5b6000918252602090912060029091020180546001820180546001600160a01b0383169450600160a01b90920460ff16929161087990612519565b6001600160a01b03808216600090815260cf6020908152604080832081518083019092525460ff81161515808352610100909104909416918101919091529091610d99576000610dd5565b60ce81602001516001600160a01b031681548110610db957610db9612706565b6000918252602090912060029091020154600160a01b900460ff165b9392505050565b600054610100900460ff1615808015610dfc5750600054600160ff909116105b80610e165750303b158015610e16575060005460ff166001145b610e795760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106c4565b6000805460ff191660011790558015610e9c576000805461ff0019166101001790555b610ea4611a47565b8015610eea576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6000828152609760205260408120610dd59083611abf565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061059d7fa21b4d8440b478c033018a500413e67ca2910a10ce4992fb2dcba26856a32e8983610f05565b6000610f67816119f9565b5060c980546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260976020526040812061059d90611acb565b600080516020612b49833981519152610fb9816119f9565b600084815260ca602090815260408083208684529091528120805484908110610fe457610fe4612706565b600091825260208083209091015487835260ca825260408084208885529092529082205490925061101790600190612699565b600087815260ca6020908152604080832089845290915290208054919250908290811061104657611046612706565b600091825260208083209091015488835260ca82526040808420898552909252912080548690811061107a5761107a612706565b600091825260208083209091019290925587815260ca82526040808220888352909252208054806110ad576110ad612735565b60019003818190600052602060002001600090559055600060cb600084815260200190815260200160002060020180546110e690612519565b80601f016020809104026020016040519081016040528092919081815260200182805461111290612519565b801561115f5780601f106111345761010080835404028352916020019161115f565b820191906000526020600020905b81548152906001019060200180831161114257829003601f168201915b505050600086815260cb6020526040812081815560018101829055939450915061118e90506002830182611f5f565b61119c600383016000611f5f565b6004820160009055505060008787836040516020016111bd9392919061274b565b60408051601f198184030181528282528051602091820120600081815260cd8352839020805460ff1916905589845291519193507f2becd600b42eb771bee46672694b5a9e9d0acb6638d9c9a5e39bcc70954b7416928290030190a15050505050505050565b60ca602052826000526040600020602052816000526040600020818154811061124b57600080fd5b9060005260206000200160009250925050505481565b60008281526065602052604090206001015461127c816119f9565b610a608383611a25565b600080516020612b4983398151915261129e816119f9565b8135158015906112bb57506112b66040830183612778565b151590505b80156112d457506112cf6060830183612778565b151590505b80156112e4575060008260200135115b6040518060400160405280600a81526020016956414c55455f5a45524f60b01b815250906113255760405162461bcd60e51b81526004016106c49190612553565b5060008235602084013561133c6040860186612778565b60405160200161134f94939291906127c6565b60408051601f198184030181528282528051602091820120600081815260cd835283902054848401909352600b84526a24a72b20a624a22fa2a4a760a91b91840191909152925060ff16156113b75760405162461bcd60e51b81526004016106c49190612553565b50600081815260cd60205260408120805460ff1916600117905560cc805482906113e09061271c565b9182905550600081815260cb60205260409020909150849061140282826128a2565b50508335600090815260ca60209081526040808320828801358452825280832080546001810182559084529190922001829055517f45baac83b696783d108ca0f3c55b9ab33e858c32a0bc218fde16792113ebc763906114659083908790612a13565b60405180910390a150505050565b6114a56040518060a0016040528060008152602001600081526020016060815260200160608152602001600081525090565b60c95460408051808201909152600b81526a4e4f545f5345525649434560a81b6020820152906001600160a01b031633146114f35760405162461bcd60e51b81526004016106c49190612553565b50600083815260ca60209081526040808320858452825291829020548251808401909352600a8352694e4f5f434f4d50414e5960b01b91830191909152908161154f5760405162461bcd60e51b81526004016106c49190612553565b50600084815260ca602090815260408083208684529091528120611574600184612699565b8154811061158457611584612706565b600091825260208083209091015487835260ca825260408084208885529092529120805491925090806115b9576115b9612735565b6001900381819060005260206000200160009055905560cb60008281526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201805461161190612519565b80601f016020809104026020016040519081016040528092919081815260200182805461163d90612519565b801561168a5780601f1061165f5761010080835404028352916020019161168a565b820191906000526020600020905b81548152906001019060200180831161166d57829003601f168201915b505050505081526020016003820180546116a390612519565b80601f01602080910402602001604051908101604052809291908181526020018280546116cf90612519565b801561171c5780601f106116f15761010080835404028352916020019161171c565b820191906000526020600020905b8154815290600101906020018083116116ff57829003601f168201915b505050918352505060049190910154602091820152600083815260cb90915260408120818155600181018290559194506117596002830182611f5f565b611767600383016000611f5f565b60048201600090555050505092915050565b600080516020612b49833981519152611791816119f9565b600085815260ca602090815260408083208784529091528120805491906117b9600184612699565b815481106117c9576117c9612706565b600091825260208083209091015480835260cb825260409283902060040187905582518a8152918201899052918101879052606081018690529091507f8aa521ded3813d116c8e8814b232c4f842dcf88bc533edf4f4e52741138e3bd39060800160405180910390a150505050505050565b60c95460408051808201909152600b81526a4e4f545f5345525649434560a81b60208201526000916001600160a01b0316331461188b5760405162461bcd60e51b81526004016106c49190612553565b50604080516060810182526001600160a01b038581168252602080830186815284519182018552600080835294840191825260d08054600181018255955283517fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb600390960295860180546001600160a01b03191691909416178355517fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcc85015551919290917fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcd9091019061196090826125c9565b505060d0546119729150600190612699565b604080518281526001600160a01b03861660208201529081018490529091507f275b6fbf6c9e793a28d01c614ff750fb316acacb6c25f06fdb8ac72d9dbabb089060600160405180910390a192915050565b60006001600160e01b03198216637965db0b60e01b148061059d57506301ffc9a760e01b6001600160e01b031983161461059d565b610eea8133611ad5565b611a0d8282611b2e565b6000828152609760205260409020610a609082611bb4565b611a2f8282611bc9565b6000828152609760205260409020610a609082611c30565b600054610100900460ff16611ab25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106c4565b611abd600033611a03565b565b6000610dd58383611c45565b600061059d825490565b611adf8282610f05565b610adf57611aec81611c6f565b611af7836020611c81565b604051602001611b08929190612a92565b60408051601f198184030181529082905262461bcd60e51b82526106c491600401612553565b611b388282610f05565b610adf5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b703390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610dd5836001600160a01b038416611e1d565b611bd38282610f05565b15610adf5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610dd5836001600160a01b038416611e6c565b6000826000018281548110611c5c57611c5c612706565b9060005260206000200154905092915050565b606061059d6001600160a01b03831660145b60606000611c90836002612b07565b611c9b906002612b1e565b67ffffffffffffffff811115611cb357611cb3612101565b6040519080825280601f01601f191660200182016040528015611cdd576020820181803683370190505b509050600360fc1b81600081518110611cf857611cf8612706565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d2757611d27612706565b60200101906001600160f81b031916908160001a9053506000611d4b846002612b07565b611d56906001612b1e565b90505b6001811115611dce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d8a57611d8a612706565b1a60f81b828281518110611da057611da0612706565b60200101906001600160f81b031916908160001a90535060049490941c93611dc781612b31565b9050611d59565b508315610dd55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106c4565b6000818152600183016020526040812054611e645750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561059d565b50600061059d565b60008181526001830160205260408120548015611f55576000611e90600183612699565b8554909150600090611ea490600190612699565b9050818114611f09576000866000018281548110611ec457611ec4612706565b9060005260206000200154905080876000018481548110611ee757611ee7612706565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f1a57611f1a612735565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061059d565b600091505061059d565b508054611f6b90612519565b6000825580601f10611f7b575050565b601f016020900490600052602060002090810190610eea91905b80821115611fa95760008155600101611f95565b5090565b600060208284031215611fbf57600080fd5b81356001600160e01b031981168114610dd557600080fd5b60008060408385031215611fea57600080fd5b50508035926020909101359150565b60006020828403121561200b57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061203857612038612012565b9052565b60005b8381101561205757818101518382015260200161203f565b50506000910152565b6000815180845261207881602086016020860161203c565b601f01601f19169290920160200192915050565b6120968186612028565b60018060a01b03841660208201528260408201526080606082015260006120c06080830184612060565b9695505050505050565b80356001600160a01b03811681146120e157600080fd5b919050565b6000602082840312156120f857600080fd5b610dd5826120ca565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561212c57600080fd5b612135846120ca565b925060208401356005811061214957600080fd5b9150604084013567ffffffffffffffff8082111561216657600080fd5b818601915086601f83011261217a57600080fd5b81358181111561218c5761218c612101565b604051601f8201601f19908116603f011681019083821181831017156121b4576121b4612101565b816040528281528960208487010111156121cd57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60018060a01b03841681528260208201526060604082015260006122166060830184612060565b95945050505050565b85815284602082015260a06040820152600061223e60a0830186612060565b82810360608401526122508186612060565b9150508260808301529695505050505050565b6000806040838503121561227657600080fd5b82359150612286602084016120ca565b90509250929050565b6000806000806000608086880312156122a757600080fd5b6122b0866120ca565b94506020860135600481106122c457600080fd5b935060408601359250606086013567ffffffffffffffff808211156122e857600080fd5b818801915088601f8301126122fc57600080fd5b81358181111561230b57600080fd5b89602082850101111561231d57600080fd5b9699959850939650602001949392505050565b6000806020838503121561234357600080fd5b823567ffffffffffffffff8082111561235b57600080fd5b818501915085601f83011261236f57600080fd5b81358181111561237e57600080fd5b8660208260051b850101111561239357600080fd5b60209290920196919550909350505050565b6005811061203857612038612012565b6001600160a01b03841681526123ce60208201846123a5565b6060604082015260006122166060830184612060565b6020810161059d82846123a5565b60008060006060848603121561240757600080fd5b505081359360208301359350604090920135919050565b60006020828403121561243057600080fd5b813567ffffffffffffffff81111561244757600080fd5b820160a08185031215610dd557600080fd5b6020815281516020820152602082015160408201526000604083015160a0606084015261248960c0840182612060565b90506060840151601f198483030160808501526124a68282612060565b915050608084015160a08401528091505092915050565b600080600080608085870312156124d357600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561250257600080fd5b61250b836120ca565b946020939093013593505050565b600181811c9082168061252d57607f821691505b60208210810361254d57634e487b7160e01b600052602260045260246000fd5b50919050565b602081526000610dd56020830184612060565b601f821115610a6057600081815260208120601f850160051c8101602086101561258d5750805b601f850160051c820191505b818110156125ac57828155600101612599565b505050505050565b600019600383901b1c191660019190911b1790565b815167ffffffffffffffff8111156125e3576125e3612101565b6125f7816125f18454612519565b84612566565b602080601f83116001811461262657600084156126145750858301515b61261e85826125b4565b8655506125ac565b600085815260208120601f198616915b8281101561265557888601518255948401946001909101908401612636565b50858210156126735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8181038181111561059d5761059d612683565b8381526001600160a01b0383166020820152606081016126cf60408301846123a5565b949350505050565b848152608081016126eb6020830186612028565b6001600160a01b039390931660408201526060015292915050565b634e487b7160e01b600052603260045260246000fd5b60006001820161272e5761272e612683565b5060010190565b634e487b7160e01b600052603160045260246000fd5b8381528260208201526000825161276981604085016020870161203c565b91909101604001949350505050565b6000808335601e1984360301811261278f57600080fd5b83018035915067ffffffffffffffff8211156127aa57600080fd5b6020019150368190038213156127bf57600080fd5b9250929050565b84815283602082015281836040830137600091016040019081529392505050565b67ffffffffffffffff8311156127ff576127ff612101565b6128138361280d8354612519565b83612566565b6000601f841160018114612841576000851561282f5750838201355b61283986826125b4565b84555061289b565b600083815260209020601f19861690835b828110156128725786850135825560209485019460019092019101612852565b508682101561288f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81358155600160208084013582840155600283016128c36040860186612778565b67ffffffffffffffff8111156128db576128db612101565b6128ef816128e98554612519565b85612566565b6000601f82116001811461291d576000831561290b5750838201355b61291584826125b4565b865550612972565b600085815260209020601f19841690835b8281101561294b578685013582559388019390890190880161292e565b50848210156129685760001960f88660031b161c19848701351681555b50508683881b0185555b505050505050506129866060830183612778565b6129948183600386016127e7565b5050608082013560048201555050565b6000808335601e198436030181126129bb57600080fd5b830160208101925035905067ffffffffffffffff8111156129db57600080fd5b8036038213156127bf57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8281526040602082015281356040820152602082013560608201526000612a3d60408401846129a4565b60a06080850152612a5260e0850182846129ea565b915050612a6260608501856129a4565b848303603f190160a0860152612a798382846129ea565b92505050608084013560c0840152809150509392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612aca81601785016020880161203c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612afb81602884016020880161203c565b01602801949350505050565b808202811582820484141761059d5761059d612683565b8082018082111561059d5761059d612683565b600081612b4057612b40612683565b50600019019056fe0482b95699990ff052aaeda01e4b518e6066bb6d6932719cd6a7bf74a2fb5e81a2646970667358221220ecacfc2c5cdf3c08848f04ccfe57a536457b927dc3a9e006cc204c69a0a6eac064736f6c63430008110033",
  "devdoc": {
    "details": "Protocol registry",
    "kind": "dev",
    "methods": {
      "addContractRecord(address,uint8,string)": {
        "details": "Add contract record",
        "params": {
          "addr": "Contract address",
          "contractType": "Contract type"
        },
        "returns": {
          "index": "Record index"
        }
      },
      "addEventRecord(address,uint8,uint256,string)": {
        "details": "Add event record",
        "params": {
          "eventType": "Event type",
          "metaHash": "Hash value of event metadata",
          "pool": "Pool address",
          "proposalId": "Proposal ID"
        },
        "returns": {
          "index": "Record index"
        }
      },
      "addProposalRecord(address,uint256)": {
        "details": "Add proposal record",
        "params": {
          "pool": "Pool address",
          "proposalId": "Proposal ID"
        },
        "returns": {
          "index": "Record index"
        }
      },
      "companyAvailable(uint256,uint256)": {
        "details": "Check if pool available",
        "params": {
          "entityType": "Entity type",
          "jurisdiction": "Jurisdiction"
        },
        "returns": {
          "_0": "Flag if company is available"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createCompany((uint256,uint256,string,string,uint256))": {
        "details": "Create company record",
        "params": {
          "info": "Company Info"
        }
      },
      "deleteCompany(uint256,uint256,uint256)": {
        "details": "Delete queue record",
        "params": {
          "entityType": "Entity type",
          "id": "Queue index",
          "jurisdiction": "Jurisdiction"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize()": {
        "details": "Initializer"
      },
      "isTokenWhitelisted(address)": {
        "details": "Check if token is whitelisted",
        "params": {
          "token": "Token"
        },
        "returns": {
          "_0": "Is token whitelisted"
        }
      },
      "lockCompany(uint256,uint256)": {
        "details": "Lock company record",
        "returns": {
          "info": "Company info"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "typeOf(address)": {
        "params": {
          "addr": "Address of contract"
        },
        "returns": {
          "_0": "Contract type"
        }
      },
      "updateCompanyFee(uint256,uint256,uint256,uint256)": {
        "details": "Update company fee",
        "params": {
          "entityType": "Entity type",
          "fee": "Fee to update",
          "id": "Queue index",
          "jurisdiction": "Jurisdiction"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "typeOf(address)": {
        "notice": "Returns type of given contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1184,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1187,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4034,
        "contract": "contracts/Registry.sol:Registry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4898,
        "contract": "contracts/Registry.sol:Registry",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/Registry.sol:Registry",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)7643_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/Registry.sol:Registry",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18447,
        "contract": "contracts/Registry.sol:Registry",
        "label": "service",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 17851,
        "contract": "contracts/Registry.sol:Registry",
        "label": "queue",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 17857,
        "contract": "contracts/Registry.sol:Registry",
        "label": "companies",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(CompanyInfo)17551_storage)"
      },
      {
        "astId": 17860,
        "contract": "contracts/Registry.sol:Registry",
        "label": "lastCompanyIndex",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 17865,
        "contract": "contracts/Registry.sol:Registry",
        "label": "companyExists",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 18227,
        "contract": "contracts/Registry.sol:Registry",
        "label": "contractRecords",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_struct(ContractInfo)17583_storage)dyn_storage"
      },
      {
        "astId": 18238,
        "contract": "contracts/Registry.sol:Registry",
        "label": "indexOfContract",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_struct(ContractIndex)18232_storage)"
      },
      {
        "astId": 18243,
        "contract": "contracts/Registry.sol:Registry",
        "label": "proposalRecords",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_struct(ProposalInfo)17590_storage)dyn_storage"
      },
      {
        "astId": 18248,
        "contract": "contracts/Registry.sol:Registry",
        "label": "events",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_struct(Event)17600_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContractInfo)17583_storage)dyn_storage": {
        "base": "t_struct(ContractInfo)17583_storage",
        "encoding": "dynamic_array",
        "label": "struct IRecordsRegistry.ContractInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Event)17600_storage)dyn_storage": {
        "base": "t_struct(Event)17600_storage",
        "encoding": "dynamic_array",
        "label": "struct IRecordsRegistry.Event[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProposalInfo)17590_storage)dyn_storage": {
        "base": "t_struct(ProposalInfo)17590_storage",
        "encoding": "dynamic_array",
        "label": "struct IRecordsRegistry.ProposalInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ContractType)17570": {
        "encoding": "inplace",
        "label": "enum IRecordsRegistry.ContractType",
        "numberOfBytes": "1"
      },
      "t_enum(EventType)17575": {
        "encoding": "inplace",
        "label": "enum IRecordsRegistry.EventType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ContractIndex)18232_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RecordsRegistry.ContractIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractIndex)18232_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)7643_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7643_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_struct(CompanyInfo)17551_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICompaniesRegistry.CompanyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CompanyInfo)17551_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7643_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 7642,
            "contract": "contracts/Registry.sol:Registry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7328_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CompanyInfo)17551_storage": {
        "encoding": "inplace",
        "label": "struct ICompaniesRegistry.CompanyInfo",
        "members": [
          {
            "astId": 17542,
            "contract": "contracts/Registry.sol:Registry",
            "label": "jurisdiction",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17544,
            "contract": "contracts/Registry.sol:Registry",
            "label": "entityType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17546,
            "contract": "contracts/Registry.sol:Registry",
            "label": "ein",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 17548,
            "contract": "contracts/Registry.sol:Registry",
            "label": "dateOfIncorporation",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 17550,
            "contract": "contracts/Registry.sol:Registry",
            "label": "fee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(ContractIndex)18232_storage": {
        "encoding": "inplace",
        "label": "struct RecordsRegistry.ContractIndex",
        "members": [
          {
            "astId": 18229,
            "contract": "contracts/Registry.sol:Registry",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 18231,
            "contract": "contracts/Registry.sol:Registry",
            "label": "index",
            "offset": 1,
            "slot": "0",
            "type": "t_uint160"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ContractInfo)17583_storage": {
        "encoding": "inplace",
        "label": "struct IRecordsRegistry.ContractInfo",
        "members": [
          {
            "astId": 17577,
            "contract": "contracts/Registry.sol:Registry",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17580,
            "contract": "contracts/Registry.sol:Registry",
            "label": "contractType",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(ContractType)17570"
          },
          {
            "astId": 17582,
            "contract": "contracts/Registry.sol:Registry",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Event)17600_storage": {
        "encoding": "inplace",
        "label": "struct IRecordsRegistry.Event",
        "members": [
          {
            "astId": 17593,
            "contract": "contracts/Registry.sol:Registry",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(EventType)17575"
          },
          {
            "astId": 17595,
            "contract": "contracts/Registry.sol:Registry",
            "label": "pool",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17597,
            "contract": "contracts/Registry.sol:Registry",
            "label": "proposalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17599,
            "contract": "contracts/Registry.sol:Registry",
            "label": "metaHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalInfo)17590_storage": {
        "encoding": "inplace",
        "label": "struct IRecordsRegistry.ProposalInfo",
        "members": [
          {
            "astId": 17585,
            "contract": "contracts/Registry.sol:Registry",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17587,
            "contract": "contracts/Registry.sol:Registry",
            "label": "proposalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17589,
            "contract": "contracts/Registry.sol:Registry",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/Registry.sol:Registry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/Registry.sol:Registry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7328_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 7323,
            "contract": "contracts/Registry.sol:Registry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7327,
            "contract": "contracts/Registry.sol:Registry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}