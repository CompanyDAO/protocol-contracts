{
  "address": "0xBFfEF7371953353250781cA3544D1c7fDf873bA5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenFee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolTokenFeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Purchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundValue",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPurchasedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalVestedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardcap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "softcap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPurchase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPurchase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTVL",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "unitOfAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockupDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupTVL",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IToken",
          "name": "_token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "userWhitelist",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "_info",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isProtocolTokenFeeClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUserWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupTVLReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maxPurchaseOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchaseOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLockupTVLReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setVestingTVLReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum ITGE.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPurchased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferUnlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingTVLReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b5e43ff32b1779f4bee335dedbc38df364fb9daab122874129aaceaaac3683d",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0xBFfEF7371953353250781cA3544D1c7fDf873bA5",
    "transactionIndex": 58,
    "gasUsed": "2710464",
    "logsBloom": "0x
    "blockHash": "0x5fce3e230d86df0fd7113c6ce9e48886c29475f73611d60f25195202b37cb6d4",
    "transactionHash": "0x2b5e43ff32b1779f4bee335dedbc38df364fb9daab122874129aaceaaac3683d",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 8339627,
        "transactionHash": "0x2b5e43ff32b1779f4bee335dedbc38df364fb9daab122874129aaceaaac3683d",
        "address": "0xBFfEF7371953353250781cA3544D1c7fDf873bA5",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 137,
        "blockHash": "0x5fce3e230d86df0fd7113c6ce9e48886c29475f73611d60f25195202b37cb6d4"
      }
    ],
    "blockNumber": 8339627,
    "cumulativeGasUsed": "9621799",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "eb381282f548b11e208d3b7fcd990bbb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolTokenFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundValue\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPurchasedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVestedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IToken\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtocolTokenFeeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupTVLReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxPurchaseOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLockupTVLReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setVestingTVLReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum ITGE.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTVLReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Claimed(address,uint256)\":{\"details\":\"Event emitted on token claim.\",\"params\":{\"account\":\"Claimer address\",\"amount\":\"Amount of claimed tokens\"}},\"FundsTransferred(uint256)\":{\"details\":\"Event emitted on transfer funds to pool.\",\"params\":{\"amount\":\"Amount of transferred tokens/ETH\"}},\"ProtocolTokenFeeClaimed(address,uint256)\":{\"details\":\"Event emitted on claim of protocol token fee.\",\"params\":{\"token\":\"token\",\"tokenFee\":\"amount of tokens\"}},\"Purchased(address,uint256)\":{\"details\":\"Event emitted on token purchase.\",\"params\":{\"amount\":\"amount of tokens\",\"buyer\":\"buyer\"}},\"Redeemed(address,uint256)\":{\"details\":\"Event emitted on token claim.\",\"params\":{\"account\":\"Redeemer address\",\"refundValue\":\"Refund value\"}}},\"kind\":\"dev\",\"methods\":{\"claim()\":{\"details\":\"Claim vested tokens\"},\"claimAvailable()\":{\"details\":\"Is claim available for vested tokens.\",\"returns\":{\"_0\":\"Is claim available\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getTotalPurchasedValue()\":{\"details\":\"Get total value of all purchased tokens\",\"returns\":{\"_0\":\"Total value\"}},\"getTotalVestedValue()\":{\"details\":\"Get total value of all vestied tokens\",\"returns\":{\"_0\":\"Total value\"}},\"getUserWhitelist()\":{\"details\":\"Get userwhitelist info\",\"returns\":{\"_0\":\"User whitelist\"}},\"initialize(address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address,uint256,uint256))\":{\"details\":\"Constructor function, can only be called once\",\"params\":{\"_info\":\"TGE parameters\",\"_token\":\"pool's token\"}},\"lockedBalanceOf(address)\":{\"details\":\"Locked balance of account in current TGE\",\"params\":{\"account\":\"Account address\"},\"returns\":{\"_0\":\"Locked balance\"}},\"maxPurchaseOf(address)\":{\"details\":\"How many tokens an address can purchase.\",\"returns\":{\"_0\":\"Amount of tokens\"}},\"purchase(uint256)\":{\"details\":\"Purchase pool's tokens during TGE\",\"params\":{\"amount\":\"amount of tokens in wei (10**18 = 1 token)\"}},\"redeem()\":{\"details\":\"Return purchased tokens and get back tokens paid\"},\"state()\":{\"details\":\"Returns TGE's state.\",\"returns\":{\"_0\":\"State\"}},\"transferFunds()\":{\"details\":\"Transfer proceeds from TGE to pool's treasury. Claim protocol fee.\"},\"transferUnlocked()\":{\"details\":\"Is transfer available for lockup preference tokens.\",\"returns\":{\"_0\":\"Is transfer available\"}}},\"stateVariables\":{\"createdAt\":{\"details\":\"Block of TGE's creation\"},\"info\":{\"details\":\"TGE info struct\"},\"isProtocolTokenFeeClaimed\":{\"details\":\"Protocol token fee is a percentage of tokens sold during TGE. Returns true if fee was claimed by the governing DAO.\"},\"isUserWhitelisted\":{\"details\":\"Mapping of user's address to whitelist status\"},\"lockupTVLReached\":{\"details\":\"Is lockup TVL reached. Users can claim their tokens only if lockup TVL was reached.\"},\"purchaseOf\":{\"details\":\"Mapping of an address to total amount of tokens purchased during TGE\"},\"token\":{\"details\":\"Pool's ERC20 token\"},\"totalPurchased\":{\"details\":\"Total amount of tokens purchased during TGE\"},\"totalVested\":{\"details\":\"Total amount of tokens vested\"},\"vestedBalanceOf\":{\"details\":\"Mapping of addresses to total amounts of tokens vested\"},\"vestingTVLReached\":{\"details\":\"Is vesting TVL reached. Users can claim their tokens only if vesting TVL was reached.\"}},\"title\":\"Token Generation Event\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TGE.sol\":\"TGE\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/TGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\n\\n/// @title Token Generation Event\\ncontract TGE is Initializable, ReentrancyGuardUpgradeable, ITGE {\\n    using AddressUpgradeable for address payable;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // CONSTANTS\\n\\n    /// @notice Denominator for shares (such as thresholds)\\n    uint256 private constant DENOM = 100 * 10**4;\\n\\n    /// @dev Pool's ERC20 token\\n    IToken public token;\\n\\n    /// @dev TGE info struct\\n    TGEInfo public info;\\n\\n    /// @dev Mapping of user's address to whitelist status\\n    mapping(address => bool) public isUserWhitelisted;\\n\\n    /// @dev Block of TGE's creation\\n    uint256 public createdAt;\\n\\n    /// @dev Mapping of an address to total amount of tokens purchased during TGE\\n    mapping(address => uint256) public purchaseOf;\\n\\n    /// @dev Total amount of tokens purchased during TGE\\n    uint256 public totalPurchased;\\n\\n    /// @dev Is vesting TVL reached. Users can claim their tokens only if vesting TVL was reached.\\n    bool public vestingTVLReached;\\n\\n    /// @dev Is lockup TVL reached. Users can claim their tokens only if lockup TVL was reached.\\n    bool public lockupTVLReached;\\n\\n    /// @dev Mapping of addresses to total amounts of tokens vested\\n    mapping(address => uint256) public vestedBalanceOf;\\n\\n    /// @dev Total amount of tokens vested\\n    uint256 public totalVested;\\n\\n    /// @dev Protocol token fee is a percentage of tokens sold during TGE. Returns true if fee was claimed by the governing DAO.\\n    bool public isProtocolTokenFeeClaimed;\\n\\n    // EVENTS\\n\\n    /**\\n     * @dev Event emitted on token purchase.\\n     * @param buyer buyer\\n     * @param amount amount of tokens\\n     */\\n    event Purchased(address buyer, uint256 amount);\\n\\n    /**\\n     * @dev Event emitted on claim of protocol token fee.\\n     * @param token token\\n     * @param tokenFee amount of tokens\\n     */\\n    event ProtocolTokenFeeClaimed(address token, uint256 tokenFee);\\n\\n    /**\\n     * @dev Event emitted on token claim.\\n     * @param account Redeemer address\\n     * @param refundValue Refund value\\n     */\\n    event Redeemed(address account, uint256 refundValue);\\n\\n    /**\\n     * @dev Event emitted on token claim.\\n     * @param account Claimer address\\n     * @param amount Amount of claimed tokens\\n     */\\n    event Claimed(address account, uint256 amount);\\n\\n    /**\\n     * @dev Event emitted on transfer funds to pool.\\n     * @param amount Amount of transferred tokens/ETH\\n     */\\n    event FundsTransferred(uint256 amount);\\n\\n    // INITIALIZER AND CONSTRUCTOR\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Constructor function, can only be called once\\n     * @param _token pool's token\\n     * @param _info TGE parameters\\n     */\\n    function initialize(IToken _token, TGEInfo calldata _info)\\n        external\\n        initializer\\n    {\\n        __ReentrancyGuard_init();\\n        IService(msg.sender).validateTGEInfo(\\n            _info,\\n            _token.cap(),\\n            _token.totalSupply()\\n        );\\n\\n        token = _token;\\n        info = _info;\\n        vestingTVLReached = (_info.vestingTVL == 0);\\n        lockupTVLReached = (_info.lockupTVL == 0);\\n\\n        for (uint256 i = 0; i < _info.userWhitelist.length; i++) {\\n            isUserWhitelisted[_info.userWhitelist[i]] = true;\\n        }\\n\\n        createdAt = block.number;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev Purchase pool's tokens during TGE\\n     * @param amount amount of tokens in wei (10**18 = 1 token)\\n     */\\n    function purchase(uint256 amount)\\n        external\\n        payable\\n        onlyWhitelistedUser\\n        onlyState(State.Active)\\n        nonReentrant\\n        whenPoolNotPaused\\n    {\\n        address unitOfAccount = info.unitOfAccount;\\n        if (unitOfAccount == address(0)) {\\n            require(\\n                msg.value >= (amount * info.price) / 10**18,\\n                ExceptionsLibrary.INCORRECT_ETH_PASSED\\n            );\\n        } else {\\n            IERC20Upgradeable(unitOfAccount).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                (amount * info.price) / 10**18\\n            );\\n        }\\n\\n        require(\\n            amount >= info.minPurchase,\\n            ExceptionsLibrary.MIN_PURCHASE_UNDERFLOW\\n        );\\n        require(\\n            amount <= maxPurchaseOf(msg.sender),\\n            ExceptionsLibrary.MAX_PURCHASE_OVERFLOW\\n        );\\n\\n        totalPurchased += amount;\\n        purchaseOf[msg.sender] += amount;\\n        uint256 vestedAmount = (amount * info.vestingPercent + (DENOM - 1)) /\\n            DENOM;\\n\\n        IToken _token = token;\\n        if (amount - vestedAmount > 0) {\\n            _token.mint(msg.sender, amount - vestedAmount);\\n        }\\n\\n        _token.mint(address(this), vestedAmount);\\n        vestedBalanceOf[msg.sender] += vestedAmount;\\n        totalVested += vestedAmount;\\n\\n        emit Purchased(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Return purchased tokens and get back tokens paid\\n     */\\n    function redeem()\\n        external\\n        onlyState(State.Failed)\\n        nonReentrant\\n        whenPoolNotPaused\\n    {\\n        // User can't claim more than he bought in this event (in case somebody else has transferred him tokens)\\n        require(\\n            purchaseOf[msg.sender] > 0,\\n            ExceptionsLibrary.ZERO_PURCHASE_AMOUNT\\n        );\\n\\n        uint256 refundAmount = 0;\\n\\n        uint256 vestedBalance = vestedBalanceOf[msg.sender];\\n        if (vestedBalance > 0) {\\n            vestedBalanceOf[msg.sender] = 0;\\n            purchaseOf[msg.sender] -= vestedBalance;\\n            totalVested -= vestedBalance;\\n            refundAmount += vestedBalance;\\n            token.burn(address(this), vestedBalance);\\n        }\\n\\n        uint256 balanceToRedeem = MathUpgradeable.min(\\n            token.balanceOf(msg.sender),\\n            purchaseOf[msg.sender]\\n        );\\n        if (balanceToRedeem > 0) {\\n            purchaseOf[msg.sender] -= balanceToRedeem;\\n            refundAmount += balanceToRedeem;\\n            token.burn(msg.sender, balanceToRedeem);\\n        }\\n\\n        require(refundAmount > 0, ExceptionsLibrary.NOTHING_TO_REDEEM);\\n        uint256 refundValue = (refundAmount * info.price) / 10**18;\\n\\n        if (info.unitOfAccount == address(0)) {\\n            payable(msg.sender).sendValue(refundValue);\\n        } else {\\n            IERC20Upgradeable(info.unitOfAccount).safeTransfer(\\n                msg.sender,\\n                refundValue\\n            );\\n        }\\n\\n        emit Redeemed(msg.sender, refundValue);\\n    }\\n\\n    /**\\n     * @dev Claim vested tokens\\n     */\\n    function claim() external whenPoolNotPaused {\\n        // Check that vested tokens can be claim\\n        require(claimAvailable(), ExceptionsLibrary.CLAIM_NOT_AVAILABLE);\\n\\n        // Check that there is anything to claim\\n        uint256 amountToClaim = vestedBalanceOf[msg.sender];\\n        require(amountToClaim > 0, ExceptionsLibrary.NO_LOCKED_BALANCE);\\n\\n        // Set vested amount to zero\\n        vestedBalanceOf[msg.sender] = 0;\\n        totalVested -= amountToClaim;\\n\\n        // Transfer vested tokens\\n        IERC20Upgradeable(address(token)).safeTransfer(\\n            msg.sender,\\n            amountToClaim\\n        );\\n\\n        // Emit event\\n        emit Claimed(msg.sender, amountToClaim);\\n    }\\n\\n    function setVestingTVLReached() external whenPoolNotPaused onlyManager {\\n        // Check that TVL has not been reached yet\\n        require(!vestingTVLReached, ExceptionsLibrary.VESTING_TVL_REACHED);\\n\\n        // Mark as reached\\n        vestingTVLReached = true;\\n    }\\n\\n    function setLockupTVLReached() external whenPoolNotPaused onlyManager {\\n        // Check that TVL has not been reached yet\\n        require(!lockupTVLReached, ExceptionsLibrary.LOCKUP_TVL_REACHED);\\n\\n        // Mark as reached\\n        lockupTVLReached = true;\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    /**\\n     * @dev Transfer proceeds from TGE to pool's treasury. Claim protocol fee.\\n     */\\n    function transferFunds()\\n        external\\n        onlyState(State.Successful)\\n        whenPoolNotPaused\\n    {\\n        // Return if nothing to transfer\\n        if (totalPurchased == 0) {\\n            return;\\n        }\\n\\n        // Claim protocol fee\\n        _claimProtocolTokenFee();\\n\\n        // Transfer remaining funds to pool\\n        address unitOfAccount = info.unitOfAccount;\\n        address pool = token.pool();\\n        uint256 balance = 0;\\n        if (info.price != 0) {\\n            if (unitOfAccount == address(0)) {\\n                balance = address(this).balance;\\n                payable(pool).sendValue(balance);\\n            } else {\\n                balance = IERC20Upgradeable(unitOfAccount).balanceOf(\\n                    address(this)\\n                );\\n                IERC20Upgradeable(unitOfAccount).safeTransfer(pool, balance);\\n            }\\n        }\\n\\n        // Emit event\\n        emit FundsTransferred(balance);\\n    }\\n\\n    /// @dev Transfers protocol token fee in form of pool's governance tokens to protocol treasury\\n    function _claimProtocolTokenFee() private {\\n        if (isProtocolTokenFeeClaimed) {\\n            return;\\n        }\\n        IToken _token = token;\\n        if (_token.tokenType() == IToken.TokenType.Preference) {\\n            return;\\n        }\\n        uint256 tokenFee = _token.service().getProtocolTokenFee(totalPurchased);\\n\\n        isProtocolTokenFeeClaimed = true;\\n\\n        _token.mint(_token.service().protocolTreasury(), tokenFee);\\n\\n        emit ProtocolTokenFeeClaimed(address(_token), tokenFee);\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @dev How many tokens an address can purchase.\\n     * @return Amount of tokens\\n     */\\n    function maxPurchaseOf(address account) public view returns (uint256) {\\n        return\\n            MathUpgradeable.min(\\n                info.maxPurchase - purchaseOf[account],\\n                info.hardcap - totalPurchased\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns TGE's state.\\n     * @return State\\n     */\\n    function state() public view returns (State) {\\n        // If hardcap is reached TGE is successfull\\n        if (totalPurchased == info.hardcap) {\\n            return State.Successful;\\n        }\\n\\n        // If deadline not reached TGE is active\\n        if (block.number < createdAt + info.duration) {\\n            return State.Active;\\n        }\\n\\n        // If it's not primary TGE it's successfull (if anything is purchased)\\n        if (address(this) != token.getTGEList()[0] && totalPurchased > 0) {\\n            return State.Successful;\\n        }\\n\\n        // If softcap is reached TGE is successfull\\n        if (totalPurchased >= info.softcap && totalPurchased > 0) {\\n            return State.Successful;\\n        }\\n\\n        // Otherwise it's failed primary TGE\\n        return State.Failed;\\n    }\\n\\n    /**\\n     * @dev Is claim available for vested tokens.\\n     * @return Is claim available\\n     */\\n    function claimAvailable() public view returns (bool) {\\n        return\\n            vestingTVLReached &&\\n            block.number >= createdAt + info.vestingDuration &&\\n            (state()) != State.Failed;\\n    }\\n\\n    /**\\n     * @dev Is transfer available for lockup preference tokens.\\n     * @return Is transfer available\\n     */\\n    function transferUnlocked() public view returns (bool) {\\n        return\\n            lockupTVLReached && block.number >= createdAt + info.lockupDuration;\\n    }\\n\\n    /**\\n     * @dev Locked balance of account in current TGE\\n     * @param account Account address\\n     * @return Locked balance\\n     */\\n    function lockedBalanceOf(address account) external view returns (uint256) {\\n        return\\n            transferUnlocked()\\n                ? 0\\n                : (purchaseOf[account] - vestedBalanceOf[account]);\\n    }\\n\\n    /**\\n     * @dev Get total value of all purchased tokens\\n     * @return Total value\\n     */\\n    function getTotalPurchasedValue() public view returns (uint256) {\\n        return (totalPurchased * info.price) / 10**18;\\n    }\\n\\n    /**\\n     * @dev Get total value of all vestied tokens\\n     * @return Total value\\n     */\\n    function getTotalVestedValue() public view returns (uint256) {\\n        return (totalVested * info.price) / 10**18;\\n    }\\n\\n    /**\\n     * @dev Get userwhitelist info\\n     * @return User whitelist\\n     */\\n    function getUserWhitelist() external view returns (address[] memory) {\\n        return info.userWhitelist;\\n    }\\n\\n    // MODIFIER\\n\\n    modifier onlyState(State state_) {\\n        require(state() == state_, ExceptionsLibrary.WRONG_STATE);\\n        _;\\n    }\\n\\n    modifier onlyWhitelistedUser() {\\n        require(\\n            info.userWhitelist.length == 0 || isUserWhitelisted[msg.sender],\\n            ExceptionsLibrary.NOT_WHITELISTED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        IService service = token.service();\\n        require(\\n            service.hasRole(service.SERVICE_MANAGER_ROLE(), msg.sender),\\n            ExceptionsLibrary.NOT_WHITELISTED\\n        );\\n        _;\\n    }\\n\\n    modifier whenPoolNotPaused() {\\n        require(\\n            !IPool(token.pool()).paused(),\\n            ExceptionsLibrary.SERVICE_PAUSED\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb2d5befa1fcaffda0bf6c8f735090a22bcdfd3ae07452f56370ae1e483c6709\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\nimport \\\"./governor/IGovernorProposals.sol\\\";\\n\\ninterface IPool is IGovernorProposals {\\n    function initialize(\\n        address owner_,\\n        string memory trademark_,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\n        IRegistry.CompanyInfo memory companyInfo_\\n    ) external;\\n\\n    function setToken(address token_, IToken.TokenType tokenType_) external;\\n\\n    function cancelProposal(uint256 proposalId) external;\\n\\n    function owner() external view returns (address);\\n\\n    function isDAO() external view returns (bool);\\n\\n    function trademark() external view returns (string memory);\\n\\n    function paused() external view returns (bool);\\n\\n    function getToken(IToken.TokenType tokenType_)\\n        external\\n        view\\n        returns (IToken);\\n}\\n\",\"keccak256\":\"0xd7277d02fa55717aeaa915a1ae33b0d89edf80d291d471e57ae676cc5b25a6db\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./IToken.sol\\\";\\n\\ninterface IService is IAccessControlEnumerableUpgradeable {\\n    function ADMIN_ROLE() external view returns (bytes32);\\n\\n    function WHITELISTED_USER_ROLE() external view returns (bytes32);\\n\\n    function SERVICE_MANAGER_ROLE() external view returns (bytes32);\\n\\n    function EXECUTOR_ROLE() external view returns (bytes32);\\n\\n    function createSecondaryTGE(\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function addEvent(\\n        IRegistry.EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external;\\n\\n    function registry() external view returns (IRegistry);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTokenFee() external view returns (uint256);\\n\\n    function getMinSoftCap() external view returns (uint256);\\n\\n    function getProtocolTokenFee(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function poolBeacon() external view returns (address);\\n\\n    function tgeBeacon() external view returns (address);\\n\\n    function validateTGEInfo(\\n        ITGE.TGEInfo calldata info,\\n        uint256 cap,\\n        uint256 totalSupply\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x7b2bb8901fbe0fbdeab01abc1c0d267de98ce430903490752bfc39049fcd48ac\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 vestingPercent;\\n        uint256 vestingDuration;\\n        uint256 vestingTVL;\\n        uint256 duration;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n    }\\n\\n    function initialize(IToken token_, TGEInfo calldata info) external;\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n\\n    function transferUnlocked() external view returns (bool);\\n\\n    function totalVested() external view returns (uint256);\\n\\n    function purchaseOf(address user) external view returns (uint256);\\n\\n    function vestedBalanceOf(address user) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xca0ba3f8a3299cbaaf4022330f4f336b03f89f6d9d6818d04eac0aaef28950b1\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IToken is IVotesUpgradeable, IERC20Upgradeable {\\n    struct TokenInfo {\\n        TokenType tokenType;\\n        string name;\\n        string symbol;\\n        string description;\\n        uint256 cap;\\n        uint8 decimals;\\n    }\\n\\n    enum TokenType {\\n        None,\\n        Governance,\\n        Preference\\n    }\\n\\n    function initialize(\\n        address pool_,\\n        TokenInfo memory info,\\n        address primaryTGE_\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenType() external view returns (TokenType);\\n\\n    function lastTGE() external view returns (address);\\n\\n    function getTGEList() external view returns (address[] memory);\\n\\n    function isPrimaryTGESuccessful() external view returns (bool);\\n\\n    function addTGE(address tge) external;\\n\\n    function getTotalTGEVestedTokens() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f6a8deddfa30694186ba7593c101c3860a120f1331b8dd4840efbc44a91a54f\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernanceSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGovernanceSettings {\\n    /**\\n     * @notice Governance settings\\n     * @param proposalThreshold_ Proposal threshold\\n     * @param quorumThreshold_ Quorum threshold\\n     * @param decisionThreshold_ Decision threshold\\n     * @param votingDuration_ Voting duration\\n     * @param transferValueForDelay_ Transfer value for delay\\n     * @param executionDelays_ List of execution delays for all proposal types\\n     */\\n    struct NewGovernanceSettings {\\n        uint256 proposalThreshold;\\n        uint256 quorumThreshold;\\n        uint256 decisionThreshold;\\n        uint256 votingDuration;\\n        uint256 transferValueForDelay;\\n        uint256[4] executionDelays;\\n    }\\n\\n    function setGovernanceSettings(NewGovernanceSettings memory settings)\\n        external;\\n}\\n\",\"keccak256\":\"0x89baaa8387d7ce9464b21af27cf8ad144e7fcf95097be75df9e16e64b936102d\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernorProposals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../IService.sol\\\";\\n\\ninterface IGovernorProposals {\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0xccb34e00bebdc99b089351a10727d57141e22268ef25b289e7d3aba34177f9c7\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ICompaniesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../ITGE.sol\\\";\\nimport \\\"../IToken.sol\\\";\\n\\ninterface ICompaniesRegistry {\\n    struct CompanyInfo {\\n        uint256 jurisdiction;\\n        uint256 entityType;\\n        string ein;\\n        string dateOfIncorporation;\\n        uint256 fee;\\n    }\\n\\n    function lockCompany(uint256 jurisdiction, uint256 entityType)\\n        external\\n        returns (CompanyInfo memory);\\n}\\n\",\"keccak256\":\"0xa2a610c882337a279f3575cd663c9aefbeb8c17ca37c97ffa2e7e6b778a8c084\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRecordsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IRecordsRegistry {\\n    // Directory\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        PreferenceToken,\\n        TGE\\n    }\\n\\n    enum EventType {\\n        None,\\n        Transfer,\\n        TGE,\\n        GovernanceSettings\\n    }\\n\\n    /**\\n     * @dev Contract information structure\\n     * @param addr Contract address\\n     * @param contractType Contract type\\n     * @param description Contract description\\n     */\\n    struct ContractInfo {\\n        address addr;\\n        ContractType contractType;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Proposal information structure\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param description Proposal description\\n     */\\n    struct ProposalInfo {\\n        address pool;\\n        uint256 proposalId;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Event information structure\\n     * @param eventType Event type\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param metaHash Hash value of event metadata\\n     */\\n    struct Event {\\n        EventType eventType;\\n        address pool;\\n        uint256 proposalId;\\n        string metaHash;\\n    }\\n\\n    function addContractRecord(\\n        address addr,\\n        ContractType contractType,\\n        string memory description\\n    ) external returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function addEventRecord(\\n        address pool,\\n        EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0xf6c8e1758c25ea6dea98ac5e5874820a2f538bac7a76641eba7e553b9b562cf9\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ICompaniesRegistry.sol\\\";\\nimport \\\"./ITokensRegistry.sol\\\";\\nimport \\\"./IRecordsRegistry.sol\\\";\\n\\ninterface IRegistry is ITokensRegistry, ICompaniesRegistry, IRecordsRegistry {}\\n\",\"keccak256\":\"0xe16ba0ac61345d022330464cb8dc4608a4b054d2f2f7fe8de166ad0be5ec8d73\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ITokensRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITokensRegistry {\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcbbf6de279d7d4b0b55061c2ee0980e1b4e5a769ba6f01d39ec681111f51b110\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary ExceptionsLibrary {\\n    string public constant ADDRESS_ZERO = \\\"ADDRESS_ZERO\\\";\\n    string public constant INCORRECT_ETH_PASSED = \\\"INCORRECT_ETH_PASSED\\\";\\n    string public constant NO_COMPANY = \\\"NO_COMPANY\\\";\\n    string public constant INVALID_TOKEN = \\\"INVALID_TOKEN\\\";\\n    string public constant NOT_POOL = \\\"NOT_POOL\\\";\\n    string public constant NOT_TGE = \\\"NOT_TGE\\\";\\n    string public constant NOT_Registry = \\\"NOT_Registry\\\";\\n    string public constant NOT_POOL_OWNER = \\\"NOT_POOL_OWNER\\\";\\n    string public constant NOT_SERVICE_OWNER = \\\"NOT_SERVICE_OWNER\\\";\\n    string public constant IS_DAO = \\\"IS_DAO\\\";\\n    string public constant NOT_DAO = \\\"NOT_DAO\\\";\\n    string public constant NOT_WHITELISTED = \\\"NOT_WHITELISTED\\\";\\n    string public constant ALREADY_WHITELISTED = \\\"ALREADY_WHITELISTED\\\";\\n    string public constant ALREADY_NOT_WHITELISTED = \\\"ALREADY_NOT_WHITELISTED\\\";\\n    string public constant NOT_SERVICE = \\\"NOT_SERVICE\\\";\\n    string public constant WRONG_STATE = \\\"WRONG_STATE\\\";\\n    string public constant TRANSFER_FAILED = \\\"TRANSFER_FAILED\\\";\\n    string public constant CLAIM_NOT_AVAILABLE = \\\"CLAIM_NOT_AVAILABLE\\\";\\n    string public constant NO_LOCKED_BALANCE = \\\"NO_LOCKED_BALANCE\\\";\\n    string public constant LOCKUP_TVL_REACHED = \\\"LOCKUP_TVL_REACHED\\\";\\n    string public constant HARDCAP_OVERFLOW = \\\"HARDCAP_OVERFLOW\\\";\\n    string public constant MAX_PURCHASE_OVERFLOW = \\\"MAX_PURCHASE_OVERFLOW\\\";\\n    string public constant HARDCAP_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant MIN_PURCHASE_UNDERFLOW = \\\"MIN_PURCHASE_UNDERFLOW\\\";\\n    string public constant LOW_UNLOCKED_BALANCE = \\\"LOW_UNLOCKED_BALANCE\\\";\\n    string public constant ZERO_PURCHASE_AMOUNT = \\\"ZERO_PURCHASE_AMOUNTs\\\";\\n    string public constant NOTHING_TO_REDEEM = \\\"NOTHING_TO_REDEEM\\\";\\n    string public constant RECORD_IN_USE = \\\"RECORD_IN_USE\\\";\\n    string public constant INVALID_EIN = \\\"INVALID_EIN\\\";\\n    string public constant VALUE_ZERO = \\\"VALUE_ZERO\\\";\\n    string public constant ALREADY_SET = \\\"ALREADY_SET\\\";\\n    string public constant VOTING_FINISHED = \\\"VOTING_FINISHED\\\";\\n    string public constant ALREADY_EXECUTED = \\\"ALREADY_EXECUTED\\\";\\n    string public constant ACTIVE_TGE_EXISTS = \\\"ACTIVE_TGE_EXISTS\\\";\\n    string public constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\n    string public constant INVALID_CAP = \\\"INVALID_CAP\\\";\\n    string public constant INVALID_HARDCAP = \\\"INVALID_HARDCAP\\\";\\n    string public constant ONLY_POOL = \\\"ONLY_POOL\\\";\\n    string public constant ETH_TRANSFER_FAIL = \\\"ETH_TRANSFER_FAIL\\\";\\n    string public constant TOKEN_TRANSFER_FAIL = \\\"TOKEN_TRANSFER_FAIL\\\";\\n    string public constant BLOCK_DELAY = \\\"BLOCK_DELAY\\\";\\n    string public constant SERVICE_PAUSED = \\\"SERVICE_PAUSED\\\";\\n    string public constant INVALID_PROPOSAL_TYPE = \\\"INVALID_PROPOSAL_TYPE\\\";\\n    string public constant EXECUTION_FAILED = \\\"EXECUTION_FAILED\\\";\\n    string public constant INVALID_USER = \\\"INVALID_USER\\\";\\n    string public constant NOT_LAUNCHED = \\\"NOT_LAUNCHED\\\";\\n    string public constant LAUNCHED = \\\"LAUNCHED\\\";\\n    string public constant VESTING_TVL_REACHED = \\\"VESTING_TVL_REACHED\\\";\\n    string public constant PREFERENCE_TOKEN_EXISTS = \\\"PREFERENCE_TOKEN_EXISTS\\\";\\n    string public constant INVALID_SOFTCAP = \\\"INVALID_SOFTCAP\\\";\\n    string public constant THRESHOLD_NOT_REACHED = \\\"THRESHOLD_NOT_REACHED\\\";\\n    string public constant UNSUPPORTED_TOKEN_TYPE = \\\"UNSUPPORTED_TOKEN_TYPE\\\";\\n}\\n\",\"keccak256\":\"0x63a7cdc260e00e02c91da988f20c2965f7437733f4fb35a1898daaa93dafb462\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612f9780620000f46000396000f3fe6080604052600436106101815760003560e01c80637805511d116100d1578063df60fa401161008a578063ec76d21511610064578063ec76d2151461048a578063efef39a1146104a9578063fb237eb2146104bc578063fc0c546a146104ec57600080fd5b8063df60fa401461043d578063e411d9a914610452578063e632c2f31461047457600080fd5b80637805511d1461039957806380f68bdc146103ae578063be040fb0146103c3578063bf7fec08146103d8578063c19d93fb14610405578063cf09e0d01461042757600080fd5b806337c62eb11161013e5780634e71d92d116101185780634e71d92d14610335578063593557361461034a57806367887a771461036a5780636a38f3ca1461037f57600080fd5b806337c62eb1146102eb5780633c68eb811461030057806342ee5d841461031557600080fd5b80630e2d1a2a14610186578063199cbc54146101c6578063205decf4146101dc5780632c4e8d55146101f35780633253423f14610213578063370158ea1461023d575b600080fd5b34801561019257600080fd5b506101b36101a1366004612849565b60466020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101d257600080fd5b506101b360475481565b3480156101e857600080fd5b506101f1610524565b005b3480156101ff57600080fd5b506101f161020e366004612866565b610840565b34801561021f57600080fd5b5060485461022d9060ff1681565b60405190151581526020016101bd565b34801561024957600080fd5b50603454603554603654603754603854603954603a54603b54603c54603e54603f546040546102899b9a99989796959493926001600160a01b031691908c565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501526001600160a01b0316610120840152610140830152610160820152610180016101bd565b3480156102f757600080fd5b5061022d610b55565b34801561030c57600080fd5b506101f1610ba3565b34801561032157600080fd5b506101b3610330366004612849565b610e95565b34801561034157600080fd5b506101f1610ed9565b34801561035657600080fd5b506101b3610365366004612849565b611123565b34801561037657600080fd5b506101b361116d565b34801561038b57600080fd5b5060455461022d9060ff1681565b3480156103a557600080fd5b506101f1611195565b3480156103ba57600080fd5b506101b36114a2565b3480156103cf57600080fd5b506101f16114c0565b3480156103e457600080fd5b506101b36103f3366004612849565b60436020526000908152604090205481565b34801561041157600080fd5b5061041a611985565b6040516101bd91906128d4565b34801561043357600080fd5b506101b360425481565b34801561044957600080fd5b5061022d611aa1565b34801561045e57600080fd5b50610467611ace565b6040516101bd91906128fc565b34801561048057600080fd5b506101b360445481565b34801561049657600080fd5b5060455461022d90610100900460ff1681565b6101f16104b7366004612949565b611b33565b3480156104c857600080fd5b5061022d6104d7366004612849565b60416020526000908152604090205460ff1681565b3480156104f857600080fd5b5060335461050c906001600160a01b031681565b6040516001600160a01b0390911681526020016101bd565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b8152509061064b5760405162461bcd60e51b815260040161064291906129d0565b60405180910390fd5b506033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba919061296d565b9050806001600160a01b03166391d14854826001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190612a03565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610793919061298a565b6040518060400160405280600f81526020016e1393d517d5d2125511531254d51151608a1b815250906107d95760405162461bcd60e51b815260040161064291906129d0565b506045546040805180820190915260128152711313d0d2d55417d5159317d4915050d2115160721b602082015290610100900460ff161561082d5760405162461bcd60e51b815260040161064291906129d0565b50506045805461ff001916610100179055565b600054610100900460ff16158080156108605750600054600160ff909116105b8061087a5750303b15801561087a575060005460ff166001145b6108dd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610642565b6000805460ff191660011790558015610900576000805461ff0019166101001790555b61090861206c565b336001600160a01b031663d7f964fd83856001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190612a03565b866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190612a03565b6040518463ffffffff1660e01b81526004016109fa93929190612ab5565b60006040518083038186803b158015610a1257600080fd5b505afa158015610a26573d6000803e3d6000fd5b5050603380546001600160a01b0319166001600160a01b038716179055508290506034610a538282612cc3565b50506045805461ffff191660e08401351561ff00191617610100610180850135150217905560005b610a89610120840184612b88565b9050811015610b0557600160416000610aa6610120870187612b88565b85818110610ab657610ab6612d84565b9050602002016020810190610acb9190612849565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610afd81612d9a565b915050610a7b565b50436042558015610b50576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60455460009060ff168015610b795750603a54604254610b759190612db3565b4310155b8015610b9e57506001610b8a611985565b6002811115610b9b57610b9b6128be565b14155b905090565b600280610bae611985565b6002811115610bbf57610bbf6128be565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090610c025760405162461bcd60e51b815260040161064291906129d0565b50603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b81525090610d215760405162461bcd60e51b815260040161064291906129d0565b5060445415610e9257610d3261209d565b603e54603354604080516316f0115b60e01b815290516001600160a01b039384169360009316916316f0115b9160048083019260209291908290030181865afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da7919061296d565b60345490915060009015610e5b576001600160a01b038316610ddd575047610dd86001600160a01b03831682612377565b610e5b565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e459190612a03565b9050610e5b6001600160a01b0384168383612490565b6040518181527fe057af857c4cd43c642d89c71d82bfcef75327272b9cc78e3951f824bd5dd6cb9060200160405180910390a15050505b50565b6001600160a01b038116600090815260436020526040812054603854610ed391610ebe91612dc6565b604454603554610ece9190612dc6565b6124e6565b92915050565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f50919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb1919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b81525090610ff75760405162461bcd60e51b815260040161064291906129d0565b50611000610b55565b60405180604001604052806013815260200172434c41494d5f4e4f545f415641494c41424c4560681b8152509061104a5760405162461bcd60e51b815260040161064291906129d0565b503360009081526046602090815260409182902054825180840190935260118352704e4f5f4c4f434b45445f42414c414e434560781b9183019190915290816110a65760405162461bcd60e51b815260040161064291906129d0565b50336000908152604660205260408120819055604780548392906110cb908490612dc6565b90915550506033546110e7906001600160a01b03163383612490565b7fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a3382604051611118929190612dd9565b60405180910390a150565b600061112d611aa1565b611165576001600160a01b0382166000908152604660209081526040808320546043909252909120546111609190612dc6565b610ed3565b600092915050565b6000670de0b6b3a764000060346000015460445461118b9190612bfe565b610b9e9190612df2565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120c919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126d919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b815250906112b35760405162461bcd60e51b815260040161064291906129d0565b506033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa1580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611322919061296d565b9050806001600160a01b03166391d14854826001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113959190612a03565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa1580156113d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fb919061298a565b6040518060400160405280600f81526020016e1393d517d5d2125511531254d51151608a1b815250906114415760405162461bcd60e51b815260040161064291906129d0565b50604554604080518082019091526013815272159154d5125391d7d5159317d4915050d21151606a1b60208201529060ff16156114915760405162461bcd60e51b815260040161064291906129d0565b50506045805460ff19166001179055565b6000670de0b6b3a764000060346000015460475461118b9190612bfe565b6001806114cb611985565b60028111156114dc576114dc6128be565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b8152509061151f5760405162461bcd60e51b815260040161064291906129d0565b506115286124fe565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611600919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b815250906116465760405162461bcd60e51b815260040161064291906129d0565b503360009081526043602090815260409182902054825180840190935260158352745a45524f5f50555243484153455f414d4f554e547360581b918301919091526116a45760405162461bcd60e51b815260040161064291906129d0565b50336000908152604660205260408120548015611776573360009081526046602090815260408083208390556043909152812080548392906116e7908490612dc6565b9250508190555080604760008282546117009190612dc6565b9091555061171090508183612db3565b603354604051632770a7eb60e21b81529193506001600160a01b031690639dc29fac906117439030908590600401612dd9565b600060405180830381600087803b15801561175d57600080fd5b505af1158015611771573d6000803e3d6000fd5b505050505b6033546040516370a0823160e01b81523360048201526000916117fe916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156117c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e99190612a03565b336000908152604360205260409020546124e6565b9050801561189b573360009081526043602052604081208054839290611825908490612dc6565b9091555061183590508184612db3565b603354604051632770a7eb60e21b81529194506001600160a01b031690639dc29fac906118689033908590600401612dd9565b600060405180830381600087803b15801561188257600080fd5b505af1158015611896573d6000803e3d6000fd5b505050505b6040805180820190915260118152704e4f5448494e475f544f5f52454445454d60781b6020820152836118e15760405162461bcd60e51b815260040161064291906129d0565b50603454600090670de0b6b3a7640000906118fc9086612bfe565b6119069190612df2565b603e549091506001600160a01b0316611928576119233382612377565b61193f565b603e5461193f906001600160a01b03163383612490565b7f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b93693382604051611970929190612dd9565b60405180910390a150505050610e9260018055565b60006034600101546044540361199b5750600290565b603c546042546119ab9190612db3565b4310156119b85750600090565b603360009054906101000a90046001600160a01b03166001600160a01b0316620a04ae6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a329190810190612e14565b600081518110611a4457611a44612d84565b60200260200101516001600160a01b0316306001600160a01b031614158015611a6f57506000604454115b15611a7a5750600290565b60365460445410801590611a9057506000604454115b15611a9b5750600290565b50600190565b604554600090610100900460ff168015610b9e5750603f54604254611ac69190612db3565b431015905090565b60606034600901805480602002602001604051908101604052809291908181526020018280548015611b2957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b0b575b5050505050905090565b603d541580611b5157503360009081526041602052604090205460ff165b6040518060400160405280600f81526020016e1393d517d5d2125511531254d51151608a1b81525090611b975760405162461bcd60e51b815260040161064291906129d0565b50600080611ba3611985565b6002811115611bb457611bb46128be565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611bf75760405162461bcd60e51b815260040161064291906129d0565b50611c006124fe565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c77919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd8919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b81525090611d1e5760405162461bcd60e51b815260040161064291906129d0565b50603e546001600160a01b031680611da557603454670de0b6b3a764000090611d479085612bfe565b611d519190612df2565b34101560405180604001604052806014815260200173125390d3d4949150d517d1551217d41054d4d15160621b81525090611d9f5760405162461bcd60e51b815260040161064291906129d0565b50611de0565b611de03330670de0b6b3a764000060346000015487611dc49190612bfe565b611dce9190612df2565b6001600160a01b03851692919061255d565b6037546040805180820190915260168152754d494e5f50555243484153455f554e444552464c4f5760501b602082015290841015611e315760405162461bcd60e51b815260040161064291906129d0565b50611e3b33610e95565b831115604051806040016040528060158152602001744d41585f50555243484153455f4f564552464c4f5760581b81525090611e8a5760405162461bcd60e51b815260040161064291906129d0565b508260446000828254611e9d9190612db3565b90915550503360009081526043602052604081208054859290611ec1908490612db3565b9091555060009050620f4240611ed8600182612dc6565b603954611ee59087612bfe565b611eef9190612db3565b611ef99190612df2565b6033549091506001600160a01b03166000611f148387612dc6565b1115611f84576001600160a01b0381166340c10f1933611f348589612dc6565b6040518363ffffffff1660e01b8152600401611f51929190612dd9565b600060405180830381600087803b158015611f6b57600080fd5b505af1158015611f7f573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038216906340c10f1990611fb29030908690600401612dd9565b600060405180830381600087803b158015611fcc57600080fd5b505af1158015611fe0573d6000803e3d6000fd5b50503360009081526046602052604081208054869450909250612004908490612db3565b92505081905550816047600082825461201d9190612db3565b90915550506040517fa512fb2532ca8587f236380171326ebb69670e86a2ba0c4412a3fcca4c3ada9b906120549033908890612dd9565b60405180910390a150505061206860018055565b5050565b600054610100900460ff166120935760405162461bcd60e51b815260040161064290612ed9565b61209b61259b565b565b60485460ff16156120aa57565b6033546001600160a01b03166002816001600160a01b03166330fa738c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211a9190612f24565b600281111561212b5761212b6128be565b036121335750565b6000816001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612197919061296d565b6001600160a01b0316639d838ad36044546040518263ffffffff1660e01b81526004016121c691815260200190565b602060405180830381865afa1580156121e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122079190612a03565b6048805460ff191660011790556040805163d598d4c960e01b815290519192506001600160a01b038416916340c10f1991839163d598d4c9916004808201926020929091908290030181865afa158015612265573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612289919061296d565b6001600160a01b031663803db96d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ea919061296d565b836040518363ffffffff1660e01b8152600401612308929190612dd9565b600060405180830381600087803b15801561232257600080fd5b505af1158015612336573d6000803e3d6000fd5b505050507f261ee2056de47cac1d419457dbe29f4c1990ecb02a836ab87921fc97df8544f4828260405161236b929190612dd9565b60405180910390a15050565b804710156123c75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610642565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612414576040519150601f19603f3d011682016040523d82523d6000602084013e612419565b606091505b5050905080610b505760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610642565b610b508363a9059cbb60e01b84846040516024016124af929190612dd9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125c2565b60008183106124f557816124f7565b825b9392505050565b6002600154036125505760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610642565b6002600155565b60018055565b6040516001600160a01b03808516602483015283166044820152606481018290526125959085906323b872dd60e01b906084016124af565b50505050565b600054610100900460ff166125575760405162461bcd60e51b815260040161064290612ed9565b6000612617826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126949092919063ffffffff16565b805190915015610b505780806020019051810190612635919061298a565b610b505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610642565b60606126a384846000856126ab565b949350505050565b60608247101561270c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610642565b600080866001600160a01b031685876040516127289190612f45565b60006040518083038185875af1925050503d8060008114612765576040519150601f19603f3d011682016040523d82523d6000602084013e61276a565b606091505b509150915061277b87838387612786565b979650505050505050565b606083156127f55782516000036127ee576001600160a01b0385163b6127ee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610642565b50816126a3565b6126a3838381511561280a5781518083602001fd5b8060405162461bcd60e51b815260040161064291906129d0565b6001600160a01b0381168114610e9257600080fd5b803561284481612824565b919050565b60006020828403121561285b57600080fd5b81356124f781612824565b6000806040838503121561287957600080fd5b823561288481612824565b9150602083013567ffffffffffffffff8111156128a057600080fd5b83016101a081860312156128b357600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106128f657634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b8181101561293d5783516001600160a01b031683529284019291840191600101612918565b50909695505050505050565b60006020828403121561295b57600080fd5b5035919050565b805161284481612824565b60006020828403121561297f57600080fd5b81516124f781612824565b60006020828403121561299c57600080fd5b815180151581146124f757600080fd5b60005b838110156129c75781810151838201526020016129af565b50506000910152565b60208152600082518060208401526129ef8160408501602087016129ac565b601f01601f19169190910160400192915050565b600060208284031215612a1557600080fd5b5051919050565b6000808335601e19843603018112612a3357600080fd5b830160208101925035905067ffffffffffffffff811115612a5357600080fd5b8060051b3603821315612a6557600080fd5b9250929050565b8183526000602080850194508260005b85811015612aaa578135612a8f81612824565b6001600160a01b031687529582019590820190600101612a7c565b509495945050505050565b606081528335606082015260208401356080820152604084013560a0820152606084013560c0820152608084013560e0820152600061010060a08601358184015261012060c08701358185015261014060e0880135818601526101608389013581870152612b25838a018a612a1c565b945092506101a06101808181890152612b4361020089018787612a6c565b9550612b50848c01612839565b6001600160a01b038116898401529450918a01356101c088015250909701356101e08501525060208301949094525060400152919050565b6000808335601e19843603018112612b9f57600080fd5b83018035915067ffffffffffffffff821115612bba57600080fd5b6020019150600581901b3603821315612a6557600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610ed357610ed3612be8565b60008135610ed381612824565b67ffffffffffffffff831115612c3a57612c3a612bd2565b68010000000000000000831115612c5357612c53612bd2565b805483825580841015612c8a576000828152602081208581019083015b80821015612c8657828255600182019150612c70565b5050505b5060008181526020812083915b85811015612cbb57612ca883612c15565b8282015560209290920191600101612c97565b505050505050565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c0820135600682015560e082013560078201556101008201356008820155612d26610120830183612b88565b612d34818360098601612c22565b5050612d6a612d466101408401612c15565b600a830180546001600160a01b0319166001600160a01b0392909216919091179055565b610160820135600b820155610180820135600c8201555050565b634e487b7160e01b600052603260045260246000fd5b600060018201612dac57612dac612be8565b5060010190565b80820180821115610ed357610ed3612be8565b81810381811115610ed357610ed3612be8565b6001600160a01b03929092168252602082015260400190565b600082612e0f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020808385031215612e2757600080fd5b825167ffffffffffffffff80821115612e3f57600080fd5b818501915085601f830112612e5357600080fd5b815181811115612e6557612e65612bd2565b8060051b604051601f19603f83011681018181108582111715612e8a57612e8a612bd2565b604052918252848201925083810185019188831115612ea857600080fd5b938501935b82851015612ecd57612ebe85612962565b84529385019392850192612ead565b98975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612f3657600080fd5b8151600381106124f757600080fd5b60008251612f578184602087016129ac565b919091019291505056fea2646970667358221220a215df993e04a3537ef37be0606d8dbe26915c50a7723cd27a52197beb33ff7564736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c80637805511d116100d1578063df60fa401161008a578063ec76d21511610064578063ec76d2151461048a578063efef39a1146104a9578063fb237eb2146104bc578063fc0c546a146104ec57600080fd5b8063df60fa401461043d578063e411d9a914610452578063e632c2f31461047457600080fd5b80637805511d1461039957806380f68bdc146103ae578063be040fb0146103c3578063bf7fec08146103d8578063c19d93fb14610405578063cf09e0d01461042757600080fd5b806337c62eb11161013e5780634e71d92d116101185780634e71d92d14610335578063593557361461034a57806367887a771461036a5780636a38f3ca1461037f57600080fd5b806337c62eb1146102eb5780633c68eb811461030057806342ee5d841461031557600080fd5b80630e2d1a2a14610186578063199cbc54146101c6578063205decf4146101dc5780632c4e8d55146101f35780633253423f14610213578063370158ea1461023d575b600080fd5b34801561019257600080fd5b506101b36101a1366004612849565b60466020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101d257600080fd5b506101b360475481565b3480156101e857600080fd5b506101f1610524565b005b3480156101ff57600080fd5b506101f161020e366004612866565b610840565b34801561021f57600080fd5b5060485461022d9060ff1681565b60405190151581526020016101bd565b34801561024957600080fd5b50603454603554603654603754603854603954603a54603b54603c54603e54603f546040546102899b9a99989796959493926001600160a01b031691908c565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501526001600160a01b0316610120840152610140830152610160820152610180016101bd565b3480156102f757600080fd5b5061022d610b55565b34801561030c57600080fd5b506101f1610ba3565b34801561032157600080fd5b506101b3610330366004612849565b610e95565b34801561034157600080fd5b506101f1610ed9565b34801561035657600080fd5b506101b3610365366004612849565b611123565b34801561037657600080fd5b506101b361116d565b34801561038b57600080fd5b5060455461022d9060ff1681565b3480156103a557600080fd5b506101f1611195565b3480156103ba57600080fd5b506101b36114a2565b3480156103cf57600080fd5b506101f16114c0565b3480156103e457600080fd5b506101b36103f3366004612849565b60436020526000908152604090205481565b34801561041157600080fd5b5061041a611985565b6040516101bd91906128d4565b34801561043357600080fd5b506101b360425481565b34801561044957600080fd5b5061022d611aa1565b34801561045e57600080fd5b50610467611ace565b6040516101bd91906128fc565b34801561048057600080fd5b506101b360445481565b34801561049657600080fd5b5060455461022d90610100900460ff1681565b6101f16104b7366004612949565b611b33565b3480156104c857600080fd5b5061022d6104d7366004612849565b60416020526000908152604090205460ff1681565b3480156104f857600080fd5b5060335461050c906001600160a01b031681565b6040516001600160a01b0390911681526020016101bd565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b8152509061064b5760405162461bcd60e51b815260040161064291906129d0565b60405180910390fd5b506033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba919061296d565b9050806001600160a01b03166391d14854826001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190612a03565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610793919061298a565b6040518060400160405280600f81526020016e1393d517d5d2125511531254d51151608a1b815250906107d95760405162461bcd60e51b815260040161064291906129d0565b506045546040805180820190915260128152711313d0d2d55417d5159317d4915050d2115160721b602082015290610100900460ff161561082d5760405162461bcd60e51b815260040161064291906129d0565b50506045805461ff001916610100179055565b600054610100900460ff16158080156108605750600054600160ff909116105b8061087a5750303b15801561087a575060005460ff166001145b6108dd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610642565b6000805460ff191660011790558015610900576000805461ff0019166101001790555b61090861206c565b336001600160a01b031663d7f964fd83856001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190612a03565b866001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190612a03565b6040518463ffffffff1660e01b81526004016109fa93929190612ab5565b60006040518083038186803b158015610a1257600080fd5b505afa158015610a26573d6000803e3d6000fd5b5050603380546001600160a01b0319166001600160a01b038716179055508290506034610a538282612cc3565b50506045805461ffff191660e08401351561ff00191617610100610180850135150217905560005b610a89610120840184612b88565b9050811015610b0557600160416000610aa6610120870187612b88565b85818110610ab657610ab6612d84565b9050602002016020810190610acb9190612849565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610afd81612d9a565b915050610a7b565b50436042558015610b50576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60455460009060ff168015610b795750603a54604254610b759190612db3565b4310155b8015610b9e57506001610b8a611985565b6002811115610b9b57610b9b6128be565b14155b905090565b600280610bae611985565b6002811115610bbf57610bbf6128be565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090610c025760405162461bcd60e51b815260040161064291906129d0565b50603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b81525090610d215760405162461bcd60e51b815260040161064291906129d0565b5060445415610e9257610d3261209d565b603e54603354604080516316f0115b60e01b815290516001600160a01b039384169360009316916316f0115b9160048083019260209291908290030181865afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da7919061296d565b60345490915060009015610e5b576001600160a01b038316610ddd575047610dd86001600160a01b03831682612377565b610e5b565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e459190612a03565b9050610e5b6001600160a01b0384168383612490565b6040518181527fe057af857c4cd43c642d89c71d82bfcef75327272b9cc78e3951f824bd5dd6cb9060200160405180910390a15050505b50565b6001600160a01b038116600090815260436020526040812054603854610ed391610ebe91612dc6565b604454603554610ece9190612dc6565b6124e6565b92915050565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f50919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb1919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b81525090610ff75760405162461bcd60e51b815260040161064291906129d0565b50611000610b55565b60405180604001604052806013815260200172434c41494d5f4e4f545f415641494c41424c4560681b8152509061104a5760405162461bcd60e51b815260040161064291906129d0565b503360009081526046602090815260409182902054825180840190935260118352704e4f5f4c4f434b45445f42414c414e434560781b9183019190915290816110a65760405162461bcd60e51b815260040161064291906129d0565b50336000908152604660205260408120819055604780548392906110cb908490612dc6565b90915550506033546110e7906001600160a01b03163383612490565b7fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a3382604051611118929190612dd9565b60405180910390a150565b600061112d611aa1565b611165576001600160a01b0382166000908152604660209081526040808320546043909252909120546111609190612dc6565b610ed3565b600092915050565b6000670de0b6b3a764000060346000015460445461118b9190612bfe565b610b9e9190612df2565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120c919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126d919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b815250906112b35760405162461bcd60e51b815260040161064291906129d0565b506033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa1580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611322919061296d565b9050806001600160a01b03166391d14854826001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113959190612a03565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa1580156113d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fb919061298a565b6040518060400160405280600f81526020016e1393d517d5d2125511531254d51151608a1b815250906114415760405162461bcd60e51b815260040161064291906129d0565b50604554604080518082019091526013815272159154d5125391d7d5159317d4915050d21151606a1b60208201529060ff16156114915760405162461bcd60e51b815260040161064291906129d0565b50506045805460ff19166001179055565b6000670de0b6b3a764000060346000015460475461118b9190612bfe565b6001806114cb611985565b60028111156114dc576114dc6128be565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b8152509061151f5760405162461bcd60e51b815260040161064291906129d0565b506115286124fe565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611600919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b815250906116465760405162461bcd60e51b815260040161064291906129d0565b503360009081526043602090815260409182902054825180840190935260158352745a45524f5f50555243484153455f414d4f554e547360581b918301919091526116a45760405162461bcd60e51b815260040161064291906129d0565b50336000908152604660205260408120548015611776573360009081526046602090815260408083208390556043909152812080548392906116e7908490612dc6565b9250508190555080604760008282546117009190612dc6565b9091555061171090508183612db3565b603354604051632770a7eb60e21b81529193506001600160a01b031690639dc29fac906117439030908590600401612dd9565b600060405180830381600087803b15801561175d57600080fd5b505af1158015611771573d6000803e3d6000fd5b505050505b6033546040516370a0823160e01b81523360048201526000916117fe916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156117c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e99190612a03565b336000908152604360205260409020546124e6565b9050801561189b573360009081526043602052604081208054839290611825908490612dc6565b9091555061183590508184612db3565b603354604051632770a7eb60e21b81529194506001600160a01b031690639dc29fac906118689033908590600401612dd9565b600060405180830381600087803b15801561188257600080fd5b505af1158015611896573d6000803e3d6000fd5b505050505b6040805180820190915260118152704e4f5448494e475f544f5f52454445454d60781b6020820152836118e15760405162461bcd60e51b815260040161064291906129d0565b50603454600090670de0b6b3a7640000906118fc9086612bfe565b6119069190612df2565b603e549091506001600160a01b0316611928576119233382612377565b61193f565b603e5461193f906001600160a01b03163383612490565b7f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b93693382604051611970929190612dd9565b60405180910390a150505050610e9260018055565b60006034600101546044540361199b5750600290565b603c546042546119ab9190612db3565b4310156119b85750600090565b603360009054906101000a90046001600160a01b03166001600160a01b0316620a04ae6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a329190810190612e14565b600081518110611a4457611a44612d84565b60200260200101516001600160a01b0316306001600160a01b031614158015611a6f57506000604454115b15611a7a5750600290565b60365460445410801590611a9057506000604454115b15611a9b5750600290565b50600190565b604554600090610100900460ff168015610b9e5750603f54604254611ac69190612db3565b431015905090565b60606034600901805480602002602001604051908101604052809291908181526020018280548015611b2957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b0b575b5050505050905090565b603d541580611b5157503360009081526041602052604090205460ff165b6040518060400160405280600f81526020016e1393d517d5d2125511531254d51151608a1b81525090611b975760405162461bcd60e51b815260040161064291906129d0565b50600080611ba3611985565b6002811115611bb457611bb46128be565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611bf75760405162461bcd60e51b815260040161064291906129d0565b50611c006124fe565b603360009054906101000a90046001600160a01b03166001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c77919061296d565b6001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd8919061298a565b156040518060400160405280600e81526020016d14d154959250d157d4105554d15160921b81525090611d1e5760405162461bcd60e51b815260040161064291906129d0565b50603e546001600160a01b031680611da557603454670de0b6b3a764000090611d479085612bfe565b611d519190612df2565b34101560405180604001604052806014815260200173125390d3d4949150d517d1551217d41054d4d15160621b81525090611d9f5760405162461bcd60e51b815260040161064291906129d0565b50611de0565b611de03330670de0b6b3a764000060346000015487611dc49190612bfe565b611dce9190612df2565b6001600160a01b03851692919061255d565b6037546040805180820190915260168152754d494e5f50555243484153455f554e444552464c4f5760501b602082015290841015611e315760405162461bcd60e51b815260040161064291906129d0565b50611e3b33610e95565b831115604051806040016040528060158152602001744d41585f50555243484153455f4f564552464c4f5760581b81525090611e8a5760405162461bcd60e51b815260040161064291906129d0565b508260446000828254611e9d9190612db3565b90915550503360009081526043602052604081208054859290611ec1908490612db3565b9091555060009050620f4240611ed8600182612dc6565b603954611ee59087612bfe565b611eef9190612db3565b611ef99190612df2565b6033549091506001600160a01b03166000611f148387612dc6565b1115611f84576001600160a01b0381166340c10f1933611f348589612dc6565b6040518363ffffffff1660e01b8152600401611f51929190612dd9565b600060405180830381600087803b158015611f6b57600080fd5b505af1158015611f7f573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038216906340c10f1990611fb29030908690600401612dd9565b600060405180830381600087803b158015611fcc57600080fd5b505af1158015611fe0573d6000803e3d6000fd5b50503360009081526046602052604081208054869450909250612004908490612db3565b92505081905550816047600082825461201d9190612db3565b90915550506040517fa512fb2532ca8587f236380171326ebb69670e86a2ba0c4412a3fcca4c3ada9b906120549033908890612dd9565b60405180910390a150505061206860018055565b5050565b600054610100900460ff166120935760405162461bcd60e51b815260040161064290612ed9565b61209b61259b565b565b60485460ff16156120aa57565b6033546001600160a01b03166002816001600160a01b03166330fa738c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211a9190612f24565b600281111561212b5761212b6128be565b036121335750565b6000816001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612197919061296d565b6001600160a01b0316639d838ad36044546040518263ffffffff1660e01b81526004016121c691815260200190565b602060405180830381865afa1580156121e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122079190612a03565b6048805460ff191660011790556040805163d598d4c960e01b815290519192506001600160a01b038416916340c10f1991839163d598d4c9916004808201926020929091908290030181865afa158015612265573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612289919061296d565b6001600160a01b031663803db96d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ea919061296d565b836040518363ffffffff1660e01b8152600401612308929190612dd9565b600060405180830381600087803b15801561232257600080fd5b505af1158015612336573d6000803e3d6000fd5b505050507f261ee2056de47cac1d419457dbe29f4c1990ecb02a836ab87921fc97df8544f4828260405161236b929190612dd9565b60405180910390a15050565b804710156123c75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610642565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612414576040519150601f19603f3d011682016040523d82523d6000602084013e612419565b606091505b5050905080610b505760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610642565b610b508363a9059cbb60e01b84846040516024016124af929190612dd9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125c2565b60008183106124f557816124f7565b825b9392505050565b6002600154036125505760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610642565b6002600155565b60018055565b6040516001600160a01b03808516602483015283166044820152606481018290526125959085906323b872dd60e01b906084016124af565b50505050565b600054610100900460ff166125575760405162461bcd60e51b815260040161064290612ed9565b6000612617826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126949092919063ffffffff16565b805190915015610b505780806020019051810190612635919061298a565b610b505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610642565b60606126a384846000856126ab565b949350505050565b60608247101561270c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610642565b600080866001600160a01b031685876040516127289190612f45565b60006040518083038185875af1925050503d8060008114612765576040519150601f19603f3d011682016040523d82523d6000602084013e61276a565b606091505b509150915061277b87838387612786565b979650505050505050565b606083156127f55782516000036127ee576001600160a01b0385163b6127ee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610642565b50816126a3565b6126a3838381511561280a5781518083602001fd5b8060405162461bcd60e51b815260040161064291906129d0565b6001600160a01b0381168114610e9257600080fd5b803561284481612824565b919050565b60006020828403121561285b57600080fd5b81356124f781612824565b6000806040838503121561287957600080fd5b823561288481612824565b9150602083013567ffffffffffffffff8111156128a057600080fd5b83016101a081860312156128b357600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106128f657634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b8181101561293d5783516001600160a01b031683529284019291840191600101612918565b50909695505050505050565b60006020828403121561295b57600080fd5b5035919050565b805161284481612824565b60006020828403121561297f57600080fd5b81516124f781612824565b60006020828403121561299c57600080fd5b815180151581146124f757600080fd5b60005b838110156129c75781810151838201526020016129af565b50506000910152565b60208152600082518060208401526129ef8160408501602087016129ac565b601f01601f19169190910160400192915050565b600060208284031215612a1557600080fd5b5051919050565b6000808335601e19843603018112612a3357600080fd5b830160208101925035905067ffffffffffffffff811115612a5357600080fd5b8060051b3603821315612a6557600080fd5b9250929050565b8183526000602080850194508260005b85811015612aaa578135612a8f81612824565b6001600160a01b031687529582019590820190600101612a7c565b509495945050505050565b606081528335606082015260208401356080820152604084013560a0820152606084013560c0820152608084013560e0820152600061010060a08601358184015261012060c08701358185015261014060e0880135818601526101608389013581870152612b25838a018a612a1c565b945092506101a06101808181890152612b4361020089018787612a6c565b9550612b50848c01612839565b6001600160a01b038116898401529450918a01356101c088015250909701356101e08501525060208301949094525060400152919050565b6000808335601e19843603018112612b9f57600080fd5b83018035915067ffffffffffffffff821115612bba57600080fd5b6020019150600581901b3603821315612a6557600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610ed357610ed3612be8565b60008135610ed381612824565b67ffffffffffffffff831115612c3a57612c3a612bd2565b68010000000000000000831115612c5357612c53612bd2565b805483825580841015612c8a576000828152602081208581019083015b80821015612c8657828255600182019150612c70565b5050505b5060008181526020812083915b85811015612cbb57612ca883612c15565b8282015560209290920191600101612c97565b505050505050565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c0820135600682015560e082013560078201556101008201356008820155612d26610120830183612b88565b612d34818360098601612c22565b5050612d6a612d466101408401612c15565b600a830180546001600160a01b0319166001600160a01b0392909216919091179055565b610160820135600b820155610180820135600c8201555050565b634e487b7160e01b600052603260045260246000fd5b600060018201612dac57612dac612be8565b5060010190565b80820180821115610ed357610ed3612be8565b81810381811115610ed357610ed3612be8565b6001600160a01b03929092168252602082015260400190565b600082612e0f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020808385031215612e2757600080fd5b825167ffffffffffffffff80821115612e3f57600080fd5b818501915085601f830112612e5357600080fd5b815181811115612e6557612e65612bd2565b8060051b604051601f19603f83011681018181108582111715612e8a57612e8a612bd2565b604052918252848201925083810185019188831115612ea857600080fd5b938501935b82851015612ecd57612ebe85612962565b84529385019392850192612ead565b98975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612f3657600080fd5b8151600381106124f757600080fd5b60008251612f578184602087016129ac565b919091019291505056fea2646970667358221220a215df993e04a3537ef37be0606d8dbe26915c50a7723cd27a52197beb33ff7564736f6c63430008110033",
  "devdoc": {
    "events": {
      "Claimed(address,uint256)": {
        "details": "Event emitted on token claim.",
        "params": {
          "account": "Claimer address",
          "amount": "Amount of claimed tokens"
        }
      },
      "FundsTransferred(uint256)": {
        "details": "Event emitted on transfer funds to pool.",
        "params": {
          "amount": "Amount of transferred tokens/ETH"
        }
      },
      "ProtocolTokenFeeClaimed(address,uint256)": {
        "details": "Event emitted on claim of protocol token fee.",
        "params": {
          "token": "token",
          "tokenFee": "amount of tokens"
        }
      },
      "Purchased(address,uint256)": {
        "details": "Event emitted on token purchase.",
        "params": {
          "amount": "amount of tokens",
          "buyer": "buyer"
        }
      },
      "Redeemed(address,uint256)": {
        "details": "Event emitted on token claim.",
        "params": {
          "account": "Redeemer address",
          "refundValue": "Refund value"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claim()": {
        "details": "Claim vested tokens"
      },
      "claimAvailable()": {
        "details": "Is claim available for vested tokens.",
        "returns": {
          "_0": "Is claim available"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getTotalPurchasedValue()": {
        "details": "Get total value of all purchased tokens",
        "returns": {
          "_0": "Total value"
        }
      },
      "getTotalVestedValue()": {
        "details": "Get total value of all vestied tokens",
        "returns": {
          "_0": "Total value"
        }
      },
      "getUserWhitelist()": {
        "details": "Get userwhitelist info",
        "returns": {
          "_0": "User whitelist"
        }
      },
      "initialize(address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address,uint256,uint256))": {
        "details": "Constructor function, can only be called once",
        "params": {
          "_info": "TGE parameters",
          "_token": "pool's token"
        }
      },
      "lockedBalanceOf(address)": {
        "details": "Locked balance of account in current TGE",
        "params": {
          "account": "Account address"
        },
        "returns": {
          "_0": "Locked balance"
        }
      },
      "maxPurchaseOf(address)": {
        "details": "How many tokens an address can purchase.",
        "returns": {
          "_0": "Amount of tokens"
        }
      },
      "purchase(uint256)": {
        "details": "Purchase pool's tokens during TGE",
        "params": {
          "amount": "amount of tokens in wei (10**18 = 1 token)"
        }
      },
      "redeem()": {
        "details": "Return purchased tokens and get back tokens paid"
      },
      "state()": {
        "details": "Returns TGE's state.",
        "returns": {
          "_0": "State"
        }
      },
      "transferFunds()": {
        "details": "Transfer proceeds from TGE to pool's treasury. Claim protocol fee."
      },
      "transferUnlocked()": {
        "details": "Is transfer available for lockup preference tokens.",
        "returns": {
          "_0": "Is transfer available"
        }
      }
    },
    "stateVariables": {
      "createdAt": {
        "details": "Block of TGE's creation"
      },
      "info": {
        "details": "TGE info struct"
      },
      "isProtocolTokenFeeClaimed": {
        "details": "Protocol token fee is a percentage of tokens sold during TGE. Returns true if fee was claimed by the governing DAO."
      },
      "isUserWhitelisted": {
        "details": "Mapping of user's address to whitelist status"
      },
      "lockupTVLReached": {
        "details": "Is lockup TVL reached. Users can claim their tokens only if lockup TVL was reached."
      },
      "purchaseOf": {
        "details": "Mapping of an address to total amount of tokens purchased during TGE"
      },
      "token": {
        "details": "Pool's ERC20 token"
      },
      "totalPurchased": {
        "details": "Total amount of tokens purchased during TGE"
      },
      "totalVested": {
        "details": "Total amount of tokens vested"
      },
      "vestedBalanceOf": {
        "details": "Mapping of addresses to total amounts of tokens vested"
      },
      "vestingTVLReached": {
        "details": "Is vesting TVL reached. Users can claim their tokens only if vesting TVL was reached."
      }
    },
    "title": "Token Generation Event",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 182,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 185,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 358,
        "contract": "contracts/TGE.sol:TGE",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 416,
        "contract": "contracts/TGE.sol:TGE",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1999,
        "contract": "contracts/TGE.sol:TGE",
        "label": "token",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IToken)3369"
      },
      {
        "astId": 2003,
        "contract": "contracts/TGE.sol:TGE",
        "label": "info",
        "offset": 0,
        "slot": "52",
        "type": "t_struct(TGEInfo)3201_storage"
      },
      {
        "astId": 2008,
        "contract": "contracts/TGE.sol:TGE",
        "label": "isUserWhitelisted",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2011,
        "contract": "contracts/TGE.sol:TGE",
        "label": "createdAt",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 2016,
        "contract": "contracts/TGE.sol:TGE",
        "label": "purchaseOf",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2019,
        "contract": "contracts/TGE.sol:TGE",
        "label": "totalPurchased",
        "offset": 0,
        "slot": "68",
        "type": "t_uint256"
      },
      {
        "astId": 2022,
        "contract": "contracts/TGE.sol:TGE",
        "label": "vestingTVLReached",
        "offset": 0,
        "slot": "69",
        "type": "t_bool"
      },
      {
        "astId": 2025,
        "contract": "contracts/TGE.sol:TGE",
        "label": "lockupTVLReached",
        "offset": 1,
        "slot": "69",
        "type": "t_bool"
      },
      {
        "astId": 2030,
        "contract": "contracts/TGE.sol:TGE",
        "label": "vestedBalanceOf",
        "offset": 0,
        "slot": "70",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2033,
        "contract": "contracts/TGE.sol:TGE",
        "label": "totalVested",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 2036,
        "contract": "contracts/TGE.sol:TGE",
        "label": "isProtocolTokenFeeClaimed",
        "offset": 0,
        "slot": "72",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IToken)3369": {
        "encoding": "inplace",
        "label": "contract IToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TGEInfo)3201_storage": {
        "encoding": "inplace",
        "label": "struct ITGE.TGEInfo",
        "members": [
          {
            "astId": 3175,
            "contract": "contracts/TGE.sol:TGE",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3177,
            "contract": "contracts/TGE.sol:TGE",
            "label": "hardcap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3179,
            "contract": "contracts/TGE.sol:TGE",
            "label": "softcap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3181,
            "contract": "contracts/TGE.sol:TGE",
            "label": "minPurchase",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3183,
            "contract": "contracts/TGE.sol:TGE",
            "label": "maxPurchase",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3185,
            "contract": "contracts/TGE.sol:TGE",
            "label": "vestingPercent",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3187,
            "contract": "contracts/TGE.sol:TGE",
            "label": "vestingDuration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3189,
            "contract": "contracts/TGE.sol:TGE",
            "label": "vestingTVL",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3191,
            "contract": "contracts/TGE.sol:TGE",
            "label": "duration",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3194,
            "contract": "contracts/TGE.sol:TGE",
            "label": "userWhitelist",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3196,
            "contract": "contracts/TGE.sol:TGE",
            "label": "unitOfAccount",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 3198,
            "contract": "contracts/TGE.sol:TGE",
            "label": "lockupDuration",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 3200,
            "contract": "contracts/TGE.sol:TGE",
            "label": "lockupTVL",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}