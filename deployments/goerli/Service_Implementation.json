{
  "address": "0x31C8D6615EA724293BB090E562A2feA7619622F3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolTokenFee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolTokenFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolTreasury",
          "type": "address"
        }
      ],
      "name": "ProtocolTreasuryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SecondaryTGECreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SERVICE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELISTED_USER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IRecordsRegistry.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metaHash",
          "type": "string"
        }
      ],
      "name": "addEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancelProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenCap",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "userWhitelist",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "jurisdiction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityType",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quorumThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decisionThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferValueForDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "executionDelays",
              "type": "uint256[4]"
            }
          ],
          "internalType": "struct IGovernanceSettings.NewGovernanceSettings",
          "name": "governanceSettings",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "trademark",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "userWhitelist",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "tgeInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum IToken.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct IToken.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "createSecondaryTGE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getMaxHardCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinSoftCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getProtocolTokenFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolBeacon_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenBeacon_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tgeBeacon_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "protocolTokenFee_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolTokenFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolTokenFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolTokenFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolTreasury",
          "type": "address"
        }
      ],
      "name": "setProtocolTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferCollectedFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softcap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTVL",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "userWhitelist",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockupDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockupTVL",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITGE.TGEInfo",
          "name": "info",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "validateTGEInfo",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6398e333a2e18b9d787cd12441dde516d67f781a21ea45fdfcc8b8862b373bf4",
  "receipt": {
    "to": null,
    "from": "0xF89e3d72F182BBcccEfFB7F7d2c9ce796D6547e6",
    "contractAddress": "0x31C8D6615EA724293BB090E562A2feA7619622F3",
    "transactionIndex": 54,
    "gasUsed": "4295890",
    "logsBloom": "0x
    "blockHash": "0x3224568cd298f31918ed75dfdc1ffbfd9b47c82e28ae4b9b808f2a9330473fe8",
    "transactionHash": "0x6398e333a2e18b9d787cd12441dde516d67f781a21ea45fdfcc8b8862b373bf4",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 8339636,
        "transactionHash": "0x6398e333a2e18b9d787cd12441dde516d67f781a21ea45fdfcc8b8862b373bf4",
        "address": "0x31C8D6615EA724293BB090E562A2feA7619622F3",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 141,
        "blockHash": "0x3224568cd298f31918ed75dfdc1ffbfd9b47c82e28ae4b9b808f2a9330473fe8"
      }
    ],
    "blockNumber": 8339636,
    "cumulativeGasUsed": "18611508",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0ef7830a8524aeb6236d3b1395ba5b96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolTokenFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolTokenFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolTreasury\",\"type\":\"address\"}],\"name\":\"ProtocolTreasuryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SecondaryTGECreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVICE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTED_USER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRecordsRegistry.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaHash\",\"type\":\"string\"}],\"name\":\"addEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"jurisdiction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityType\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decisionThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferValueForDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"executionDelays\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct IGovernanceSettings.NewGovernanceSettings\",\"name\":\"governanceSettings\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"trademark\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"tgeInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IToken.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IToken.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"createSecondaryTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getMaxHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinSoftCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProtocolTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolBeacon_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenBeacon_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tgeBeacon_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolTokenFee_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolTokenFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolTreasury\",\"type\":\"address\"}],\"name\":\"setProtocolTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTVL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"userWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTVL\",\"type\":\"uint256\"}],\"internalType\":\"struct ITGE.TGEInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"validateTGEInfo\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Protocol entry point\",\"events\":{\"FeesTransferred(address,uint256)\":{\"details\":\"Event emitted on transferring collected fees.\",\"params\":{\"amount\":\"Amount of transferred ETH\",\"to\":\"Transfer recepient\"}},\"PoolCreated(address,address,address)\":{\"details\":\"Event emitted on pool creation.\",\"params\":{\"pool\":\"Pool address\",\"tge\":\"Pool primary TGE address\",\"token\":\"Pool token address\"}},\"ProposalCancelled(address,uint256)\":{\"details\":\"Event emitted on proposal cacellation by service owner.\",\"params\":{\"pool\":\"Pool address\",\"proposalId\":\"Pool local proposal id\"}},\"ProtocolTokenFeeChanged(uint256)\":{\"details\":\"Event emitted on protocol token fee change.\",\"params\":{\"protocolTokenFee\":\"Protocol token fee\"}},\"ProtocolTreasuryChanged(address)\":{\"details\":\"Event emitted on protocol treasury change.\",\"params\":{\"protocolTreasury\":\"Protocol treasury address\"}},\"SecondaryTGECreated(address,address,address)\":{\"details\":\"Event emitted on creation of secondary TGE.\",\"params\":{\"pool\":\"Pool address\",\"tge\":\"Secondary TGE address\",\"token\":\"Preference token address\"}}},\"kind\":\"dev\",\"methods\":{\"addEvent(uint8,uint256,string)\":{\"details\":\"Add event to directory\",\"params\":{\"eventType\":\"Event type\",\"metaHash\":\"Hash value of event metadata\",\"proposalId\":\"Proposal ID\"}},\"addProposal(uint256)\":{\"details\":\"Add proposal to directory\",\"params\":{\"proposalId\":\"Proposal ID\"}},\"cancelProposal(address,uint256)\":{\"details\":\"Cancel pool's proposal\",\"params\":{\"pool\":\"pool\",\"proposalId\":\"proposalId\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createPool(address,uint256,string,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address,uint256,uint256),uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256[4]),string,string)\":{\"details\":\"Create pool\",\"params\":{\"entityType\":\"Company entity type\",\"governanceSettings\":\"Governance setting parameters\",\"jurisdiction\":\"Pool jurisdiction\",\"metadataURI\":\"Metadata URI\",\"pool\":\"Pool address. If not address(0) - creates new token and new primary TGE for an existing pool.\",\"tgeInfo\":\"Pool TGE parameters\",\"tokenCap\":\"Pool token cap\",\"tokenSymbol\":\"Pool token symbol\",\"trademark\":\"Pool trademark\"}},\"createSecondaryTGE((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address,uint256,uint256),(uint8,string,string,string,uint256,uint8),string)\":{\"details\":\"Create secondary TGE\",\"params\":{\"metadataURI\":\"Metadata URI\",\"tgeInfo\":\"TGE parameters\",\"tokenInfo\":\"Token parameters\"}},\"getMaxHardCap(address)\":{\"details\":\"Return max hard cap accounting for protocol token fee\",\"params\":{\"_pool\":\"pool to calculate hard cap against\"},\"returns\":{\"_0\":\"Maximum hard cap\"}},\"getMinSoftCap()\":{\"details\":\"Calculate minimum soft cap for token fee mechanism to work\",\"returns\":{\"_0\":\"softCap minimum soft cap\"}},\"getProtocolTokenFee(uint256)\":{\"details\":\"calculates protocol token fee for given token amount\",\"params\":{\"amount\":\"Token amount\"},\"returns\":{\"_0\":\"tokenFee\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address,uint256)\":{\"details\":\"Constructor function, can only be called once\",\"params\":{\"poolBeacon_\":\"Pool beacon\",\"protocolTokenFee_\":\"Protocol token fee\",\"registry_\":\"Registry address\",\"tgeBeacon_\":\"TGE beacon\",\"tokenBeacon_\":\"Governance token beacon\"}},\"pause()\":{\"details\":\"Pause service\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setProtocolTokenFee(uint256)\":{\"details\":\"Set protocol token fee\",\"params\":{\"_protocolTokenFee\":\"protocol token fee percentage value with 4 decimals. Examples: 1% = 10000, 100% = 1000000, 0.1% = 1000.\"}},\"setProtocolTreasury(address)\":{\"details\":\"Set protocol treasury address\",\"params\":{\"_protocolTreasury\":\"Protocol treasury address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferCollectedFees(address)\":{\"details\":\"Transfer collected createPool protocol fees\",\"params\":{\"to\":\"Transfer recipient\"}},\"unpause()\":{\"details\":\"Unpause service\"}},\"stateVariables\":{\"poolBeacon\":{\"details\":\"Pool beacon\"},\"protocolTokenFee\":{\"details\":\"protocol token fee percentage value with 4 decimals. Examples: 1% = 10000, 100% = 1000000, 0.1% = 1000\"},\"protocolTreasury\":{\"details\":\"address that collects protocol token fees\"},\"registry\":{\"details\":\"Registry address\"},\"tgeBeacon\":{\"details\":\"TGE beacon\"},\"tokenBeacon\":{\"details\":\"Token beacon\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Default admin  role\"},\"EXECUTOR_ROLE()\":{\"notice\":\"Executor role\"},\"SERVICE_MANAGER_ROLE()\":{\"notice\":\"User manager role\"},\"WHITELISTED_USER_ROLE()\":{\"notice\":\"User role\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Service.sol\":\"Service\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x85439e74ab467b6a23d45d32bdc9506cbc3760320289afd605f11638c4138e95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/Service.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"./interfaces/IService.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IToken.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\nimport \\\"./interfaces/registry/IRegistry.sol\\\";\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\n\\n/// @dev Protocol entry point\\ncontract Service is\\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    IService\\n{\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    // CONSTANTS\\n\\n    /// @notice Denominator for shares (such as thresholds)\\n    uint256 private constant DENOM = 100 * 10**4;\\n\\n    /// @notice Default admin  role\\n    bytes32 public constant ADMIN_ROLE = DEFAULT_ADMIN_ROLE;\\n\\n    /// @notice User manager role\\n    bytes32 public constant SERVICE_MANAGER_ROLE = keccak256(\\\"USER_MANAGER\\\");\\n\\n    /// @notice User role\\n    bytes32 public constant WHITELISTED_USER_ROLE =\\n        keccak256(\\\"WHITELISTED_USER\\\");\\n\\n    /// @notice Executor role\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR\\\");\\n\\n    // STORAGE\\n\\n    /// @dev Registry address\\n    IRegistry public registry;\\n\\n    /// @dev Pool beacon\\n    address public poolBeacon;\\n\\n    /// @dev Token beacon\\n    address public tokenBeacon;\\n\\n    /// @dev TGE beacon\\n    address public tgeBeacon;\\n\\n    /// @dev address that collects protocol token fees\\n    address public protocolTreasury;\\n\\n    /// @dev protocol token fee percentage value with 4 decimals. Examples: 1% = 10000, 100% = 1000000, 0.1% = 1000\\n    uint256 public protocolTokenFee;\\n\\n    // EVENTS\\n\\n    /**\\n     * @dev Event emitted on pool creation.\\n     * @param pool Pool address\\n     * @param token Pool token address\\n     * @param tge Pool primary TGE address\\n     */\\n    event PoolCreated(address pool, address token, address tge);\\n\\n    /**\\n     * @dev Event emitted on creation of secondary TGE.\\n     * @param pool Pool address\\n     * @param tge Secondary TGE address\\n     * @param token Preference token address\\n     */\\n    event SecondaryTGECreated(address pool, address tge, address token);\\n\\n    /**\\n     * @dev Event emitted on protocol treasury change.\\n     * @param protocolTreasury Protocol treasury address\\n     */\\n    event ProtocolTreasuryChanged(address protocolTreasury);\\n\\n    /**\\n     * @dev Event emitted on protocol token fee change.\\n     * @param protocolTokenFee Protocol token fee\\n     */\\n    event ProtocolTokenFeeChanged(uint256 protocolTokenFee);\\n\\n    /**\\n     * @dev Event emitted on transferring collected fees.\\n     * @param to Transfer recepient\\n     * @param amount Amount of transferred ETH\\n     */\\n    event FeesTransferred(address to, uint256 amount);\\n\\n    /**\\n     * @dev Event emitted on proposal cacellation by service owner.\\n     * @param pool Pool address\\n     * @param proposalId Pool local proposal id\\n     */\\n    event ProposalCancelled(address pool, uint256 proposalId);\\n\\n    // MODIFIERS\\n\\n    modifier onlyPool() {\\n        require(\\n            registry.typeOf(msg.sender) == IRecordsRegistry.ContractType.Pool,\\n            ExceptionsLibrary.NOT_POOL\\n        );\\n        _;\\n    }\\n\\n    // INITIALIZER AND CONSTRUCTOR\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Constructor function, can only be called once\\n     * @param registry_ Registry address\\n     * @param poolBeacon_ Pool beacon\\n     * @param tokenBeacon_ Governance token beacon\\n     * @param tgeBeacon_ TGE beacon\\n     * @param protocolTokenFee_ Protocol token fee\\n     */\\n    function initialize(\\n        IRegistry registry_,\\n        address poolBeacon_,\\n        address tokenBeacon_,\\n        address tgeBeacon_,\\n        uint256 protocolTokenFee_\\n    ) external initializer {\\n        require(\\n            address(registry_) != address(0),\\n            ExceptionsLibrary.ADDRESS_ZERO\\n        );\\n        require(poolBeacon_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(tokenBeacon_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(tgeBeacon_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        registry = registry_;\\n        poolBeacon = poolBeacon_;\\n        tokenBeacon = tokenBeacon_;\\n        tgeBeacon = tgeBeacon_;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(SERVICE_MANAGER_ROLE, msg.sender);\\n        _grantRole(EXECUTOR_ROLE, msg.sender);\\n        _setRoleAdmin(WHITELISTED_USER_ROLE, SERVICE_MANAGER_ROLE);\\n\\n        setProtocolTreasury(address(this));\\n        setProtocolTokenFee(protocolTokenFee_);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev Create pool\\n     * @param pool Pool address. If not address(0) - creates new token and new primary TGE for an existing pool.\\n     * @param tokenCap Pool token cap\\n     * @param tokenSymbol Pool token symbol\\n     * @param tgeInfo Pool TGE parameters\\n     * @param jurisdiction Pool jurisdiction\\n     * @param entityType Company entity type\\n     * @param governanceSettings Governance setting parameters\\n     * @param trademark Pool trademark\\n     * @param metadataURI Metadata URI\\n     */\\n    function createPool(\\n        IPool pool,\\n        uint256 tokenCap,\\n        string memory tokenSymbol,\\n        ITGE.TGEInfo memory tgeInfo,\\n        uint256 jurisdiction,\\n        uint256 entityType,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings,\\n        string memory trademark,\\n        string memory metadataURI\\n    ) external payable nonReentrant whenNotPaused {\\n        // Check token cap\\n        require(tokenCap >= 1 ether, ExceptionsLibrary.INVALID_CAP);\\n\\n        // Add protocol fee to token cap\\n        tokenCap += getProtocolTokenFee(tokenCap);\\n\\n        if (address(pool) == address(0)) {\\n            // Check that user is whitelisted and remove him from whitelist\\n            _checkRole(WHITELISTED_USER_ROLE);\\n            _revokeRole(WHITELISTED_USER_ROLE, msg.sender);\\n\\n            // Lock company\\n            IRegistry.CompanyInfo memory companyInfo = registry.lockCompany(\\n                jurisdiction,\\n                entityType\\n            );\\n\\n            // Check fee\\n            require(\\n                msg.value == companyInfo.fee,\\n                ExceptionsLibrary.INCORRECT_ETH_PASSED\\n            );\\n\\n            // Create pool\\n            pool = _createPool();\\n\\n            // Initialize pool contract\\n            pool.initialize(\\n                msg.sender,\\n                trademark,\\n                governanceSettings,\\n                companyInfo\\n            );\\n        } else {\\n            // Check that pool is valid\\n            require(\\n                registry.typeOf(address(pool)) ==\\n                    IRecordsRegistry.ContractType.Pool,\\n                ExceptionsLibrary.NOT_POOL\\n            );\\n\\n            // Check that sender is pool owner\\n            require(\\n                msg.sender == pool.owner(),\\n                ExceptionsLibrary.NOT_POOL_OWNER\\n            );\\n\\n            // Check that pool is not active yet\\n            require(!pool.isDAO(), ExceptionsLibrary.IS_DAO);\\n        }\\n\\n        // Create token contract\\n        IToken token = _createToken();\\n\\n        // Create TGE contract\\n        ITGE tge = _createTGE(metadataURI, address(pool));\\n\\n        // Initialize token\\n        token.initialize(\\n            address(pool),\\n            IToken.TokenInfo({\\n                tokenType: IToken.TokenType.Governance,\\n                name: \\\"\\\",\\n                symbol: tokenSymbol,\\n                description: \\\"\\\",\\n                cap: tokenCap,\\n                decimals: 18\\n            }),\\n            address(tge)\\n        );\\n\\n        // Set token as pool token\\n        pool.setToken(address(token), IToken.TokenType.Governance);\\n\\n        // Initialize TGE\\n        tge.initialize(token, tgeInfo);\\n\\n        // Emit event\\n        emit PoolCreated(address(pool), address(token), address(tge));\\n    }\\n\\n    // PUBLIC INDIRECT FUNCTIONS (CALLED THROUGH POOL)\\n\\n    /**\\n     * @dev Create secondary TGE\\n     * @param tgeInfo TGE parameters\\n     * @param tokenInfo Token parameters\\n     * @param metadataURI Metadata URI\\n     */\\n    function createSecondaryTGE(\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external override onlyPool nonReentrant whenNotPaused {\\n        // Create TGE\\n        ITGE tge = _createTGE(metadataURI, msg.sender);\\n\\n        // Get token contract\\n        IToken token = IPool(msg.sender).getToken(tokenInfo.tokenType);\\n\\n        // Check for token type (Governance or Preference)\\n        if (tokenInfo.tokenType == IToken.TokenType.Governance) {\\n            // Case of Governance token\\n\\n            // Check that there is no active TGE\\n            require(\\n                ITGE(token.lastTGE()).state() != ITGE.State.Active,\\n                ExceptionsLibrary.ACTIVE_TGE_EXISTS\\n            );\\n\\n            // Add TGE to token's list\\n            token.addTGE(address(tge));\\n\\n            // Initialize TGE\\n            tge.initialize(token, tgeInfo);\\n        } else if (tokenInfo.tokenType == IToken.TokenType.Preference) {\\n            // Case of Preference token\\n\\n            // Check if it's new token or additional TGE\\n            if (\\n                address(token) == address(0) ||\\n                ITGE(token.getTGEList()[0]).state() == ITGE.State.Failed\\n            ) {\\n                // Create token contract\\n                token = _createToken();\\n\\n                // Initialize token contract\\n                token.initialize(msg.sender, tokenInfo, address(tge));\\n\\n                // Add token to Pool\\n                IPool(msg.sender).setToken(\\n                    address(token),\\n                    IToken.TokenType.Preference\\n                );\\n\\n                // Initialize TGE\\n                tge.initialize(token, tgeInfo);\\n            } else {\\n                // Check that there is no active TGE\\n                require(\\n                    ITGE(token.lastTGE()).state() != ITGE.State.Active,\\n                    ExceptionsLibrary.ACTIVE_TGE_EXISTS\\n                );\\n\\n                // Add TGE to token's list\\n                token.addTGE(address(tge));\\n\\n                // Initialize TGE\\n                tge.initialize(token, tgeInfo);\\n            }\\n        } else {\\n            // Revert for unsupported token types\\n            revert(ExceptionsLibrary.UNSUPPORTED_TOKEN_TYPE);\\n        }\\n\\n        // Emit event\\n        emit SecondaryTGECreated(msg.sender, address(tge), address(token));\\n    }\\n\\n    /**\\n     * @dev Add proposal to directory\\n     * @param proposalId Proposal ID\\n     */\\n    function addProposal(uint256 proposalId) external onlyPool whenNotPaused {\\n        registry.addProposalRecord(msg.sender, proposalId);\\n    }\\n\\n    /**\\n     * @dev Add event to directory\\n     * @param eventType Event type\\n     * @param proposalId Proposal ID\\n     * @param metaHash Hash value of event metadata\\n     */\\n    function addEvent(\\n        IRegistry.EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external onlyPool whenNotPaused {\\n        registry.addEventRecord(msg.sender, eventType, proposalId, metaHash);\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    /**\\n     * @dev Transfer collected createPool protocol fees\\n     * @param to Transfer recipient\\n     */\\n    function transferCollectedFees(address to)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(to != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        uint256 balance = payable(address(this)).balance;\\n        (bool success, ) = payable(to).call{value: balance}(\\\"\\\");\\n        require(success, ExceptionsLibrary.EXECUTION_FAILED);\\n        emit FeesTransferred(to, balance);\\n    }\\n\\n    /**\\n     * @dev Set protocol treasury address\\n     * @param _protocolTreasury Protocol treasury address\\n     */\\n    function setProtocolTreasury(address _protocolTreasury)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            _protocolTreasury != address(0),\\n            ExceptionsLibrary.ADDRESS_ZERO\\n        );\\n\\n        protocolTreasury = _protocolTreasury;\\n        emit ProtocolTreasuryChanged(protocolTreasury);\\n    }\\n\\n    /**\\n     * @dev Set protocol token fee\\n     * @param _protocolTokenFee protocol token fee percentage value with 4 decimals.\\n     * Examples: 1% = 10000, 100% = 1000000, 0.1% = 1000.\\n     */\\n    function setProtocolTokenFee(uint256 _protocolTokenFee)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_protocolTokenFee <= DENOM, ExceptionsLibrary.INVALID_VALUE);\\n\\n        protocolTokenFee = _protocolTokenFee;\\n        emit ProtocolTokenFeeChanged(_protocolTokenFee);\\n    }\\n\\n    /**\\n     * @dev Cancel pool's proposal\\n     * @param pool pool\\n     * @param proposalId proposalId\\n     */\\n    function cancelProposal(address pool, uint256 proposalId)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        IPool(pool).cancelProposal(proposalId);\\n        emit ProposalCancelled(pool, proposalId);\\n    }\\n\\n    /**\\n     * @dev Pause service\\n     */\\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause service\\n     */\\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    /**\\n     * @dev Calculate minimum soft cap for token fee mechanism to work\\n     * @return softCap minimum soft cap\\n     */\\n    function getMinSoftCap() public view returns (uint256) {\\n        return DENOM / protocolTokenFee;\\n    }\\n\\n    /**\\n     * @dev calculates protocol token fee for given token amount\\n     * @param amount Token amount\\n     * @return tokenFee\\n     */\\n    function getProtocolTokenFee(uint256 amount) public view returns (uint256) {\\n        require(amount >= getMinSoftCap(), ExceptionsLibrary.INVALID_VALUE);\\n\\n        // TODO: refactor\\n        uint256 mul = 1;\\n        if (amount > 10**20) {\\n            mul = 10**12;\\n            amount = amount / mul;\\n        }\\n\\n        return ((protocolTokenFee * amount) / DENOM) * mul;\\n    }\\n\\n    /**\\n     * @dev Return max hard cap accounting for protocol token fee\\n     * @param _pool pool to calculate hard cap against\\n     * @return Maximum hard cap\\n     */\\n    function getMaxHardCap(address _pool) public view returns (uint256) {\\n        if (\\n            registry.typeOf(_pool) == IRecordsRegistry.ContractType.Pool &&\\n            IPool(_pool).isDAO()\\n        ) {\\n            return\\n                IPool(_pool).getToken(IToken.TokenType.Governance).cap() -\\n                getProtocolTokenFee(\\n                    IPool(_pool).getToken(IToken.TokenType.Governance).cap()\\n                );\\n        }\\n\\n        return type(uint256).max - getProtocolTokenFee(type(uint256).max);\\n    }\\n\\n    function validateTGEInfo(\\n        ITGE.TGEInfo calldata info,\\n        uint256 cap,\\n        uint256 totalSupply\\n    ) external view {\\n        // Check unit of account\\n        if (info.unitOfAccount != address(0))\\n            require(\\n                IERC20Upgradeable(info.unitOfAccount).totalSupply() > 0,\\n                ExceptionsLibrary.INVALID_TOKEN\\n            );\\n\\n        // Check min purchase and price\\n        require(\\n            info.minPurchase >= 1000 &&\\n                (info.price * info.minPurchase >= 10**18 || info.price == 0),\\n            ExceptionsLibrary.INVALID_VALUE\\n        );\\n\\n        // Check hardcap and softcap\\n        require(\\n            info.hardcap >= getMinSoftCap() && info.hardcap >= info.softcap,\\n            ExceptionsLibrary.INVALID_HARDCAP\\n        );\\n\\n        // Check remaining supply\\n        uint256 remainingSupply = cap - totalSupply;\\n        require(\\n            info.hardcap <= remainingSupply,\\n            ExceptionsLibrary.HARDCAP_OVERFLOW_REMAINING_SUPPLY\\n        );\\n        require(\\n            info.hardcap + getProtocolTokenFee(info.hardcap) <= remainingSupply,\\n            ExceptionsLibrary.HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\\n        );\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @dev Create pool contract and initialize it\\n     * @return pool Pool contract\\n     */\\n    function _createPool() internal returns (IPool pool) {\\n        // Create pool contract\\n        pool = IPool(address(new BeaconProxy(poolBeacon, \\\"\\\")));\\n\\n        // Add pool contract to registry\\n        registry.addContractRecord(\\n            address(pool),\\n            IRecordsRegistry.ContractType.Pool,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Create token contract\\n     * @return token Token contract\\n     */\\n    function _createToken() internal returns (IToken token) {\\n        // Create token contract\\n        token = IToken(address(new BeaconProxy(tokenBeacon, \\\"\\\")));\\n\\n        // Add token contract to registry\\n        registry.addContractRecord(\\n            address(token),\\n            IRecordsRegistry.ContractType.GovernanceToken,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Create TGE contract\\n     * @param metadataURI TGE metadata URI\\n     * @param pool Pool address\\n     * @return tge TGE contract\\n     */\\n    function _createTGE(string memory metadataURI, address pool)\\n        internal\\n        returns (ITGE tge)\\n    {\\n        // Create TGE contract\\n        tge = ITGE(address(new BeaconProxy(tgeBeacon, \\\"\\\")));\\n\\n        // Add TGE contract to registry\\n        registry.addContractRecord(\\n            address(tge),\\n            IRecordsRegistry.ContractType.TGE,\\n            metadataURI\\n        );\\n\\n        // Add TGE event to registry\\n        registry.addEventRecord(pool, IRecordsRegistry.EventType.TGE, 0, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbdab565b7136cec0bbf99519c341621d789e18958853e781d824791a8c892c11\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\nimport \\\"./governor/IGovernorProposals.sol\\\";\\n\\ninterface IPool is IGovernorProposals {\\n    function initialize(\\n        address owner_,\\n        string memory trademark_,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\n        IRegistry.CompanyInfo memory companyInfo_\\n    ) external;\\n\\n    function setToken(address token_, IToken.TokenType tokenType_) external;\\n\\n    function cancelProposal(uint256 proposalId) external;\\n\\n    function owner() external view returns (address);\\n\\n    function isDAO() external view returns (bool);\\n\\n    function trademark() external view returns (string memory);\\n\\n    function paused() external view returns (bool);\\n\\n    function getToken(IToken.TokenType tokenType_)\\n        external\\n        view\\n        returns (IToken);\\n}\\n\",\"keccak256\":\"0xd7277d02fa55717aeaa915a1ae33b0d89edf80d291d471e57ae676cc5b25a6db\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./IToken.sol\\\";\\n\\ninterface IService is IAccessControlEnumerableUpgradeable {\\n    function ADMIN_ROLE() external view returns (bytes32);\\n\\n    function WHITELISTED_USER_ROLE() external view returns (bytes32);\\n\\n    function SERVICE_MANAGER_ROLE() external view returns (bytes32);\\n\\n    function EXECUTOR_ROLE() external view returns (bytes32);\\n\\n    function createSecondaryTGE(\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function addEvent(\\n        IRegistry.EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external;\\n\\n    function registry() external view returns (IRegistry);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTokenFee() external view returns (uint256);\\n\\n    function getMinSoftCap() external view returns (uint256);\\n\\n    function getProtocolTokenFee(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function poolBeacon() external view returns (address);\\n\\n    function tgeBeacon() external view returns (address);\\n\\n    function validateTGEInfo(\\n        ITGE.TGEInfo calldata info,\\n        uint256 cap,\\n        uint256 totalSupply\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x7b2bb8901fbe0fbdeab01abc1c0d267de98ce430903490752bfc39049fcd48ac\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 vestingPercent;\\n        uint256 vestingDuration;\\n        uint256 vestingTVL;\\n        uint256 duration;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n    }\\n\\n    function initialize(IToken token_, TGEInfo calldata info) external;\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function state() external view returns (State);\\n\\n    function transferUnlocked() external view returns (bool);\\n\\n    function totalVested() external view returns (uint256);\\n\\n    function purchaseOf(address user) external view returns (uint256);\\n\\n    function vestedBalanceOf(address user) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xca0ba3f8a3299cbaaf4022330f4f336b03f89f6d9d6818d04eac0aaef28950b1\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IToken is IVotesUpgradeable, IERC20Upgradeable {\\n    struct TokenInfo {\\n        TokenType tokenType;\\n        string name;\\n        string symbol;\\n        string description;\\n        uint256 cap;\\n        uint8 decimals;\\n    }\\n\\n    enum TokenType {\\n        None,\\n        Governance,\\n        Preference\\n    }\\n\\n    function initialize(\\n        address pool_,\\n        TokenInfo memory info,\\n        address primaryTGE_\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenType() external view returns (TokenType);\\n\\n    function lastTGE() external view returns (address);\\n\\n    function getTGEList() external view returns (address[] memory);\\n\\n    function isPrimaryTGESuccessful() external view returns (bool);\\n\\n    function addTGE(address tge) external;\\n\\n    function getTotalTGEVestedTokens() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f6a8deddfa30694186ba7593c101c3860a120f1331b8dd4840efbc44a91a54f\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernanceSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGovernanceSettings {\\n    /**\\n     * @notice Governance settings\\n     * @param proposalThreshold_ Proposal threshold\\n     * @param quorumThreshold_ Quorum threshold\\n     * @param decisionThreshold_ Decision threshold\\n     * @param votingDuration_ Voting duration\\n     * @param transferValueForDelay_ Transfer value for delay\\n     * @param executionDelays_ List of execution delays for all proposal types\\n     */\\n    struct NewGovernanceSettings {\\n        uint256 proposalThreshold;\\n        uint256 quorumThreshold;\\n        uint256 decisionThreshold;\\n        uint256 votingDuration;\\n        uint256 transferValueForDelay;\\n        uint256[4] executionDelays;\\n    }\\n\\n    function setGovernanceSettings(NewGovernanceSettings memory settings)\\n        external;\\n}\\n\",\"keccak256\":\"0x89baaa8387d7ce9464b21af27cf8ad144e7fcf95097be75df9e16e64b936102d\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernorProposals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../IService.sol\\\";\\n\\ninterface IGovernorProposals {\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0xccb34e00bebdc99b089351a10727d57141e22268ef25b289e7d3aba34177f9c7\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ICompaniesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../ITGE.sol\\\";\\nimport \\\"../IToken.sol\\\";\\n\\ninterface ICompaniesRegistry {\\n    struct CompanyInfo {\\n        uint256 jurisdiction;\\n        uint256 entityType;\\n        string ein;\\n        string dateOfIncorporation;\\n        uint256 fee;\\n    }\\n\\n    function lockCompany(uint256 jurisdiction, uint256 entityType)\\n        external\\n        returns (CompanyInfo memory);\\n}\\n\",\"keccak256\":\"0xa2a610c882337a279f3575cd663c9aefbeb8c17ca37c97ffa2e7e6b778a8c084\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRecordsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IRecordsRegistry {\\n    // Directory\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        PreferenceToken,\\n        TGE\\n    }\\n\\n    enum EventType {\\n        None,\\n        Transfer,\\n        TGE,\\n        GovernanceSettings\\n    }\\n\\n    /**\\n     * @dev Contract information structure\\n     * @param addr Contract address\\n     * @param contractType Contract type\\n     * @param description Contract description\\n     */\\n    struct ContractInfo {\\n        address addr;\\n        ContractType contractType;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Proposal information structure\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param description Proposal description\\n     */\\n    struct ProposalInfo {\\n        address pool;\\n        uint256 proposalId;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Event information structure\\n     * @param eventType Event type\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param metaHash Hash value of event metadata\\n     */\\n    struct Event {\\n        EventType eventType;\\n        address pool;\\n        uint256 proposalId;\\n        string metaHash;\\n    }\\n\\n    function addContractRecord(\\n        address addr,\\n        ContractType contractType,\\n        string memory description\\n    ) external returns (uint256 index);\\n\\n    function addProposalRecord(address pool, uint256 proposalId)\\n        external\\n        returns (uint256 index);\\n\\n    function addEventRecord(\\n        address pool,\\n        EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n}\\n\",\"keccak256\":\"0xf6c8e1758c25ea6dea98ac5e5874820a2f538bac7a76641eba7e553b9b562cf9\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ICompaniesRegistry.sol\\\";\\nimport \\\"./ITokensRegistry.sol\\\";\\nimport \\\"./IRecordsRegistry.sol\\\";\\n\\ninterface IRegistry is ITokensRegistry, ICompaniesRegistry, IRecordsRegistry {}\\n\",\"keccak256\":\"0xe16ba0ac61345d022330464cb8dc4608a4b054d2f2f7fe8de166ad0be5ec8d73\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ITokensRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITokensRegistry {\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcbbf6de279d7d4b0b55061c2ee0980e1b4e5a769ba6f01d39ec681111f51b110\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary ExceptionsLibrary {\\n    string public constant ADDRESS_ZERO = \\\"ADDRESS_ZERO\\\";\\n    string public constant INCORRECT_ETH_PASSED = \\\"INCORRECT_ETH_PASSED\\\";\\n    string public constant NO_COMPANY = \\\"NO_COMPANY\\\";\\n    string public constant INVALID_TOKEN = \\\"INVALID_TOKEN\\\";\\n    string public constant NOT_POOL = \\\"NOT_POOL\\\";\\n    string public constant NOT_TGE = \\\"NOT_TGE\\\";\\n    string public constant NOT_Registry = \\\"NOT_Registry\\\";\\n    string public constant NOT_POOL_OWNER = \\\"NOT_POOL_OWNER\\\";\\n    string public constant NOT_SERVICE_OWNER = \\\"NOT_SERVICE_OWNER\\\";\\n    string public constant IS_DAO = \\\"IS_DAO\\\";\\n    string public constant NOT_DAO = \\\"NOT_DAO\\\";\\n    string public constant NOT_WHITELISTED = \\\"NOT_WHITELISTED\\\";\\n    string public constant ALREADY_WHITELISTED = \\\"ALREADY_WHITELISTED\\\";\\n    string public constant ALREADY_NOT_WHITELISTED = \\\"ALREADY_NOT_WHITELISTED\\\";\\n    string public constant NOT_SERVICE = \\\"NOT_SERVICE\\\";\\n    string public constant WRONG_STATE = \\\"WRONG_STATE\\\";\\n    string public constant TRANSFER_FAILED = \\\"TRANSFER_FAILED\\\";\\n    string public constant CLAIM_NOT_AVAILABLE = \\\"CLAIM_NOT_AVAILABLE\\\";\\n    string public constant NO_LOCKED_BALANCE = \\\"NO_LOCKED_BALANCE\\\";\\n    string public constant LOCKUP_TVL_REACHED = \\\"LOCKUP_TVL_REACHED\\\";\\n    string public constant HARDCAP_OVERFLOW = \\\"HARDCAP_OVERFLOW\\\";\\n    string public constant MAX_PURCHASE_OVERFLOW = \\\"MAX_PURCHASE_OVERFLOW\\\";\\n    string public constant HARDCAP_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant MIN_PURCHASE_UNDERFLOW = \\\"MIN_PURCHASE_UNDERFLOW\\\";\\n    string public constant LOW_UNLOCKED_BALANCE = \\\"LOW_UNLOCKED_BALANCE\\\";\\n    string public constant ZERO_PURCHASE_AMOUNT = \\\"ZERO_PURCHASE_AMOUNTs\\\";\\n    string public constant NOTHING_TO_REDEEM = \\\"NOTHING_TO_REDEEM\\\";\\n    string public constant RECORD_IN_USE = \\\"RECORD_IN_USE\\\";\\n    string public constant INVALID_EIN = \\\"INVALID_EIN\\\";\\n    string public constant VALUE_ZERO = \\\"VALUE_ZERO\\\";\\n    string public constant ALREADY_SET = \\\"ALREADY_SET\\\";\\n    string public constant VOTING_FINISHED = \\\"VOTING_FINISHED\\\";\\n    string public constant ALREADY_EXECUTED = \\\"ALREADY_EXECUTED\\\";\\n    string public constant ACTIVE_TGE_EXISTS = \\\"ACTIVE_TGE_EXISTS\\\";\\n    string public constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\n    string public constant INVALID_CAP = \\\"INVALID_CAP\\\";\\n    string public constant INVALID_HARDCAP = \\\"INVALID_HARDCAP\\\";\\n    string public constant ONLY_POOL = \\\"ONLY_POOL\\\";\\n    string public constant ETH_TRANSFER_FAIL = \\\"ETH_TRANSFER_FAIL\\\";\\n    string public constant TOKEN_TRANSFER_FAIL = \\\"TOKEN_TRANSFER_FAIL\\\";\\n    string public constant BLOCK_DELAY = \\\"BLOCK_DELAY\\\";\\n    string public constant SERVICE_PAUSED = \\\"SERVICE_PAUSED\\\";\\n    string public constant INVALID_PROPOSAL_TYPE = \\\"INVALID_PROPOSAL_TYPE\\\";\\n    string public constant EXECUTION_FAILED = \\\"EXECUTION_FAILED\\\";\\n    string public constant INVALID_USER = \\\"INVALID_USER\\\";\\n    string public constant NOT_LAUNCHED = \\\"NOT_LAUNCHED\\\";\\n    string public constant LAUNCHED = \\\"LAUNCHED\\\";\\n    string public constant VESTING_TVL_REACHED = \\\"VESTING_TVL_REACHED\\\";\\n    string public constant PREFERENCE_TOKEN_EXISTS = \\\"PREFERENCE_TOKEN_EXISTS\\\";\\n    string public constant INVALID_SOFTCAP = \\\"INVALID_SOFTCAP\\\";\\n    string public constant THRESHOLD_NOT_REACHED = \\\"THRESHOLD_NOT_REACHED\\\";\\n    string public constant UNSUPPORTED_TOKEN_TYPE = \\\"UNSUPPORTED_TOKEN_TYPE\\\";\\n}\\n\",\"keccak256\":\"0x63a7cdc260e00e02c91da988f20c2965f7437733f4fb35a1898daaa93dafb462\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b614c7a80620000f46000396000f3fe6080604052600436106200022f5760003560e01c8063879010f4116200012f578063c979e8a711620000ad578063d7f964fd1162000078578063d7f964fd146200067e578063db47fbe914620006a3578063dedcd30714620006c8578063e768292814620006ed578063f7013ef6146200070557600080fd5b8063c979e8a714620005db578063ca15c8731462000611578063ccf5a77c1462000636578063d547741f146200065957600080fd5b8063a217fddf11620000fa578063a217fddf146200044e578063a36894711462000557578063b3e86165146200057c578063b677bc691462000593578063c5a7b2ea14620005b857600080fd5b8063879010f414620004c35780639010d07c14620004e857806391d14854146200050d5780639d838ad3146200053257600080fd5b80633f4ba83a11620001bd5780635c975abb11620001885780635c975abb146200043457806375b238fc146200044e5780637b1039991462000465578063803db96d14620004885780638456cb5914620004ab57600080fd5b80633f4ba83a14620003ad5780633fec91a414620003c557806346b3b62614620003ea57806353350755146200040f57600080fd5b80630c5a61f811620001fe5780630c5a61f81462000308578063248a9ca3146200032f5780632f2ff15d146200036357806336568abe146200038857600080fd5b806301569ab0146200023457806301ffc9a7146200027457806303700be814620002aa57806307bd026514620002d2575b600080fd5b3480156200024157600080fd5b506101305462000257906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200028157600080fd5b50620002996200029336600462002fb2565b6200072a565b60405190151581526020016200026b565b348015620002b757600080fd5b50620002c36101325481565b6040519081526020016200026b565b348015620002df57600080fd5b50620002c37f9cf85f95575c3af1e116e3d37fd41e7f36a8a373623f51ffaaa87fdd032fa76781565b3480156200031557600080fd5b506200032d6200032736600462003006565b62000758565b005b3480156200033c57600080fd5b50620002c36200034e36600462003026565b60009081526065602052604090206001015490565b3480156200037057600080fd5b506200032d6200038236600462003040565b62000813565b3480156200039557600080fd5b506200032d620003a736600462003040565b62000841565b348015620003ba57600080fd5b506200032d620008c3565b348015620003d257600080fd5b506200032d620003e436600462003026565b620008dd565b348015620003f757600080fd5b506200032d62000409366004620031f7565b62000a29565b3480156200041c57600080fd5b506200032d6200042e3660046200328f565b62001035565b3480156200044157600080fd5b5060fb5460ff1662000299565b3480156200045b57600080fd5b50620002c3600081565b3480156200047257600080fd5b5061012d5462000257906001600160a01b031681565b3480156200049557600080fd5b506101315462000257906001600160a01b031681565b348015620004b857600080fd5b506200032d620010e6565b348015620004d057600080fd5b506200032d620004e236600462003006565b620010fd565b348015620004f557600080fd5b506200025762000507366004620032be565b62001245565b3480156200051a57600080fd5b50620002996200052c36600462003040565b62001266565b3480156200053f57600080fd5b50620002c36200055136600462003026565b62001291565b3480156200056457600080fd5b50620002c36200057636600462003006565b62001340565b6200032d6200058d366004620034ff565b62001616565b348015620005a057600080fd5b506200032d620005b2366004620035fd565b62001c80565b348015620005c557600080fd5b5061012e5462000257906001600160a01b031681565b348015620005e857600080fd5b50620002c37f2b1db18cd92cf6947e9bb2f532380e05e806a043d20a65c532268a1d7f4b5e7381565b3480156200061e57600080fd5b50620002c36200063036600462003026565b62001ddb565b3480156200064357600080fd5b5061012f5462000257906001600160a01b031681565b3480156200066657600080fd5b506200032d6200067836600462003040565b62001df4565b3480156200068b57600080fd5b506200032d6200069d3660046200368f565b62001e1d565b348015620006b057600080fd5b50620002c360008051602062004bd283398151915281565b348015620006d557600080fd5b506200032d620006e736600462003026565b620020a8565b348015620006fa57600080fd5b50620002c362002138565b3480156200071257600080fd5b506200032d62000724366004620036e0565b62002153565b60006001600160e01b03198216635a05180f60e01b14806200075257506200075282620024b8565b92915050565b60006200076581620024ef565b60408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038316620007bb5760405162461bcd60e51b8152600401620007b29190620037a1565b60405180910390fd5b5061013180546001600160a01b0319166001600160a01b0384169081179091556040519081527f48919a8bb9d5ad92fa352adb62046eaabb006b67ba2fcf7566ed0879ab5a27c3906020015b60405180910390a15050565b6000828152606560205260409020600101546200083081620024ef565b6200083c8383620024fb565b505050565b6001600160a01b0381163314620008b35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401620007b2565b620008bf828262002521565b5050565b6000620008d081620024ef565b620008da62002547565b50565b61012d54604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa15801562000928573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200094e9190620037cc565b6004811115620009625762000962620037b6565b14604051806040016040528060088152602001671393d517d413d3d360c21b81525090620009a55760405162461bcd60e51b8152600401620007b29190620037a1565b50620009b06200259b565b61012d5460405163f4be936960e01b8152336004820152602481018390526001600160a01b039091169063f4be9369906044016020604051808303816000875af115801562000a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008bf9190620037ef565b61012d54604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa15801562000a74573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9a9190620037cc565b600481111562000aae5762000aae620037b6565b14604051806040016040528060088152602001671393d517d413d3d360c21b8152509062000af15760405162461bcd60e51b8152600401620007b29190620037a1565b5062000afc620025e5565b62000b066200259b565b600062000b14823362002640565b90506000336382b8660062000b2d602087018762003817565b6040518263ffffffff1660e01b815260040162000b4b91906200384e565b602060405180830381865afa15801562000b69573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b8f91906200385e565b9050600162000ba2602086018662003817565b600281111562000bb65762000bb6620037b6565b0362000db25760005b816001600160a01b0316633eac99986040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000bfe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2491906200385e565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c62573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c8891906200387e565b600281111562000c9c5762000c9c620037b6565b1415604051806040016040528060118152602001704143544956455f5447455f45584953545360781b8152509062000ce95760405162461bcd60e51b8152600401620007b29190620037a1565b50604051630a08df1760e31b81526001600160a01b038381166004830152821690635046f8b8906024015b600060405180830381600087803b15801562000d2f57600080fd5b505af115801562000d44573d6000803e3d6000fd5b5050604051632c4e8d5560e01b81526001600160a01b0385169250632c4e8d55915062000d7890849089906004016200393d565b600060405180830381600087803b15801562000d9357600080fd5b505af115801562000da8573d6000803e3d6000fd5b5050505062000fdf565b600262000dc3602086018662003817565b600281111562000dd75762000dd7620037b6565b0362000f99576001600160a01b038116158062000ef057506001816001600160a01b0316620a04ae6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000e2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000e59919081019062003a22565b60008151811062000e6e5762000e6e62003ac6565b60200260200101516001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000eb4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eda91906200387e565b600281111562000eee5762000eee620037b6565b145b1562000f915762000f00620027a1565b604051635c138e7d60e01b81529091506001600160a01b03821690635c138e7d9062000f359033908890879060040162003b4d565b600060405180830381600087803b15801562000f5057600080fd5b505af115801562000f65573d6000803e3d6000fd5b505060405163c4767b9560e01b815233925063c4767b95915062000d1490849060029060040162003c45565b600062000bbf565b6040805180820182526016815275554e535550504f525445445f544f4b454e5f5459504560501b6020820152905162461bcd60e51b8152620007b29190600401620037a1565b604080513381526001600160a01b03848116602083015283168183015290517ff74d32d2119bcaf2616d37895d32adafbee1dceb25a98646ca514098f422fd899181900360600190a150506200083c600160c955565b60006200104281620024ef565b60405163e0a8f6f560e01b8152600481018390526001600160a01b0384169063e0a8f6f590602401600060405180830381600087803b1580156200108557600080fd5b505af11580156200109a573d6000803e3d6000fd5b5050604080516001600160a01b0387168152602081018690527f5d423f6a55211a90b8438786aa7edfa40d3eef381b6aae048b52daf814c16462935001905060405180910390a1505050565b6000620010f381620024ef565b620008da62002885565b60006200110a81620024ef565b60408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038316620011575760405162461bcd60e51b8152600401620007b29190620037a1565b506040513031906000906001600160a01b0385169083908381818185875af1925050503d8060008114620011a8576040519150601f19603f3d011682016040523d82523d6000602084013e620011ad565b606091505b50509050806040518060400160405280601081526020016f11561150d5551253d397d1905253115160821b81525090620011fc5760405162461bcd60e51b8152600401620007b29190620037a1565b50604080516001600160a01b0386168152602081018490527fc812aa15be10cc23ff245a12080e7de523f13b7fd4a16277a703c4f8e3113709910160405180910390a150505050565b60008281526097602052604081206200125f9083620028c5565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006200129d62002138565b8210156040518060400160405280600d81526020016c494e56414c49445f56414c554560981b81525090620012e75760405162461bcd60e51b8152600401620007b29190620037a1565b50600168056bc75e2d6310000083111562001312575064e8d4a510006200130f818462003c7a565b92505b80620f4240846101325462001328919062003c9d565b62001334919062003c7a565b6200125f919062003c9d565b6000600161012d54604051630db9619f60e31b81526001600160a01b03858116600483015290911690636dcb0cf890602401602060405180830381865afa15801562001390573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013b69190620037cc565b6004811115620013ca57620013ca620037b6565b148015620014385750816001600160a01b031663e47bfee86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001438919062003cb7565b15620015fb5760405162415c3360e91b815262001519906001600160a01b038416906382b866009062001471906001906004016200384e565b602060405180830381865afa1580156200148f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014b591906200385e565b6001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620014f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005519190620037ef565b60405162415c3360e91b81526001600160a01b038416906382b866009062001547906001906004016200384e565b602060405180830381865afa15801562001565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200158b91906200385e565b6001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620015c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015ef9190620037ef565b62000752919062003cdb565b6200160860001962001291565b620007529060001962003cdb565b62001620620025e5565b6200162a6200259b565b60408051808201909152600b81526a0494e56414c49445f4341560ac1b6020820152670de0b6b3a7640000891015620016785760405162461bcd60e51b8152600401620007b29190620037a1565b50620016848862001291565b62001690908962003cf1565b97506001600160a01b0389166200182957620016bb60008051602062004bd2833981519152620024ef565b620016d660008051602062004bd28339815191523362002521565b61012d54604051633b84067560e21b815260048101879052602481018690526000916001600160a01b03169063ee1019d4906044016000604051808303816000875af11580156200172b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001755919081019062003d53565b90508060800151341460405180604001604052806014815260200173125390d3d4949150d517d1551217d41054d4d15160621b81525090620017ac5760405162461bcd60e51b8152600401620007b29190620037a1565b50620017b7620028d3565b60405163aecb96c960e01b8152909a506001600160a01b038b169063aecb96c990620017ee90339087908990879060040162003e6c565b600060405180830381600087803b1580156200180957600080fd5b505af11580156200181e573d6000803e3d6000fd5b505050505062001a5e565b61012d54604051630db9619f60e31b81526001600160a01b038b811660048301526001921690636dcb0cf890602401602060405180830381865afa15801562001876573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200189c9190620037cc565b6004811115620018b057620018b0620037b6565b14604051806040016040528060088152602001671393d517d413d3d360c21b81525090620018f35760405162461bcd60e51b8152600401620007b29190620037a1565b50886001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200195991906200385e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600e81526020016d2727aa2fa827a7a62fa7aba722a960911b81525090620019b55760405162461bcd60e51b8152600401620007b29190620037a1565b50886001600160a01b031663e47bfee86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620019f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a1b919062003cb7565b156040518060400160405280600681526020016549535f44414f60d01b8152509062001a5c5760405162461bcd60e51b8152600401620007b29190620037a1565b505b600062001a6a620027a1565b9050600062001a7a838c62002640565b9050816001600160a01b0316635c138e7d8c6040518060c001604052806001600281111562001aad5762001aad620037b6565b81526020016040518060200160405280600081525081526020018d81526020016040518060200160405280600081525081526020018e8152602001601260ff16815250846040518463ffffffff1660e01b815260040162001b119392919062003f09565b600060405180830381600087803b15801562001b2c57600080fd5b505af115801562001b41573d6000803e3d6000fd5b505060405163c4767b9560e01b81526001600160a01b038e16925063c4767b95915062001b7690859060019060040162003c45565b600060405180830381600087803b15801562001b9157600080fd5b505af115801562001ba6573d6000803e3d6000fd5b5050604051632c4e8d5560e01b81526001600160a01b0384169250632c4e8d55915062001bda9085908c9060040162003ff9565b600060405180830381600087803b15801562001bf557600080fd5b505af115801562001c0a573d6000803e3d6000fd5b505050507f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b8b838360405162001c60939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60405180910390a1505062001c75600160c955565b505050505050505050565b61012d54604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa15801562001ccb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001cf19190620037cc565b600481111562001d055762001d05620037b6565b14604051806040016040528060088152602001671393d517d413d3d360c21b8152509062001d485760405162461bcd60e51b8152600401620007b29190620037a1565b5062001d536200259b565b61012d546040516308c2f38b60e31b81526001600160a01b03909116906346179c589062001d8e9033908890889088908890600401620040e6565b6020604051808303816000875af115801562001dae573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dd49190620037ef565b5050505050565b6000818152609760205260408120620007529062002966565b60008281526065602052604090206001015462001e1181620024ef565b6200083c838362002521565b600062001e336101608501610140860162003006565b6001600160a01b03161462001f0657600062001e586101608501610140860162003006565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001e96573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ebc9190620037ef565b116040518060400160405280600d81526020016c24a72b20a624a22faa27a5a2a760991b8152509062001f045760405162461bcd60e51b8152600401620007b29190620037a1565b505b6103e883606001351015801562001f3f5750670de0b6b3a764000062001f326060850135853562003c9d565b10158062001f3f57508235155b6040518060400160405280600d81526020016c494e56414c49445f56414c554560981b8152509062001f865760405162461bcd60e51b8152600401620007b29190620037a1565b5062001f9162002138565b83602001351015801562001fad57508260400135836020013510155b6040518060400160405280600f81526020016e0494e56414c49445f4841524443415608c1b8152509062001ff65760405162461bcd60e51b8152600401620007b29190620037a1565b50600062002005828462003cdb565b9050808460200135111560405180606001604052806021815260200162004c2460219139906200204a5760405162461bcd60e51b8152600401620007b29190620037a1565b50806200205b856020013562001291565b6200206b90602087013562003cf1565b111560405180606001604052806032815260200162004bf2603291399062001dd45760405162461bcd60e51b8152600401620007b29190620037a1565b6000620020b581620024ef565b60408051808201909152600d81526c494e56414c49445f56414c554560981b6020820152620f4240831115620021005760405162461bcd60e51b8152600401620007b29190620037a1565b506101328290556040518281527f3356e979ac6b186521938f589b0f14ab4bac888ba2f12703da660b1f4ed1119f9060200162000807565b600061013254620f42406200214e919062003c7a565b905090565b600054610100900460ff1615808015620021745750600054600160ff909116105b80620021905750303b15801562002190575060005460ff166001145b620021f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620007b2565b6000805460ff19166001179055801562002219576000805461ff0019166101001790555b60408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038716620022665760405162461bcd60e51b8152600401620007b29190620037a1565b5060408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038616620022b45760405162461bcd60e51b8152600401620007b29190620037a1565b5060408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038516620023025760405162461bcd60e51b8152600401620007b29190620037a1565b5060408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038416620023505760405162461bcd60e51b8152600401620007b29190620037a1565b506200235b62002971565b62002365620029a5565b61012d80546001600160a01b038089166001600160a01b03199283161790925561012e805488841690831617905561012f8054878416908316179055610130805492861692909116919091179055620023c0600033620024fb565b620023ec7f2b1db18cd92cf6947e9bb2f532380e05e806a043d20a65c532268a1d7f4b5e7333620024fb565b620024187f9cf85f95575c3af1e116e3d37fd41e7f36a8a373623f51ffaaa87fdd032fa76733620024fb565b6200245360008051602062004bd28339815191527f2b1db18cd92cf6947e9bb2f532380e05e806a043d20a65c532268a1d7f4b5e73620029d9565b6200245e3062000758565b6200246982620020a8565b8015620024b0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60006001600160e01b03198216637965db0b60e01b14806200075257506301ffc9a760e01b6001600160e01b031983161462000752565b620008da813362002a24565b62002507828262002a88565b60008281526097602052604090206200083c908262002b12565b6200252d828262002b29565b60008281526097602052604090206200083c908262002b93565b6200255162002baa565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60fb5460ff1615620025e35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401620007b2565b565b600260c95403620026395760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620007b2565b600260c955565b610130546040516000916001600160a01b0316906200265f9062002fa4565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f0801580156200269b573d6000803e3d6000fd5b5061012d54604051631f8b400560e01b81529192506001600160a01b031690631f8b400590620026d49084906004908890820162004133565b6020604051808303816000875af1158015620026f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200271a9190620037ef565b5061012d546040516308c2f38b60e31b81526001600160a01b03909116906346179c5890620027549085906002906000906004016200416f565b6020604051808303816000875af115801562002774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200279a9190620037ef565b5092915050565b61012f546040516000916001600160a01b031690620027c09062002fa4565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f080158015620027fc573d6000803e3d6000fd5b5061012d54604051631f8b400560e01b81529192506001600160a01b031690631f8b40059062002834908490600290600401620041aa565b6020604051808303816000875af115801562002854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200287a9190620037ef565b5090565b600160c955565b6200288f6200259b565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586200257e3390565b60006200125f838362002bf5565b61012e546040516000916001600160a01b031690620028f29062002fa4565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f0801580156200292e573d6000803e3d6000fd5b5061012d54604051631f8b400560e01b81529192506001600160a01b031690631f8b40059062002834908490600190600401620041aa565b600062000752825490565b600054610100900460ff166200299b5760405162461bcd60e51b8152600401620007b290620041dd565b620025e362002c22565b600054610100900460ff16620029cf5760405162461bcd60e51b8152600401620007b290620041dd565b620025e362002c58565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62002a30828262001266565b620008bf5762002a408162002c82565b62002a4d83602062002c95565b60405160200162002a6092919062004228565b60408051601f198184030181529082905262461bcd60e51b8252620007b291600401620037a1565b62002a94828262001266565b620008bf5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905562002ace3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200125f836001600160a01b03841662002e4e565b62002b35828262001266565b15620008bf5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006200125f836001600160a01b03841662002ea0565b60fb5460ff16620025e35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401620007b2565b600082600001828154811062002c0f5762002c0f62003ac6565b9060005260206000200154905092915050565b600054610100900460ff1662002c4c5760405162461bcd60e51b8152600401620007b290620041dd565b60fb805460ff19169055565b600054610100900460ff166200287e5760405162461bcd60e51b8152600401620007b290620041dd565b6060620007526001600160a01b03831660145b6060600062002ca683600262003c9d565b62002cb390600262003cf1565b6001600160401b0381111562002ccd5762002ccd6200308d565b6040519080825280601f01601f19166020018201604052801562002cf8576020820181803683370190505b509050600360fc1b8160008151811062002d165762002d1662003ac6565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062002d485762002d4862003ac6565b60200101906001600160f81b031916908160001a905350600062002d6e84600262003c9d565b62002d7b90600162003cf1565b90505b600181111562002dfd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062002db35762002db362003ac6565b1a60f81b82828151811062002dcc5762002dcc62003ac6565b60200101906001600160f81b031916908160001a90535060049490941c9362002df581620042a1565b905062002d7e565b5083156200125f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620007b2565b600081815260018301602052604081205462002e975750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000752565b50600062000752565b6000818152600183016020526040812054801562002f9957600062002ec760018362003cdb565b855490915060009062002edd9060019062003cdb565b905081811462002f4957600086600001828154811062002f015762002f0162003ac6565b906000526020600020015490508087600001848154811062002f275762002f2762003ac6565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062002f5d5762002f5d620042bb565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000752565b600091505062000752565b61090080620042d283390190565b60006020828403121562002fc557600080fd5b81356001600160e01b0319811681146200125f57600080fd5b6001600160a01b0381168114620008da57600080fd5b8035620030018162002fde565b919050565b6000602082840312156200301957600080fd5b81356200125f8162002fde565b6000602082840312156200303957600080fd5b5035919050565b600080604083850312156200305457600080fd5b823591506020830135620030688162002fde565b809150509250929050565b60006101a082840312156200308757600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b0381118282101715620030c957620030c96200308d565b60405290565b60405160c081016001600160401b0381118282101715620030c957620030c96200308d565b604051608081016001600160401b0381118282101715620030c957620030c96200308d565b60405160a081016001600160401b0381118282101715620030c957620030c96200308d565b604051601f8201601f191681016001600160401b03811182821017156200316957620031696200308d565b604052919050565b60006001600160401b038211156200318d576200318d6200308d565b50601f01601f191660200190565b600082601f830112620031ad57600080fd5b8135620031c4620031be8262003171565b6200313e565b818152846020838601011115620031da57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156200320d57600080fd5b83356001600160401b03808211156200322557600080fd5b620032338783880162003073565b945060208601359150808211156200324a57600080fd5b9085019060c082880312156200325f57600080fd5b909250604085013590808211156200327657600080fd5b5062003285868287016200319b565b9150509250925092565b60008060408385031215620032a357600080fd5b8235620032b08162002fde565b946020939093013593505050565b60008060408385031215620032d257600080fd5b50508035926020909101359150565b60006001600160401b03821115620032fd57620032fd6200308d565b5060051b60200190565b600082601f8301126200331957600080fd5b813560206200332c620031be83620032e1565b82815260059290921b840181019181810190868411156200334c57600080fd5b8286015b8481101562003374578035620033668162002fde565b835291830191830162003350565b509695505050505050565b60006101a082840312156200339357600080fd5b6200339d620030a3565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301356001600160401b038111156200341157600080fd5b6200341f8582860162003307565b8284015250506101406200343581840162002ff4565b9082015261016082810135908201526101809182013591810191909152919050565b60006101208083850312156200346c57600080fd5b62003476620030cf565b915082358252602080840135818401526040840135604084015260608401356060840152608084013560808401528460bf850112620034b457600080fd5b620034be620030f4565b918401918086841115620034d157600080fd5b60a086015b84811015620034ef5780358352918301918301620034d6565b5060a08501525091949350505050565b60008060008060008060008060006102208a8c0312156200351f57600080fd5b6200352a8a62002ff4565b985060208a0135975060408a01356001600160401b03808211156200354e57600080fd5b6200355c8d838e016200319b565b985060608c01359150808211156200357357600080fd5b620035818d838e016200337f565b975060808c0135965060a08c01359550620035a08d60c08e0162003457565b94506101e08c0135915080821115620035b857600080fd5b620035c68d838e016200319b565b93506102008c0135915080821115620035de57600080fd5b50620035ed8c828d016200319b565b9150509295985092959850929598565b600080600080606085870312156200361457600080fd5b8435600481106200362457600080fd5b93506020850135925060408501356001600160401b03808211156200364857600080fd5b818701915087601f8301126200365d57600080fd5b8135818111156200366d57600080fd5b8860208285010111156200368057600080fd5b95989497505060200194505050565b600080600060608486031215620036a557600080fd5b83356001600160401b03811115620036bc57600080fd5b620036ca8682870162003073565b9660208601359650604090950135949350505050565b600080600080600060a08688031215620036f957600080fd5b8535620037068162002fde565b94506020860135620037188162002fde565b935060408601356200372a8162002fde565b925060608601356200373c8162002fde565b949793965091946080013592915050565b60005b838110156200376a57818101518382015260200162003750565b50506000910152565b600081518084526200378d8160208601602086016200374d565b601f01601f19169290920160200192915050565b6020815260006200125f602083018462003773565b634e487b7160e01b600052602160045260246000fd5b600060208284031215620037df57600080fd5b8151600581106200125f57600080fd5b6000602082840312156200380257600080fd5b5051919050565b60038110620008da57600080fd5b6000602082840312156200382a57600080fd5b81356200125f8162003809565b600381106200384a576200384a620037b6565b9052565b6020810162000752828462003837565b6000602082840312156200387157600080fd5b81516200125f8162002fde565b6000602082840312156200389157600080fd5b81516200125f8162003809565b6000808335601e19843603018112620038b657600080fd5b83016020810192503590506001600160401b03811115620038d657600080fd5b8060051b3603821315620038e957600080fd5b9250929050565b8183526000602080850194508260005b8581101562003932578135620039168162002fde565b6001600160a01b03168752958201959082019060010162003900565b509495945050505050565b60018060a01b038316815260406020820152813560408201526020820135606082015260408201356080820152606082013560a0820152608082013560c082015260a082013560e0820152600061010060c08401358184015261012060e0850135818501526101408286013581860152620039bb828701876200389e565b935091506101a06101608181880152620039db6101e088018686620038f0565b9450620039ea83890162002ff4565b9350610180925062003a06838801856001600160a01b03169052565b87013590860152909401356101c0909301929092525092915050565b6000602080838503121562003a3657600080fd5b82516001600160401b0381111562003a4d57600080fd5b8301601f8101851362003a5f57600080fd5b805162003a70620031be82620032e1565b81815260059190911b8201830190838101908783111562003a9057600080fd5b928401925b8284101562003abb57835162003aab8162002fde565b8252928401929084019062003a95565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811262003af457600080fd5b83016020810192503590506001600160401b0381111562003b1457600080fd5b803603821315620038e957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152606060208201526000833562003b6f8162003809565b62003b7e606084018262003837565b5062003b8e602085018562003adc565b60c0608085015262003ba66101208501828462003b24565b91505062003bb8604086018662003adc565b605f19808685030160a087015262003bd284838562003b24565b935062003be3606089018962003adc565b93509150808685030160c08701525062003bff83838362003b24565b92505050608085013560e084015260a085013560ff8116811462003c2257600080fd5b60ff166101008401526001600160a01b038416604084015290505b949350505050565b6001600160a01b0383168152604081016200125f602083018462003837565b634e487b7160e01b600052601160045260246000fd5b60008262003c9857634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141762000752576200075262003c64565b60006020828403121562003cca57600080fd5b815180151581146200125f57600080fd5b8181038181111562000752576200075262003c64565b8082018082111562000752576200075262003c64565b600082601f83011262003d1957600080fd5b815162003d2a620031be8262003171565b81815284602083860101111562003d4057600080fd5b62003c3d8260208301602087016200374d565b60006020828403121562003d6657600080fd5b81516001600160401b038082111562003d7e57600080fd5b9083019060a0828603121562003d9357600080fd5b62003d9d62003119565b825181526020830151602082015260408301518281111562003dbe57600080fd5b62003dcc8782860162003d07565b60408301525060608301518281111562003de557600080fd5b62003df38782860162003d07565b6060830152506080830151608082015280935050505092915050565b80518252602081015160208301526000604082015160a0604085015262003e3a60a085018262003773565b90506060830151848203606086015262003e55828262003773565b915050608083015160808501528091505092915050565b6001600160a01b038516815261018060208083018290526000919062003e958483018862003773565b91508551604085015280860151606085015260408601516080850152606086015160a0850152608086015160c085015260a086015160e0850160005b600481101562003ef05782518252918301919083019060010162003ed1565b5050505082810361016084015262003abb818562003e0f565b6001600160a01b0384168152606060208201819052835162003f2e9183019062003837565b6000602084015160c0608084015262003f4c61012084018262003773565b90506040850151605f19808584030160a086015262003f6c838362003773565b925060608701519150808584030160c08601525062003f8c828262003773565b608087015160e086015260a087015160ff166101008601526001600160a01b0386166040860152925062003c3d915050565b600081518084526020808501945080840160005b83811015620039325781516001600160a01b03168752958201959082019060010162003fd2565b60018060a01b038316815260406020820152815160408201526020820151606082015260408201516080820152606082015160a0820152608082015160c082015260a082015160e0820152600060c0830151610100818185015260e08501519150610120828186015281860151925061014091508282860152808601519250506101a06101608181870152620040946101e087018562003fbe565b92870151929350610180620040b3878201856001600160a01b03169052565b9087015191860191909152909401516101c0909301929092525092915050565b600481106200384a576200384a620037b6565b6001600160a01b0386168152620041016020820186620040d3565b83604082015260806060820152600062003abb60808301848662003b24565b600581106200384a576200384a620037b6565b6001600160a01b03841681526200414e602082018462004120565b60606040820152600062004166606083018462003773565b95945050505050565b6001600160a01b03841681526200418a6020820184620040d3565b604081019190915260806060820181905260009082015260a00192915050565b6001600160a01b0383168152620041c5602082018362004120565b60606040820181905260009082015260800192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351620042628160178501602088016200374d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620042958160288401602088016200374d565b01602801949350505050565b600081620042b357620042b362003c64565b506000190190565b634e487b7160e01b600052603160045260246000fdfe60806040526040516109003803806109008339810160408190526100229161045b565b61002e82826000610035565b5050610585565b61003e83610100565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a260008251118061007f5750805b156100fb576100f9836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e9919061051b565b836102a360201b6100291760201c565b505b505050565b610113816102cf60201b6100551760201c565b6101725760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101e6816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d7919061051b565b6102cf60201b6100551760201c565b61024b5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610169565b806102827fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102de60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102c883836040518060600160405280602781526020016108d9602791396102e1565b9392505050565b6001600160a01b03163b151590565b90565b6060600080856001600160a01b0316856040516102fe9190610536565b600060405180830381855af49150503d8060008114610339576040519150601f19603f3d011682016040523d82523d6000602084013e61033e565b606091505b5090925090506103508683838761035a565b9695505050505050565b606083156103c95782516000036103c2576001600160a01b0385163b6103c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610169565b50816103d3565b6103d383836103db565b949350505050565b8151156103eb5781518083602001fd5b8060405162461bcd60e51b81526004016101699190610552565b80516001600160a01b038116811461041c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045257818101518382015260200161043a565b50506000910152565b6000806040838503121561046e57600080fd5b61047783610405565b60208401519092506001600160401b038082111561049457600080fd5b818501915085601f8301126104a857600080fd5b8151818111156104ba576104ba610421565b604051601f8201601f19908116603f011681019083821181831017156104e2576104e2610421565b816040528281528860208487010111156104fb57600080fd5b61050c836020830160208801610437565b80955050505050509250929050565b60006020828403121561052d57600080fd5b6102c882610405565b60008251610548818460208701610437565b9190910192915050565b6020815260008251806020840152610571816040850160208701610437565b601f01601f19169190910160400192915050565b610345806105946000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e960279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061024c565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b6060600080856001600160a01b0316856040516101419190610299565b600060405180830381855af49150503d806000811461017c576040519150601f19603f3d011682016040523d82523d6000602084013e610181565b606091505b50915091506101928683838761019c565b9695505050505050565b60608315610210578251600003610209576001600160a01b0385163b6102095760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b508161021a565b61021a8383610222565b949350505050565b8151156102325781518083602001fd5b8060405162461bcd60e51b815260040161020091906102b5565b60006020828403121561025e57600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b83811015610290578181015183820152602001610278565b50506000910152565b600082516102ab818460208701610275565b9190910192915050565b60208152600082518060208401526102d4816040850160208701610275565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122022a6bf5ebbb7518c40e703958b5c8e4d70ca6715c1e1ccf9e9591bfc86e066d164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564cdb004a2c4b58a687fd075d3ee33590a4807decba9bf65227a1ff25b56b056e9484152444341505f414e445f50524f544f434f4c5f4645455f4f564552464c4f575f52454d41494e494e475f535550504c59484152444341505f4f564552464c4f575f52454d41494e494e475f535550504c59a26469706673582212206a605d39f9dea9b26c30fbfcbc865d059a2fe99aa72ee43820076aa82e3b089d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106200022f5760003560e01c8063879010f4116200012f578063c979e8a711620000ad578063d7f964fd1162000078578063d7f964fd146200067e578063db47fbe914620006a3578063dedcd30714620006c8578063e768292814620006ed578063f7013ef6146200070557600080fd5b8063c979e8a714620005db578063ca15c8731462000611578063ccf5a77c1462000636578063d547741f146200065957600080fd5b8063a217fddf11620000fa578063a217fddf146200044e578063a36894711462000557578063b3e86165146200057c578063b677bc691462000593578063c5a7b2ea14620005b857600080fd5b8063879010f414620004c35780639010d07c14620004e857806391d14854146200050d5780639d838ad3146200053257600080fd5b80633f4ba83a11620001bd5780635c975abb11620001885780635c975abb146200043457806375b238fc146200044e5780637b1039991462000465578063803db96d14620004885780638456cb5914620004ab57600080fd5b80633f4ba83a14620003ad5780633fec91a414620003c557806346b3b62614620003ea57806353350755146200040f57600080fd5b80630c5a61f811620001fe5780630c5a61f81462000308578063248a9ca3146200032f5780632f2ff15d146200036357806336568abe146200038857600080fd5b806301569ab0146200023457806301ffc9a7146200027457806303700be814620002aa57806307bd026514620002d2575b600080fd5b3480156200024157600080fd5b506101305462000257906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200028157600080fd5b50620002996200029336600462002fb2565b6200072a565b60405190151581526020016200026b565b348015620002b757600080fd5b50620002c36101325481565b6040519081526020016200026b565b348015620002df57600080fd5b50620002c37f9cf85f95575c3af1e116e3d37fd41e7f36a8a373623f51ffaaa87fdd032fa76781565b3480156200031557600080fd5b506200032d6200032736600462003006565b62000758565b005b3480156200033c57600080fd5b50620002c36200034e36600462003026565b60009081526065602052604090206001015490565b3480156200037057600080fd5b506200032d6200038236600462003040565b62000813565b3480156200039557600080fd5b506200032d620003a736600462003040565b62000841565b348015620003ba57600080fd5b506200032d620008c3565b348015620003d257600080fd5b506200032d620003e436600462003026565b620008dd565b348015620003f757600080fd5b506200032d62000409366004620031f7565b62000a29565b3480156200041c57600080fd5b506200032d6200042e3660046200328f565b62001035565b3480156200044157600080fd5b5060fb5460ff1662000299565b3480156200045b57600080fd5b50620002c3600081565b3480156200047257600080fd5b5061012d5462000257906001600160a01b031681565b3480156200049557600080fd5b506101315462000257906001600160a01b031681565b348015620004b857600080fd5b506200032d620010e6565b348015620004d057600080fd5b506200032d620004e236600462003006565b620010fd565b348015620004f557600080fd5b506200025762000507366004620032be565b62001245565b3480156200051a57600080fd5b50620002996200052c36600462003040565b62001266565b3480156200053f57600080fd5b50620002c36200055136600462003026565b62001291565b3480156200056457600080fd5b50620002c36200057636600462003006565b62001340565b6200032d6200058d366004620034ff565b62001616565b348015620005a057600080fd5b506200032d620005b2366004620035fd565b62001c80565b348015620005c557600080fd5b5061012e5462000257906001600160a01b031681565b348015620005e857600080fd5b50620002c37f2b1db18cd92cf6947e9bb2f532380e05e806a043d20a65c532268a1d7f4b5e7381565b3480156200061e57600080fd5b50620002c36200063036600462003026565b62001ddb565b3480156200064357600080fd5b5061012f5462000257906001600160a01b031681565b3480156200066657600080fd5b506200032d6200067836600462003040565b62001df4565b3480156200068b57600080fd5b506200032d6200069d3660046200368f565b62001e1d565b348015620006b057600080fd5b50620002c360008051602062004bd283398151915281565b348015620006d557600080fd5b506200032d620006e736600462003026565b620020a8565b348015620006fa57600080fd5b50620002c362002138565b3480156200071257600080fd5b506200032d62000724366004620036e0565b62002153565b60006001600160e01b03198216635a05180f60e01b14806200075257506200075282620024b8565b92915050565b60006200076581620024ef565b60408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038316620007bb5760405162461bcd60e51b8152600401620007b29190620037a1565b60405180910390fd5b5061013180546001600160a01b0319166001600160a01b0384169081179091556040519081527f48919a8bb9d5ad92fa352adb62046eaabb006b67ba2fcf7566ed0879ab5a27c3906020015b60405180910390a15050565b6000828152606560205260409020600101546200083081620024ef565b6200083c8383620024fb565b505050565b6001600160a01b0381163314620008b35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401620007b2565b620008bf828262002521565b5050565b6000620008d081620024ef565b620008da62002547565b50565b61012d54604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa15801562000928573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200094e9190620037cc565b6004811115620009625762000962620037b6565b14604051806040016040528060088152602001671393d517d413d3d360c21b81525090620009a55760405162461bcd60e51b8152600401620007b29190620037a1565b50620009b06200259b565b61012d5460405163f4be936960e01b8152336004820152602481018390526001600160a01b039091169063f4be9369906044016020604051808303816000875af115801562000a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008bf9190620037ef565b61012d54604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa15801562000a74573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9a9190620037cc565b600481111562000aae5762000aae620037b6565b14604051806040016040528060088152602001671393d517d413d3d360c21b8152509062000af15760405162461bcd60e51b8152600401620007b29190620037a1565b5062000afc620025e5565b62000b066200259b565b600062000b14823362002640565b90506000336382b8660062000b2d602087018762003817565b6040518263ffffffff1660e01b815260040162000b4b91906200384e565b602060405180830381865afa15801562000b69573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b8f91906200385e565b9050600162000ba2602086018662003817565b600281111562000bb65762000bb6620037b6565b0362000db25760005b816001600160a01b0316633eac99986040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000bfe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2491906200385e565b6001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c62573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c8891906200387e565b600281111562000c9c5762000c9c620037b6565b1415604051806040016040528060118152602001704143544956455f5447455f45584953545360781b8152509062000ce95760405162461bcd60e51b8152600401620007b29190620037a1565b50604051630a08df1760e31b81526001600160a01b038381166004830152821690635046f8b8906024015b600060405180830381600087803b15801562000d2f57600080fd5b505af115801562000d44573d6000803e3d6000fd5b5050604051632c4e8d5560e01b81526001600160a01b0385169250632c4e8d55915062000d7890849089906004016200393d565b600060405180830381600087803b15801562000d9357600080fd5b505af115801562000da8573d6000803e3d6000fd5b5050505062000fdf565b600262000dc3602086018662003817565b600281111562000dd75762000dd7620037b6565b0362000f99576001600160a01b038116158062000ef057506001816001600160a01b0316620a04ae6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000e2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000e59919081019062003a22565b60008151811062000e6e5762000e6e62003ac6565b60200260200101516001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000eb4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eda91906200387e565b600281111562000eee5762000eee620037b6565b145b1562000f915762000f00620027a1565b604051635c138e7d60e01b81529091506001600160a01b03821690635c138e7d9062000f359033908890879060040162003b4d565b600060405180830381600087803b15801562000f5057600080fd5b505af115801562000f65573d6000803e3d6000fd5b505060405163c4767b9560e01b815233925063c4767b95915062000d1490849060029060040162003c45565b600062000bbf565b6040805180820182526016815275554e535550504f525445445f544f4b454e5f5459504560501b6020820152905162461bcd60e51b8152620007b29190600401620037a1565b604080513381526001600160a01b03848116602083015283168183015290517ff74d32d2119bcaf2616d37895d32adafbee1dceb25a98646ca514098f422fd899181900360600190a150506200083c600160c955565b60006200104281620024ef565b60405163e0a8f6f560e01b8152600481018390526001600160a01b0384169063e0a8f6f590602401600060405180830381600087803b1580156200108557600080fd5b505af11580156200109a573d6000803e3d6000fd5b5050604080516001600160a01b0387168152602081018690527f5d423f6a55211a90b8438786aa7edfa40d3eef381b6aae048b52daf814c16462935001905060405180910390a1505050565b6000620010f381620024ef565b620008da62002885565b60006200110a81620024ef565b60408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038316620011575760405162461bcd60e51b8152600401620007b29190620037a1565b506040513031906000906001600160a01b0385169083908381818185875af1925050503d8060008114620011a8576040519150601f19603f3d011682016040523d82523d6000602084013e620011ad565b606091505b50509050806040518060400160405280601081526020016f11561150d5551253d397d1905253115160821b81525090620011fc5760405162461bcd60e51b8152600401620007b29190620037a1565b50604080516001600160a01b0386168152602081018490527fc812aa15be10cc23ff245a12080e7de523f13b7fd4a16277a703c4f8e3113709910160405180910390a150505050565b60008281526097602052604081206200125f9083620028c5565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006200129d62002138565b8210156040518060400160405280600d81526020016c494e56414c49445f56414c554560981b81525090620012e75760405162461bcd60e51b8152600401620007b29190620037a1565b50600168056bc75e2d6310000083111562001312575064e8d4a510006200130f818462003c7a565b92505b80620f4240846101325462001328919062003c9d565b62001334919062003c7a565b6200125f919062003c9d565b6000600161012d54604051630db9619f60e31b81526001600160a01b03858116600483015290911690636dcb0cf890602401602060405180830381865afa15801562001390573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013b69190620037cc565b6004811115620013ca57620013ca620037b6565b148015620014385750816001600160a01b031663e47bfee86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001438919062003cb7565b15620015fb5760405162415c3360e91b815262001519906001600160a01b038416906382b866009062001471906001906004016200384e565b602060405180830381865afa1580156200148f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014b591906200385e565b6001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620014f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005519190620037ef565b60405162415c3360e91b81526001600160a01b038416906382b866009062001547906001906004016200384e565b602060405180830381865afa15801562001565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200158b91906200385e565b6001600160a01b031663355274ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620015c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015ef9190620037ef565b62000752919062003cdb565b6200160860001962001291565b620007529060001962003cdb565b62001620620025e5565b6200162a6200259b565b60408051808201909152600b81526a0494e56414c49445f4341560ac1b6020820152670de0b6b3a7640000891015620016785760405162461bcd60e51b8152600401620007b29190620037a1565b50620016848862001291565b62001690908962003cf1565b97506001600160a01b0389166200182957620016bb60008051602062004bd2833981519152620024ef565b620016d660008051602062004bd28339815191523362002521565b61012d54604051633b84067560e21b815260048101879052602481018690526000916001600160a01b03169063ee1019d4906044016000604051808303816000875af11580156200172b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001755919081019062003d53565b90508060800151341460405180604001604052806014815260200173125390d3d4949150d517d1551217d41054d4d15160621b81525090620017ac5760405162461bcd60e51b8152600401620007b29190620037a1565b50620017b7620028d3565b60405163aecb96c960e01b8152909a506001600160a01b038b169063aecb96c990620017ee90339087908990879060040162003e6c565b600060405180830381600087803b1580156200180957600080fd5b505af11580156200181e573d6000803e3d6000fd5b505050505062001a5e565b61012d54604051630db9619f60e31b81526001600160a01b038b811660048301526001921690636dcb0cf890602401602060405180830381865afa15801562001876573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200189c9190620037cc565b6004811115620018b057620018b0620037b6565b14604051806040016040528060088152602001671393d517d413d3d360c21b81525090620018f35760405162461bcd60e51b8152600401620007b29190620037a1565b50886001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200195991906200385e565b6001600160a01b0316336001600160a01b0316146040518060400160405280600e81526020016d2727aa2fa827a7a62fa7aba722a960911b81525090620019b55760405162461bcd60e51b8152600401620007b29190620037a1565b50886001600160a01b031663e47bfee86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620019f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a1b919062003cb7565b156040518060400160405280600681526020016549535f44414f60d01b8152509062001a5c5760405162461bcd60e51b8152600401620007b29190620037a1565b505b600062001a6a620027a1565b9050600062001a7a838c62002640565b9050816001600160a01b0316635c138e7d8c6040518060c001604052806001600281111562001aad5762001aad620037b6565b81526020016040518060200160405280600081525081526020018d81526020016040518060200160405280600081525081526020018e8152602001601260ff16815250846040518463ffffffff1660e01b815260040162001b119392919062003f09565b600060405180830381600087803b15801562001b2c57600080fd5b505af115801562001b41573d6000803e3d6000fd5b505060405163c4767b9560e01b81526001600160a01b038e16925063c4767b95915062001b7690859060019060040162003c45565b600060405180830381600087803b15801562001b9157600080fd5b505af115801562001ba6573d6000803e3d6000fd5b5050604051632c4e8d5560e01b81526001600160a01b0384169250632c4e8d55915062001bda9085908c9060040162003ff9565b600060405180830381600087803b15801562001bf557600080fd5b505af115801562001c0a573d6000803e3d6000fd5b505050507f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b8b838360405162001c60939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60405180910390a1505062001c75600160c955565b505050505050505050565b61012d54604051630db9619f60e31b81523360048201526001916001600160a01b031690636dcb0cf890602401602060405180830381865afa15801562001ccb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001cf19190620037cc565b600481111562001d055762001d05620037b6565b14604051806040016040528060088152602001671393d517d413d3d360c21b8152509062001d485760405162461bcd60e51b8152600401620007b29190620037a1565b5062001d536200259b565b61012d546040516308c2f38b60e31b81526001600160a01b03909116906346179c589062001d8e9033908890889088908890600401620040e6565b6020604051808303816000875af115801562001dae573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dd49190620037ef565b5050505050565b6000818152609760205260408120620007529062002966565b60008281526065602052604090206001015462001e1181620024ef565b6200083c838362002521565b600062001e336101608501610140860162003006565b6001600160a01b03161462001f0657600062001e586101608501610140860162003006565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001e96573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ebc9190620037ef565b116040518060400160405280600d81526020016c24a72b20a624a22faa27a5a2a760991b8152509062001f045760405162461bcd60e51b8152600401620007b29190620037a1565b505b6103e883606001351015801562001f3f5750670de0b6b3a764000062001f326060850135853562003c9d565b10158062001f3f57508235155b6040518060400160405280600d81526020016c494e56414c49445f56414c554560981b8152509062001f865760405162461bcd60e51b8152600401620007b29190620037a1565b5062001f9162002138565b83602001351015801562001fad57508260400135836020013510155b6040518060400160405280600f81526020016e0494e56414c49445f4841524443415608c1b8152509062001ff65760405162461bcd60e51b8152600401620007b29190620037a1565b50600062002005828462003cdb565b9050808460200135111560405180606001604052806021815260200162004c2460219139906200204a5760405162461bcd60e51b8152600401620007b29190620037a1565b50806200205b856020013562001291565b6200206b90602087013562003cf1565b111560405180606001604052806032815260200162004bf2603291399062001dd45760405162461bcd60e51b8152600401620007b29190620037a1565b6000620020b581620024ef565b60408051808201909152600d81526c494e56414c49445f56414c554560981b6020820152620f4240831115620021005760405162461bcd60e51b8152600401620007b29190620037a1565b506101328290556040518281527f3356e979ac6b186521938f589b0f14ab4bac888ba2f12703da660b1f4ed1119f9060200162000807565b600061013254620f42406200214e919062003c7a565b905090565b600054610100900460ff1615808015620021745750600054600160ff909116105b80620021905750303b15801562002190575060005460ff166001145b620021f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620007b2565b6000805460ff19166001179055801562002219576000805461ff0019166101001790555b60408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038716620022665760405162461bcd60e51b8152600401620007b29190620037a1565b5060408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038616620022b45760405162461bcd60e51b8152600401620007b29190620037a1565b5060408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038516620023025760405162461bcd60e51b8152600401620007b29190620037a1565b5060408051808201909152600c81526b414444524553535f5a45524f60a01b60208201526001600160a01b038416620023505760405162461bcd60e51b8152600401620007b29190620037a1565b506200235b62002971565b62002365620029a5565b61012d80546001600160a01b038089166001600160a01b03199283161790925561012e805488841690831617905561012f8054878416908316179055610130805492861692909116919091179055620023c0600033620024fb565b620023ec7f2b1db18cd92cf6947e9bb2f532380e05e806a043d20a65c532268a1d7f4b5e7333620024fb565b620024187f9cf85f95575c3af1e116e3d37fd41e7f36a8a373623f51ffaaa87fdd032fa76733620024fb565b6200245360008051602062004bd28339815191527f2b1db18cd92cf6947e9bb2f532380e05e806a043d20a65c532268a1d7f4b5e73620029d9565b6200245e3062000758565b6200246982620020a8565b8015620024b0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60006001600160e01b03198216637965db0b60e01b14806200075257506301ffc9a760e01b6001600160e01b031983161462000752565b620008da813362002a24565b62002507828262002a88565b60008281526097602052604090206200083c908262002b12565b6200252d828262002b29565b60008281526097602052604090206200083c908262002b93565b6200255162002baa565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60fb5460ff1615620025e35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401620007b2565b565b600260c95403620026395760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620007b2565b600260c955565b610130546040516000916001600160a01b0316906200265f9062002fa4565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f0801580156200269b573d6000803e3d6000fd5b5061012d54604051631f8b400560e01b81529192506001600160a01b031690631f8b400590620026d49084906004908890820162004133565b6020604051808303816000875af1158015620026f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200271a9190620037ef565b5061012d546040516308c2f38b60e31b81526001600160a01b03909116906346179c5890620027549085906002906000906004016200416f565b6020604051808303816000875af115801562002774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200279a9190620037ef565b5092915050565b61012f546040516000916001600160a01b031690620027c09062002fa4565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f080158015620027fc573d6000803e3d6000fd5b5061012d54604051631f8b400560e01b81529192506001600160a01b031690631f8b40059062002834908490600290600401620041aa565b6020604051808303816000875af115801562002854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200287a9190620037ef565b5090565b600160c955565b6200288f6200259b565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586200257e3390565b60006200125f838362002bf5565b61012e546040516000916001600160a01b031690620028f29062002fa4565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f0801580156200292e573d6000803e3d6000fd5b5061012d54604051631f8b400560e01b81529192506001600160a01b031690631f8b40059062002834908490600190600401620041aa565b600062000752825490565b600054610100900460ff166200299b5760405162461bcd60e51b8152600401620007b290620041dd565b620025e362002c22565b600054610100900460ff16620029cf5760405162461bcd60e51b8152600401620007b290620041dd565b620025e362002c58565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62002a30828262001266565b620008bf5762002a408162002c82565b62002a4d83602062002c95565b60405160200162002a6092919062004228565b60408051601f198184030181529082905262461bcd60e51b8252620007b291600401620037a1565b62002a94828262001266565b620008bf5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905562002ace3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200125f836001600160a01b03841662002e4e565b62002b35828262001266565b15620008bf5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006200125f836001600160a01b03841662002ea0565b60fb5460ff16620025e35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401620007b2565b600082600001828154811062002c0f5762002c0f62003ac6565b9060005260206000200154905092915050565b600054610100900460ff1662002c4c5760405162461bcd60e51b8152600401620007b290620041dd565b60fb805460ff19169055565b600054610100900460ff166200287e5760405162461bcd60e51b8152600401620007b290620041dd565b6060620007526001600160a01b03831660145b6060600062002ca683600262003c9d565b62002cb390600262003cf1565b6001600160401b0381111562002ccd5762002ccd6200308d565b6040519080825280601f01601f19166020018201604052801562002cf8576020820181803683370190505b509050600360fc1b8160008151811062002d165762002d1662003ac6565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062002d485762002d4862003ac6565b60200101906001600160f81b031916908160001a905350600062002d6e84600262003c9d565b62002d7b90600162003cf1565b90505b600181111562002dfd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062002db35762002db362003ac6565b1a60f81b82828151811062002dcc5762002dcc62003ac6565b60200101906001600160f81b031916908160001a90535060049490941c9362002df581620042a1565b905062002d7e565b5083156200125f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620007b2565b600081815260018301602052604081205462002e975750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000752565b50600062000752565b6000818152600183016020526040812054801562002f9957600062002ec760018362003cdb565b855490915060009062002edd9060019062003cdb565b905081811462002f4957600086600001828154811062002f015762002f0162003ac6565b906000526020600020015490508087600001848154811062002f275762002f2762003ac6565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062002f5d5762002f5d620042bb565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000752565b600091505062000752565b61090080620042d283390190565b60006020828403121562002fc557600080fd5b81356001600160e01b0319811681146200125f57600080fd5b6001600160a01b0381168114620008da57600080fd5b8035620030018162002fde565b919050565b6000602082840312156200301957600080fd5b81356200125f8162002fde565b6000602082840312156200303957600080fd5b5035919050565b600080604083850312156200305457600080fd5b823591506020830135620030688162002fde565b809150509250929050565b60006101a082840312156200308757600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b0381118282101715620030c957620030c96200308d565b60405290565b60405160c081016001600160401b0381118282101715620030c957620030c96200308d565b604051608081016001600160401b0381118282101715620030c957620030c96200308d565b60405160a081016001600160401b0381118282101715620030c957620030c96200308d565b604051601f8201601f191681016001600160401b03811182821017156200316957620031696200308d565b604052919050565b60006001600160401b038211156200318d576200318d6200308d565b50601f01601f191660200190565b600082601f830112620031ad57600080fd5b8135620031c4620031be8262003171565b6200313e565b818152846020838601011115620031da57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156200320d57600080fd5b83356001600160401b03808211156200322557600080fd5b620032338783880162003073565b945060208601359150808211156200324a57600080fd5b9085019060c082880312156200325f57600080fd5b909250604085013590808211156200327657600080fd5b5062003285868287016200319b565b9150509250925092565b60008060408385031215620032a357600080fd5b8235620032b08162002fde565b946020939093013593505050565b60008060408385031215620032d257600080fd5b50508035926020909101359150565b60006001600160401b03821115620032fd57620032fd6200308d565b5060051b60200190565b600082601f8301126200331957600080fd5b813560206200332c620031be83620032e1565b82815260059290921b840181019181810190868411156200334c57600080fd5b8286015b8481101562003374578035620033668162002fde565b835291830191830162003350565b509695505050505050565b60006101a082840312156200339357600080fd5b6200339d620030a3565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301356001600160401b038111156200341157600080fd5b6200341f8582860162003307565b8284015250506101406200343581840162002ff4565b9082015261016082810135908201526101809182013591810191909152919050565b60006101208083850312156200346c57600080fd5b62003476620030cf565b915082358252602080840135818401526040840135604084015260608401356060840152608084013560808401528460bf850112620034b457600080fd5b620034be620030f4565b918401918086841115620034d157600080fd5b60a086015b84811015620034ef5780358352918301918301620034d6565b5060a08501525091949350505050565b60008060008060008060008060006102208a8c0312156200351f57600080fd5b6200352a8a62002ff4565b985060208a0135975060408a01356001600160401b03808211156200354e57600080fd5b6200355c8d838e016200319b565b985060608c01359150808211156200357357600080fd5b620035818d838e016200337f565b975060808c0135965060a08c01359550620035a08d60c08e0162003457565b94506101e08c0135915080821115620035b857600080fd5b620035c68d838e016200319b565b93506102008c0135915080821115620035de57600080fd5b50620035ed8c828d016200319b565b9150509295985092959850929598565b600080600080606085870312156200361457600080fd5b8435600481106200362457600080fd5b93506020850135925060408501356001600160401b03808211156200364857600080fd5b818701915087601f8301126200365d57600080fd5b8135818111156200366d57600080fd5b8860208285010111156200368057600080fd5b95989497505060200194505050565b600080600060608486031215620036a557600080fd5b83356001600160401b03811115620036bc57600080fd5b620036ca8682870162003073565b9660208601359650604090950135949350505050565b600080600080600060a08688031215620036f957600080fd5b8535620037068162002fde565b94506020860135620037188162002fde565b935060408601356200372a8162002fde565b925060608601356200373c8162002fde565b949793965091946080013592915050565b60005b838110156200376a57818101518382015260200162003750565b50506000910152565b600081518084526200378d8160208601602086016200374d565b601f01601f19169290920160200192915050565b6020815260006200125f602083018462003773565b634e487b7160e01b600052602160045260246000fd5b600060208284031215620037df57600080fd5b8151600581106200125f57600080fd5b6000602082840312156200380257600080fd5b5051919050565b60038110620008da57600080fd5b6000602082840312156200382a57600080fd5b81356200125f8162003809565b600381106200384a576200384a620037b6565b9052565b6020810162000752828462003837565b6000602082840312156200387157600080fd5b81516200125f8162002fde565b6000602082840312156200389157600080fd5b81516200125f8162003809565b6000808335601e19843603018112620038b657600080fd5b83016020810192503590506001600160401b03811115620038d657600080fd5b8060051b3603821315620038e957600080fd5b9250929050565b8183526000602080850194508260005b8581101562003932578135620039168162002fde565b6001600160a01b03168752958201959082019060010162003900565b509495945050505050565b60018060a01b038316815260406020820152813560408201526020820135606082015260408201356080820152606082013560a0820152608082013560c082015260a082013560e0820152600061010060c08401358184015261012060e0850135818501526101408286013581860152620039bb828701876200389e565b935091506101a06101608181880152620039db6101e088018686620038f0565b9450620039ea83890162002ff4565b9350610180925062003a06838801856001600160a01b03169052565b87013590860152909401356101c0909301929092525092915050565b6000602080838503121562003a3657600080fd5b82516001600160401b0381111562003a4d57600080fd5b8301601f8101851362003a5f57600080fd5b805162003a70620031be82620032e1565b81815260059190911b8201830190838101908783111562003a9057600080fd5b928401925b8284101562003abb57835162003aab8162002fde565b8252928401929084019062003a95565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811262003af457600080fd5b83016020810192503590506001600160401b0381111562003b1457600080fd5b803603821315620038e957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152606060208201526000833562003b6f8162003809565b62003b7e606084018262003837565b5062003b8e602085018562003adc565b60c0608085015262003ba66101208501828462003b24565b91505062003bb8604086018662003adc565b605f19808685030160a087015262003bd284838562003b24565b935062003be3606089018962003adc565b93509150808685030160c08701525062003bff83838362003b24565b92505050608085013560e084015260a085013560ff8116811462003c2257600080fd5b60ff166101008401526001600160a01b038416604084015290505b949350505050565b6001600160a01b0383168152604081016200125f602083018462003837565b634e487b7160e01b600052601160045260246000fd5b60008262003c9857634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141762000752576200075262003c64565b60006020828403121562003cca57600080fd5b815180151581146200125f57600080fd5b8181038181111562000752576200075262003c64565b8082018082111562000752576200075262003c64565b600082601f83011262003d1957600080fd5b815162003d2a620031be8262003171565b81815284602083860101111562003d4057600080fd5b62003c3d8260208301602087016200374d565b60006020828403121562003d6657600080fd5b81516001600160401b038082111562003d7e57600080fd5b9083019060a0828603121562003d9357600080fd5b62003d9d62003119565b825181526020830151602082015260408301518281111562003dbe57600080fd5b62003dcc8782860162003d07565b60408301525060608301518281111562003de557600080fd5b62003df38782860162003d07565b6060830152506080830151608082015280935050505092915050565b80518252602081015160208301526000604082015160a0604085015262003e3a60a085018262003773565b90506060830151848203606086015262003e55828262003773565b915050608083015160808501528091505092915050565b6001600160a01b038516815261018060208083018290526000919062003e958483018862003773565b91508551604085015280860151606085015260408601516080850152606086015160a0850152608086015160c085015260a086015160e0850160005b600481101562003ef05782518252918301919083019060010162003ed1565b5050505082810361016084015262003abb818562003e0f565b6001600160a01b0384168152606060208201819052835162003f2e9183019062003837565b6000602084015160c0608084015262003f4c61012084018262003773565b90506040850151605f19808584030160a086015262003f6c838362003773565b925060608701519150808584030160c08601525062003f8c828262003773565b608087015160e086015260a087015160ff166101008601526001600160a01b0386166040860152925062003c3d915050565b600081518084526020808501945080840160005b83811015620039325781516001600160a01b03168752958201959082019060010162003fd2565b60018060a01b038316815260406020820152815160408201526020820151606082015260408201516080820152606082015160a0820152608082015160c082015260a082015160e0820152600060c0830151610100818185015260e08501519150610120828186015281860151925061014091508282860152808601519250506101a06101608181870152620040946101e087018562003fbe565b92870151929350610180620040b3878201856001600160a01b03169052565b9087015191860191909152909401516101c0909301929092525092915050565b600481106200384a576200384a620037b6565b6001600160a01b0386168152620041016020820186620040d3565b83604082015260806060820152600062003abb60808301848662003b24565b600581106200384a576200384a620037b6565b6001600160a01b03841681526200414e602082018462004120565b60606040820152600062004166606083018462003773565b95945050505050565b6001600160a01b03841681526200418a6020820184620040d3565b604081019190915260806060820181905260009082015260a00192915050565b6001600160a01b0383168152620041c5602082018362004120565b60606040820181905260009082015260800192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351620042628160178501602088016200374d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620042958160288401602088016200374d565b01602801949350505050565b600081620042b357620042b362003c64565b506000190190565b634e487b7160e01b600052603160045260246000fdfe60806040526040516109003803806109008339810160408190526100229161045b565b61002e82826000610035565b5050610585565b61003e83610100565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a260008251118061007f5750805b156100fb576100f9836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e9919061051b565b836102a360201b6100291760201c565b505b505050565b610113816102cf60201b6100551760201c565b6101725760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101e6816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d7919061051b565b6102cf60201b6100551760201c565b61024b5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610169565b806102827fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102de60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102c883836040518060600160405280602781526020016108d9602791396102e1565b9392505050565b6001600160a01b03163b151590565b90565b6060600080856001600160a01b0316856040516102fe9190610536565b600060405180830381855af49150503d8060008114610339576040519150601f19603f3d011682016040523d82523d6000602084013e61033e565b606091505b5090925090506103508683838761035a565b9695505050505050565b606083156103c95782516000036103c2576001600160a01b0385163b6103c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610169565b50816103d3565b6103d383836103db565b949350505050565b8151156103eb5781518083602001fd5b8060405162461bcd60e51b81526004016101699190610552565b80516001600160a01b038116811461041c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045257818101518382015260200161043a565b50506000910152565b6000806040838503121561046e57600080fd5b61047783610405565b60208401519092506001600160401b038082111561049457600080fd5b818501915085601f8301126104a857600080fd5b8151818111156104ba576104ba610421565b604051601f8201601f19908116603f011681019083821181831017156104e2576104e2610421565b816040528281528860208487010111156104fb57600080fd5b61050c836020830160208801610437565b80955050505050509250929050565b60006020828403121561052d57600080fd5b6102c882610405565b60008251610548818460208701610437565b9190910192915050565b6020815260008251806020840152610571816040850160208701610437565b601f01601f19169190910160400192915050565b610345806105946000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e960279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061024c565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b6060600080856001600160a01b0316856040516101419190610299565b600060405180830381855af49150503d806000811461017c576040519150601f19603f3d011682016040523d82523d6000602084013e610181565b606091505b50915091506101928683838761019c565b9695505050505050565b60608315610210578251600003610209576001600160a01b0385163b6102095760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b508161021a565b61021a8383610222565b949350505050565b8151156102325781518083602001fd5b8060405162461bcd60e51b815260040161020091906102b5565b60006020828403121561025e57600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b83811015610290578181015183820152602001610278565b50506000910152565b600082516102ab818460208701610275565b9190910192915050565b60208152600082518060208401526102d4816040850160208701610275565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122022a6bf5ebbb7518c40e703958b5c8e4d70ca6715c1e1ccf9e9591bfc86e066d164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564cdb004a2c4b58a687fd075d3ee33590a4807decba9bf65227a1ff25b56b056e9484152444341505f414e445f50524f544f434f4c5f4645455f4f564552464c4f575f52454d41494e494e475f535550504c59484152444341505f4f564552464c4f575f52454d41494e494e475f535550504c59a26469706673582212206a605d39f9dea9b26c30fbfcbc865d059a2fe99aa72ee43820076aa82e3b089d64736f6c63430008110033",
  "devdoc": {
    "details": "Protocol entry point",
    "events": {
      "FeesTransferred(address,uint256)": {
        "details": "Event emitted on transferring collected fees.",
        "params": {
          "amount": "Amount of transferred ETH",
          "to": "Transfer recepient"
        }
      },
      "PoolCreated(address,address,address)": {
        "details": "Event emitted on pool creation.",
        "params": {
          "pool": "Pool address",
          "tge": "Pool primary TGE address",
          "token": "Pool token address"
        }
      },
      "ProposalCancelled(address,uint256)": {
        "details": "Event emitted on proposal cacellation by service owner.",
        "params": {
          "pool": "Pool address",
          "proposalId": "Pool local proposal id"
        }
      },
      "ProtocolTokenFeeChanged(uint256)": {
        "details": "Event emitted on protocol token fee change.",
        "params": {
          "protocolTokenFee": "Protocol token fee"
        }
      },
      "ProtocolTreasuryChanged(address)": {
        "details": "Event emitted on protocol treasury change.",
        "params": {
          "protocolTreasury": "Protocol treasury address"
        }
      },
      "SecondaryTGECreated(address,address,address)": {
        "details": "Event emitted on creation of secondary TGE.",
        "params": {
          "pool": "Pool address",
          "tge": "Secondary TGE address",
          "token": "Preference token address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addEvent(uint8,uint256,string)": {
        "details": "Add event to directory",
        "params": {
          "eventType": "Event type",
          "metaHash": "Hash value of event metadata",
          "proposalId": "Proposal ID"
        }
      },
      "addProposal(uint256)": {
        "details": "Add proposal to directory",
        "params": {
          "proposalId": "Proposal ID"
        }
      },
      "cancelProposal(address,uint256)": {
        "details": "Cancel pool's proposal",
        "params": {
          "pool": "pool",
          "proposalId": "proposalId"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createPool(address,uint256,string,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address,uint256,uint256),uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256[4]),string,string)": {
        "details": "Create pool",
        "params": {
          "entityType": "Company entity type",
          "governanceSettings": "Governance setting parameters",
          "jurisdiction": "Pool jurisdiction",
          "metadataURI": "Metadata URI",
          "pool": "Pool address. If not address(0) - creates new token and new primary TGE for an existing pool.",
          "tgeInfo": "Pool TGE parameters",
          "tokenCap": "Pool token cap",
          "tokenSymbol": "Pool token symbol",
          "trademark": "Pool trademark"
        }
      },
      "createSecondaryTGE((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address,uint256,uint256),(uint8,string,string,string,uint256,uint8),string)": {
        "details": "Create secondary TGE",
        "params": {
          "metadataURI": "Metadata URI",
          "tgeInfo": "TGE parameters",
          "tokenInfo": "Token parameters"
        }
      },
      "getMaxHardCap(address)": {
        "details": "Return max hard cap accounting for protocol token fee",
        "params": {
          "_pool": "pool to calculate hard cap against"
        },
        "returns": {
          "_0": "Maximum hard cap"
        }
      },
      "getMinSoftCap()": {
        "details": "Calculate minimum soft cap for token fee mechanism to work",
        "returns": {
          "_0": "softCap minimum soft cap"
        }
      },
      "getProtocolTokenFee(uint256)": {
        "details": "calculates protocol token fee for given token amount",
        "params": {
          "amount": "Token amount"
        },
        "returns": {
          "_0": "tokenFee"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address,uint256)": {
        "details": "Constructor function, can only be called once",
        "params": {
          "poolBeacon_": "Pool beacon",
          "protocolTokenFee_": "Protocol token fee",
          "registry_": "Registry address",
          "tgeBeacon_": "TGE beacon",
          "tokenBeacon_": "Governance token beacon"
        }
      },
      "pause()": {
        "details": "Pause service"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setProtocolTokenFee(uint256)": {
        "details": "Set protocol token fee",
        "params": {
          "_protocolTokenFee": "protocol token fee percentage value with 4 decimals. Examples: 1% = 10000, 100% = 1000000, 0.1% = 1000."
        }
      },
      "setProtocolTreasury(address)": {
        "details": "Set protocol treasury address",
        "params": {
          "_protocolTreasury": "Protocol treasury address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferCollectedFees(address)": {
        "details": "Transfer collected createPool protocol fees",
        "params": {
          "to": "Transfer recipient"
        }
      },
      "unpause()": {
        "details": "Unpause service"
      }
    },
    "stateVariables": {
      "poolBeacon": {
        "details": "Pool beacon"
      },
      "protocolTokenFee": {
        "details": "protocol token fee percentage value with 4 decimals. Examples: 1% = 10000, 100% = 1000000, 0.1% = 1000"
      },
      "protocolTreasury": {
        "details": "address that collects protocol token fees"
      },
      "registry": {
        "details": "Registry address"
      },
      "tgeBeacon": {
        "details": "TGE beacon"
      },
      "tokenBeacon": {
        "details": "Token beacon"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Default admin  role"
      },
      "EXECUTOR_ROLE()": {
        "notice": "Executor role"
      },
      "SERVICE_MANAGER_ROLE()": {
        "notice": "User manager role"
      },
      "WHITELISTED_USER_ROLE()": {
        "notice": "User role"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 663,
        "contract": "contracts/Service.sol:Service",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 666,
        "contract": "contracts/Service.sol:Service",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1428,
        "contract": "contracts/Service.sol:Service",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1647,
        "contract": "contracts/Service.sol:Service",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/Service.sol:Service",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/Service.sol:Service",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/Service.sol:Service",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2851_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/Service.sol:Service",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 966,
        "contract": "contracts/Service.sol:Service",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1024,
        "contract": "contracts/Service.sol:Service",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 846,
        "contract": "contracts/Service.sol:Service",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 951,
        "contract": "contracts/Service.sol:Service",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4052,
        "contract": "contracts/Service.sol:Service",
        "label": "registry",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IRegistry)5742"
      },
      {
        "astId": 4055,
        "contract": "contracts/Service.sol:Service",
        "label": "poolBeacon",
        "offset": 0,
        "slot": "302",
        "type": "t_address"
      },
      {
        "astId": 4058,
        "contract": "contracts/Service.sol:Service",
        "label": "tokenBeacon",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 4061,
        "contract": "contracts/Service.sol:Service",
        "label": "tgeBeacon",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 4064,
        "contract": "contracts/Service.sol:Service",
        "label": "protocolTreasury",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 4067,
        "contract": "contracts/Service.sol:Service",
        "label": "protocolTokenFee",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRegistry)5742": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2851_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2851_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2851_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2850,
            "contract": "contracts/Service.sol:Service",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2536_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/Service.sol:Service",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/Service.sol:Service",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2536_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2531,
            "contract": "contracts/Service.sol:Service",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2535,
            "contract": "contracts/Service.sol:Service",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}